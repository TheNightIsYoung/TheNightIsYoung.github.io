{"pages":[],"posts":[{"title":"Git 使用指南之初识","text":"","link":"/2017/10/01/Git-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B9%8B%E5%88%9D%E8%AF%86/"},{"title":"Hello, Hexo Matery World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Begin To Edit ArticleDoc Front-Matter PolicyFront-matter 选项中的所有内容均为 非必填 的。推荐至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。 The Simple Demo1234---title: typora-vue-theme主题介绍date: 2017-12-18 00:55:00--- The Most Complete Demo1234567891011121314151617---title: Hello, Hexo Worlddate: 2017-12-18 00:55:00author: Waldeinsamkeitimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags: - Hexo - Markdown---","link":"/2017/09/23/Hello-Hexo-Matery-World/"},{"title":"MarkdownPad2 安装以及常见问题解决教程","text":"Markdown 是一种轻量级的，可以使用 普通文本编辑器编写 的标记语言。它允许所有的写作爱好者（Sharer）可以专注于内容而不是纠结于字体字号行间距等等排版问题（沉浸式写作），使用易读易写的纯文本格式编写文档，然后就可以转化成格式丰富优美的 HTML 页面或 PDF（所思即所得）。 MarkdownPad2 Setup And Crack In WindowsMarkdownPad2 可以在官网得到下载文件，传送门 –&gt; Markdown 官网，点击后自动下载，界面如下： 安装好后直接开始安装，一路 「Next」 即可，安装完成打开后会让升级到豪华版（Pro）。开始破解，点击 「Enter Key」 进入后输入账号密钥。此处提供一个来自网络上的账号（膜拜大佬吧）： Email address : Soar360@live.com License key： 1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== 直接粘贴后点击 「OK」 激活成功！至此 MarkdownPad2 安装以及破解已经完成。 Common Problem &amp;&amp; Solution汉化MarkdownPad2 汉化非常简单，已内置汉化包。选择左上角的 「TOOL」 下的 「option」 后在语言栏选择简体中文即可。 右侧无法预览MarkdownPad2 正常安装完成后，即可直接使用标记语言开始写作了，你可以直接在右侧实时预览效果（F5 开启预览功能）。 Win10 安装后打开后会发现右侧预览栏无法显示: 查阅相关资料后需要安装一个插件: To fix this issue, please try installing the Awesomium 1.6.6 SDK. 安装也是全程 「next」 即可，安装过程如下： 安装成功后，关闭软件再次打开即可正常使用 Markdown 了！ 表格以及代码无法显示使用 Markdown 插入表格和代码有时会发现无法正常显示，事实上，你只需要更改一下 Markdown 处理器就可以了： 中文版： 工具 –&gt; 选项 –&gt; Markdown –&gt; Markdown 处理器改为: GitHub Flavored Markdown(Offling) 英文版： Tools –&gt; Options –&gt; MarkDown –&gt; Markdown Processor –&gt; GitHub Flavored Markdown(Offling)","link":"/2017/09/20/MarkdownPad2-%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%95%99%E7%A8%8B/"},{"title":"Hexo 预安装环境部署之 Node.js","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。因此安装 Hexo 前，我们必须完成 Node.js 应用程序的下载和安装。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Node.js了解一定网页基础的同学肯定听说过 JavaScript。Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。简单的说， Node.js 就是运行在服务端的 JavaScript。 当然不了解 JavaScript 的同学也不要慌张，我们只需要将 Node.js 理解为：是 Hexo 用来渲染我们博客页面的插件即可。毕竟这里我们更关注的 Node.js 下载和安装，并不关心其原理以及使用。 开始安装之前，这里先给出 Node.js 安装包及源码下载地址。截至目前， Node.js 最新可供下载安装版本为：v10.15.0 (includes npm 6.4.1)。官网下载界面如下，我们可以根据不同平台的下载要求获取相应的安装包： 当然，你也可以从 Node.js 历史版本 获取到较老的历史版本。 下面我们来看不同平台（Windows、Linux 以及 Mac）下 Node.js：v10.15.0 (includes npm 6.4.1) LST（长期支持版本） 的下载以及安装方法： Windows 平台下安装 Node.js这里我们提供了两种 Windows 平台下来安装 Node.js 的方式： 使用 MSI Windows 安装包方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js MSI 安装包：node-v10.15.0-x64.msi 注意：要使用 MSI 安装应用程序 （例如：node-XYZ.msi）, Windows 系统必须支持 Microsoft Installer 2.0。需要看看你的机器是否支持 MSI，Windows XP 和更高版本已经有 MSI，很多老机器也可以安装 MSI。安装时，只要保存安装文件（**.msi**）到本地计算机，然后运行它即可完成安装（安装时，根据提示 Next 即可）。 下面我们正式开始 node-v10.15.0-x64.msi 的安装过程： 步骤 1 : 双击下载后的安装包 node-v10.15.0-x64.msi 开启安装界面，然后点击 Next 。如下所示： 步骤 2 : 勾选接受协议许可选项，然后点击 Next: 步骤 3 : Node.js 默认安装目录为 C:\\Program Files\\nodejs 。 你可以自定义修改存储目录（这里我存储于：E:\\nodejs），然后点击 Next： 步骤 4 : 点击树形图标来选择你需要的安装模式（默认为：Node.js runtime，这里我们选择：online documentation shortcuts）, 然后点击 Next 进入 Setup 界面。 步骤 5 : 点击 Install（安装） 开始安装 Node.js。 然后点击 Next，等待安装完成点击 Finish 即可： 步骤 6：DOS 安装检测 首先检测系统 PATH 环境变量中是否配置了 Node.js，日志信息输出如下： 12345PATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;E:\\TortoiseSVN\\bin;E:\\Git\\cmd;E:\\nodejs\\;C:\\Users\\xxxxxx\\AppData\\Local\\Microsoft\\WindowsApps;E:\\Anaconda3\\Scripts;E:\\Anaconda3;C:\\Users\\xxxxxx\\AppData\\Roaming\\npm 可以看到 E:\\nodejs\\ 路径已经被成功添加到系统环境变量 Path 中。 此时我们来查看安装好的 Node.js 版本号： 12C:\\Users&gt;node -vv10.15.0 至此，使用 “MSI Windows 安装包” 的方式安装 Node.js 的过程已经全部完成。 使用 EXE Windows 二进制文件方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js Binary 安装包：node-v10.15.0-win-x64.zip。 使用 Windows 二进制文件安装 Node.js 比较简单。直接解压安装包，然后双击安装目录下的：node.exe 等待即可 注意，node.exe 安装过程中会出现如下安装窗口： 安装版本测试： 查看已安装 Node.js 版本号，信息如下表示安装成功： 12C:\\Users&gt;node -vv10.15.0 如果没显示正确版本号，请添加系统环境变量。 Linux 平台下安装 Node.js 注意：Linux 上安装 Node.js 需要安装 Python 2.6 / 2.7 ，不建议安装 Python 3.0 以上版本。 使用已编译好的包Node.js 官网提供了已经编译好的 linux Node.js 安装包，解压即用： 123456789# 下载相应版本安装包（下载目录为：/usr/software）：$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz＃ 解压：$ tar -zxvf node-v10.15.0-linux-x64.tar.xz# Node.js 安装版本测试：＄ cd node-v10.15.0-linux-x64$ ./bin/node -vv10.15.0 注意，解压文件的 bin 目录底下包含了 node、npm 等命令，为了方便系统调用，我们可以使用 ln 设置命令软链接： 12ln -s /usr/software/node-v10.15.0-linux-x64/bin/npm /usr/local/bin/ ln -s /usr/software/node-v10.15.0-linux-x64/bin/node /usr/local/bin/ 使用源码安装1）Ubuntu 这一小节我们来看如何在 Ubuntu OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：开放目录权限： 1$ sudo chmod -R 755 node 步骤三：依次执行如下命令编译源码： 1234$ cd node-v10.15.0$ sudo ./configure$ sudo make$ sudo make install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile |——————————————————— 补充：Ubuntu 还可以通过 apt-get 命令 直接安装： 12sudo apt-get install nodejssudo apt-get install npm ———————————————————| 步骤五：检测是否安装成功： 12$ node --versionv10.15.0 2）Centos 这一小节我们来看如何在 Centos OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：解压源码文件： 1$ tar -zxvf node-v10.15.0.tar.gz 步骤三：依次执行如下命令编译安装源码： 1234cd node-v10.15.0./configure --prefix=/usr/local/node/10.15.0makemake install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile 步骤五：验证是否安装配置成功： 1$ node -v Mac 平台下安装 Node.js这里我们提供两种方式来在 Mac OS 上安装 Node.js： 1）使用 pkg 安装包 前往 Node.js 官网下载地址 下载最新 Node 版本 .pkg 安装包，进行安装即可。 2）使用包管理器 1$ brew install node","link":"/2017/09/20/Hexo-%E9%A2%84%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8B-Node-js/"},{"title":"Hello Hexo World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files12$ hexo clean$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Begin To Edit ArticleDoc Front-Matter PolicyFront-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON. YAML 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- JSON 123&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;;;; Front-matter 选项中的所有内容均为 非必填 的。推荐至少填写 title 和 date 的值。 Setting Description Default title Title Filename (posts only) date Published date File created date updated Updated date File updated date tags Tags (Not available for pages) categories Categories (Not available for pages) toc Article Contents false 以下为文章的 Front-matter 示例。 The Simple Demo1234---title: Hello Hexodate: 2017-12-18 00:55:00--- The Most Complete Demo1234567---title: Hello, Hexo Worlddate: 2017-12-18 00:55:00categories: [Markdown, Hexo]tags: [Markdown, Hexo]toc: true---","link":"/2017/01/16/hello-world/"},{"title":"基于图床的博客图片存储解决方案","text":"一个优秀的博客图片存储解决方案—图床。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Pictures use in hexo当你看到这里的时候，应该已经有一个自己的 Hexo 博客了。如果还没有的话，不妨使用 Hexo 和 Markdown 来写博客和文章。 在 Hexo 使用初期，你可能也遇到过和我相似的问题： 一篇添加了本地图片的博文在你的个人博客站点无法预览显示出来。 考虑一下：为什么博客站点中的本地图片无法正常加载显示？ 事实上，这个很好理解，图片是无法直接作为 MD 文本源码的一部分插入的，只能插入图片的地址，这个地址可以是相对 MD 文件的相对路径，也可以是网络图片地址（网络图片事实上也是不可靠的，毕竟来源是第三方的，当网络图片来源被删除时也会丢失，所以很多使用网络图片的博客一段时间后就无法显示了）。 这里我们先来考虑插入电脑本地图片的场景，Markdown 文档中指定的图片路径就是自己本地的路径，博客站点当然链接不到自己本地的图片了。 这里，我们先来分享一种基本的解决此问题的方法。使用 hexo-asset-image 插件来为博客插入图片： 插件下载在 Git Bash 中，进入 Hexo 站点目录下执行如下命令： 1$ npm install https://github.com/CodeFalling/hexo-asset-image --save Hexo 配置在 Hexo 站点配置文件中，搜索 post_asset_folder 关键字，并将其值设为：true： 1post_asset_folder: true 下载以及设置完成后，当你通过 hexo new “Blog Name” 新建博客后，会在 &lt;Hexo 站点目录&gt;\\source_posts 文件夹下产生一个和博文同名的文件夹（这个和博文同名文件夹可以作为当前博文的图集，远程推送时会被一起推送到远程库中）。 Demo设置后如何进行图像的插入呢？ 当博文需要添加图片时，将需要添加的图片放入和博文同名的文件夹中，同时通过【相对路径】索引到该图片即可。 例如，你想要在博文 post_name.md 中想要插入了一张图片（test.jpg）。首先你需要将图片资源放在同名文件夹 post_name 中，然后使用相对路径就可以引用到图片资源： 1![](test.jpg) 添加后你可以使用 hexo s 开启本地 Hexo 服务预览一下，发现已经可以正常显示图片了~ ========================================== 事实上，这样的使用是存在问题的： 当添加的图片比较多、比较大时，除了自己本地的博客源文件比较臃肿外，还会占用大量本地空间。再加上 Github 仓库的使用，会使得网站部署时非常的慢（推送图集）； 博客中所有的图片都是要部署到仓库的，而仓库容量是受限的，你懂得； 博文中存在大量图片时，会大大降低网页的加载速度，加载的难受啊； 哪里都有玄学….咳咳，之前的博客采用这种方法，不知道什么时候竟然丢失了一部分图片。 ┓( ´∀` )┏ 怎么办？幸好有度娘啊… 一个广泛使用的，优秀的博客图片存储解决方案 —— 图床。 Image HostImage Host（Picture Host），也称为图床。图床？！！ 何为图床？图床是指 用于储存图片，并且可以对外提供图片访问链接 的服务器。 服务器？！！难道博主又要骗我花钱买服务器拉？┓( ´∀` )┏ 事实上，有很多免费的图床可供你选择。国内和国外都有，国外的图床可能由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内很多大中小型公司都提供免费的图床服务，注册后就可以使用（真香）。 事实上，图床的本质就是： 将图片保存在网络上，并且可以获得图片的直链地址。 爱思考的看客老爷可能已经反应过来了： 这不就是博主前面说的网络图片链接么？你不是说不可靠么？！不要担心，前面我们使用的网络图片其实是其他人提供的图床。这当然是不可靠的，毕竟你不知道什么时候这些图床就不再提供了！之后我们使用的是自己的图床，这是可控的。 了解了图床的基本概念之后，我们再来看一下图床都有哪些优点： 图床的优点1 –&gt; 图床访问速度快 图床，一般会把图片存储到第三方的 CDN，除了加快图片访问速速，还可以降低你服务器的存储压力，后续网站迁移扩容就不受影响了。 2 –&gt; 博客前瞻性 目前，你可能只是在部署一个个人博客小网站，但是以后无论是自己的博客还是实际的项目，都可以用图片来提供外链，方便管理。 并且如果你的网站访问量很高啊，一天几十万几百万啊，这时候你考虑的就不是服务器空间够不够大，而是惊人的并发数啊，光是请求 HTML 文件（或其他）的链接就处理不过来了，哪还有多余的资源去读取图片啊，索性就把图片存另一个服务器，为主服务器缓解压力。 大致了解了图床的基本概念以及其优点，这里我们来看当前个人博客有哪些具体的图床实施方案？ 图床实施方案说到这里，图床原来就是图片网络链接啊。可能一些爱动手的看客老爷可能已经开始思绪乱飞~ 下面我们来看如何将图片保存在网络上且获得图片的链接地址方案，看客老爷可以根据个人实际情况进行选择： 网盘很多看客老爷可能想到，如果直接把图片放到各类网盘（百度、腾讯、坚果、OneDrive…）是否可行？ 事实上，虽然网盘上传图片方便快捷，免费存储空间又足够，但是网盘中的图片无法获取到链接，或者获取到链接后很快就无法使用了。 直接 Pass…. 自建图床服务器关于自建图床服务器，如果你有一台可供使用的个人服务器，可以尝试使用FTP、Nginx、PHP、MySQL、Chevereto等工具搭建个人图床服务器。 缺点就是，你需要支出必要的服务器等费用，还需要去进行相对繁琐的安装过程才可以使用。 关于自建图床服务器方法，网络上的教程很多。当然你也可关注博主相关系列博客 –&gt; 传送门（待续…）。 云存储对象腾讯云、阿里云、等云平台都提供有云储存对象支持，可以用作图床使用，配置过程也非常简单快捷。 但是缺点是，虽有免费额度，但使用量较大时，可能产生相关存储流量费用。但贵在对于访问量较少的个人博客使用很便宜甚至免费，具体收费情况可见各云平台。 特别说明，云存储对象的使用可能涉及到实名认证，域名备案等。 关于使用云存储对象配置图床，请参见博主相关系列博客 –&gt; 传送门（待续…）。 第三方免费图床(推荐)上面我们说过，国内外有很多免费的图床可供使用。 在选择一款免费图床平台时，你需要关注的是，图床平台服务商是否可靠，图床的流量限制、储存限制以及访问速度等。 例如：免费存储容量为10G，每月访问流量10G，每小时限制上传 20 张，每张大小小于 10M 之类的，但这对于写MD 远远够了。当然这些第三方服务商也是提供相关的收费服务的，你可以消费提升使用权限。 特别说明，一定要选择相对大平台的服务商，主要是怕图床服务商经营惨淡，挂掉以后图片就丢失了。并且有些第三方免费图床会要求进行实名认证，域名备案等。 ===================================================== 网络上各路主流图床推荐： 1 –&gt; 微博图床 你在查找时，很有可能查到使用微博做为博客图床的教程。 这里特别说明一下，微博图床之前使用人较多，但从2019年开始开启了防盗链，直接凉凉了…. 2 –&gt;七牛云 官网地址：https://portal.qiniu.com 简介：注册认证后有 10G 永久免费空间，每月 10G 国内和 10G 国外流量，速度相当快，七牛云是国内专业 CDN 服务商，插件支持比较多，有免费 SSL 证书，但 HTTPS 流量收费。 图片上传限制：暂无 七牛云 30 天后会回收测试域名，因此你必须要实名认证以及绑定自己的已经备案的域名。 3 –&gt;又拍云 官网地址：https://www.upyun.com 简介：注册认证后有10G永久免费空间，每月 15G 的 HTTP 和 HTTPS 流量，提供两款可以免费续期的 SSL 证书，不过用户需要加入又拍云联盟（即在网站底部添加又拍云 LOGO 及官网链接）。 图片上传限制：暂无 需要实名认证以及绑定自己的已备案域名，又拍云认证比较麻烦，建议使用七牛云。 4 –&gt;路过图床 官网地址：https://imgchr.com 简介：支持免注册上传图片，永久存储，支持 HTTPS 加密访问和调用图片，提供多种图片链接格式。 图片上传限制：最大10M 5 –&gt;SM.MS 官网地址：https://sm.ms 简介：永久存储免注册，图片链接支持 HTTPS，可以删除上传的图片，提供多种图片链接格式，有时速度可能较慢。 图片上传限制：每个图片最大 5M，每次最多上传 10 张 ================================================== 墙裂推荐： 如果想要长期稳定使用，请优先选择七牛云或者又拍云（需要实名认证以及已备案域名），再下来就是路过图床和SM.MS 图床。 图床工具选择好图床之后，你可以选择搭配以下图床工具一起使用以便更高效地使用图床： 图片压缩工具上传图片之前建议压缩一下，一方面可以降低存储，又可以有效加快图片载入速度： TinyPNG –&gt; 传送门 Tiomg –&gt; 传送门 图床工具使用图床工具可以方便我们快速将本地图片转换成图床链接，以方便各位博主使用： PicGo（Molunerfinn/PicGo），是一款比较优秀的图床工具，可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，imgur 等八种常用图床。且功能强大，简单易用。 关于 PicGo 的安装以及配置方法，请参见博主相关系列博客 –&gt; 传送门（待续…）。 自此，我们就成功搭建起了基于 “Hexo + Github·Pages + Gitee·Pages + Domain + VSCode + TinyPNG + PicGo + Image Host ” 的博客","link":"/2017/09/21/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E5%BA%8A%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"打造沉浸式写作体验，你需要试试 Markdown + Editor","text":"Markdown，一款轻量级的，可以使用普通文本编辑器编写的标记语言，打造沉浸式写作新体验。 Markdown + Editor「Action」 夜深人静，房间的门紧闭着，灯也关着。 屏幕发出的亮光隐约勾勒出坐在电脑前码字的你的轮廓。 你脑海中的思绪畅游，无数想法在飞舞，但输出过程却不像脑中的思考那么流畅。 为了打磨用词和造句，你的手不断的从键盘移到鼠标上，只为把光标移到合适的位置。为了快速的调整样式，你虽然记住一些快捷键，但发现依然要先用鼠标选中。 不要小瞧了这看似短暂频繁的切换，稍纵即逝的想法可不会因为你的输出的节奏的中断而停留。 沉浸式写作 的前提，可不是只要有个安静不受打扰的环境就够了，你还需要让输出的速度跟上你思考的速度。 如果你刻意练习过盲打，那么你会知道提高打字速度的首要条件就是保证打字姿势的稳定，手要保持在键盘上，尽量减少手的移动范围。 可问题是，在写作过程中，如何才能在保持手在键盘上，却依旧能准确的移动光标、调整样式呢？ 答：忘记鼠标，只用键盘就好。 …… 哎哎哎，千万别走，不是在逗你。 相信我，你只需要一个简单的文本编辑器（YOU WANT），再熟练掌握一把“利刃”——Markdown Syntax，就可以开启新世界的大门。 Markdown 初识Markdown 是一种轻量级的，可以使用 普通文本编辑器编写 的标记语言。它允许所有的写作爱好者（Sharer）可以专注于内容而不是纠结于字体字号行间距等等排版问题（沉浸式写作），使用易读易写的纯文本格式编写文档，然后就可以转化成格式丰富优美的 HTML 页面或 PDF（所思即所得）。你唯一要付出的代价就是掌握极其 简单的标记语法。 眼尖尖的同学已经发现：普通文本编辑器编写！？对，你看的没错，只要你手头有任意一款文本编辑器，参照后文中「Markdown Function Demo」标记语法，就可以开始使用 Markdown “随心所欲”了。 敲黑板！！！是不有“急躁”的看官已经默默打开 Windows 自带的记事本准备开始尝试了…？ 初学者警告！！！ 初学 MarkDown 的人，最开始可能会用 Windows 自带的记事本进行编辑，然后baidu，balabala….在线转成 HTML 或 PDF，用自带的浏览器打开查看效果。这种方式是最绿色的不依靠任何其他软件，就可以完成一份高质量的排版，但…实在是太累了。 Windows 自带的记事本没有语法提醒功能，也没有语法高亮功能，还无法 实时预览，对初学者很不友好。往往边写作的同时还要百度语法，这就失去了用 MarkDown 快速办公的意义了（相信看客老爷们愤怒了，你不是说任何普通编辑器就可以编写了！！！前提是你得使用灰常熟练啊~人艰不拆…）。 事实上，使用更多的是： –&gt; 1 Markdown 在线编辑器，推荐一种：MdEditor； –&gt; 2 专门支持用来写 Markdown 的编辑器：MarkdownPad、Typora 等等。 对于新手，选择一款顺手的 Markdown 编辑器是刚需啊… MarkDown 编辑器推荐MarkdownPad2很多初学者的第一选择，支持多操作系统平台，UI 简洁，使用流畅，功能全面，但需要升级到 Pro 版本后（付费升级，可破解）才可解锁所有功能。主要特点：左右分屏实时预览（F5），可自定义添加各种 CSS 样式渲染。 缺点也很明显，软件 UI 一般般，更重要的是，安装后可能存在一些 Bug，如公式不能正常显示…，需要自行 baidu 解决。 关于 MarkdownPad2 安装以及常见问题解决见: 传送门 –&gt; MarkdownPad2 安装以及常见问题解决教程 。 Typora推荐，同样支持多平台（OS X， Windows 和 Linux），UI 界面美观，官网的首页如下： Typora 抛弃了传统的交互模式，它只使用一个窗口，却能优雅地实现同时将代码编辑与预览结合起来！从而为用户带来更加流畅直观的，所见即所得的 Markdown 写作体验。毕竟，对于刚接触 MarkDown 的新手来说，实时预览的功能真的太重要了。 Typora 安装过程很简单，一路 「Next」 即可。 Atom开源世界的巨人，全世界最大的，开源平台，GitHub 出品的编辑器 Atom，也是很多人选择使用的。 和 Typora 不同的是，Atom 并不只是用来写 MarkDown，通过丰富的插件机制支持 CSS，HTML，JavaScript 等各种网页编程语言，常用于 WEB 开发, 也可用于 PHP 等后端开发。 个人建议，可以和 Typora 二选其一（博主没有使用过 Atom，捂脸~）。 事实上，光日常学习和使用有上面几款编辑器已经可以满足你的需要了。 VS Code真正的编辑器神器，强烈安利！ 本人最常用的一款开源的文本编辑器编辑器（Atom 表示很悲伤），不仅用它写 MarkDown 文档，还可以通过丰富的插件机制用它写 Python、C/C++、Java 等等，几乎支持所有的语言。 你只需要下载它，安上 Markdown Preview Enhanced 插件就可以薅微软爸爸的羊毛了。界面效果图如下： 对于使用，篇幅原因，这里不进行详细的赘述。如果你想要详细了解 VS Code 的更多使用方法，可以关注我的相关博文。 Markdown 编辑器选择好之后，你就可以开始学习 Markdown 标记语法了： Markdown Function Demo标题演示一级标题：H1 语法规则： # 标题H1 MarkdownPad 中快捷键：Ctrl + 1 二级标题：H2 语法规则： ## 标题H2 MarkdownPad 中快捷键：Ctrl + 2 三级标题：H3 语法规则： ### 标题H3 MarkdownPad 中快捷键：Ctrl + 3 四级标题：H4 语法规则： #### 标题H4 MarkdownPad 中快捷键：Ctrl + 4 五级标题：H5 语法规则： ##### 标题H5 六级标题：H6 语法规则： ##### 标题H6 字符效果和横线演示删除线语法规则： &lt;s&gt;删除内容&lt;/s&gt; 显示效果： 删除内容 斜体字语法规则：*斜体字* &amp;&amp; _斜体字_ 显示效果： 斜体字 &amp;&amp; 斜体字 粗体法规则： **粗体** &amp;&amp; __粗体__ 显示效果： 粗体 &amp;&amp; 粗体 斜粗体语法规则： ***粗斜体*** &amp;&amp; ___粗斜体___ 显示效果： 粗斜体 &amp;&amp; 粗斜体 上下标语法规则：X&lt;sub&gt;2&lt;/sub&gt;, O&lt;sup&gt;2&lt;/sup&gt; 下标：X2，上标：O2 缩写缩写功能，同 HTML 的 &lt;abbr&gt; 标签 即更长的单词或短语的缩写形式，前提是开启识别 HTML 标签，默认已开启。 语法规则： The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;. 显示效果如下： The HTML specification is maintained by the W3C. 分割线 语法规则： — 字体颜色 语法规则: 1&lt;font color=blue/red/yellow...&gt; Text &lt;/font&gt; 显示效果： 此处文本为蓝色 此处文本为红色 引用 Blockquotes 文本引用 Blockquotes 引用的行内混合 Blockquotes 规则: &gt; 引用内换行使用&lt;br /&gt;标签，此处换行–&gt;这里为下一行引用文本。 锚点与链接 Links这是一个普通链接 语法规则： [这是一个普通链接](https://www.baidu.com/) 语法规则： [这是一个带标题的普通链接（光标移到此处显示标题）](https://www.baidu.com/ &quot;百度一下&quot;) 这是一个直接链接：https://www.baidu.com 语法规则： 这是一个直接链接：&lt;https://www.baidu.com&gt; 多语言代码高亮 Codes行内代码1Ctrl + k 或者 Tab 或者 ``` ``` 预格式化文本缩进后可用于格式化文本，正常以下内容会显示一个表格（可见下文绘制表格部分：3.8）： 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | JS 代码12345​```javascriptfunction test() { console.log(&quot;Hello world!&quot;);}​``` 显示效果如下： 123function test() { console.log(&quot;Hello world!&quot;);} HTML 代码12345678910111213141516171819​```html&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt; &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;​``` 显示效果如下： 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt; &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 图片链接 语法规则： [![](https://www.mdeditor.com/images/logos/markdown.png)](https://markdownpad.com &quot;markdown&quot;)] 可以发现，我们只是把链接中的文本替换为图片，就创建了一个图片链接。 如何插入图片： 语法规则： ![](https://www.mdeditor.com/images/logos/markdown.png) 插入图片效果如下： Follow your heart. 列表 Lists无序列表（减号）Unordered Lists (-)- 列表一 - 列表二 - 列表三 显示效果如下： 列表一 列表二 列表三 无序列表（星号）Unordered Lists (*)* 列表一 * 列表二 * 列表三 显示效果如下： 列表一 列表二 列表三 无序列表（加号和嵌套）Unordered Lists (+)多级列表注意缩进（2 空格），显示效果如下： 列表一 列表二 列表二-1 列表二-2 列表三 列表三-1 列表三-2 有序列表 Ordered Lists 第一行 第二行 第三行 绘制表格 Tables语法规则： 默认标题栏居中对齐，内容居左对齐。 -: 表示内容和标题栏居右对齐，:- 表示内容和标题栏居左对齐，:-: 表示内容和标题栏居中对齐。 内容和 | 之间的多余空格会被忽略，每行第一个 | 和最后一个 | 可以省略，- 的数量至少有一个。 | First Header | Second Header | | ------------ | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | 显示效果如下： First Header Second Header Content Cell Content Cell Content Cell Content Cell 去练习如下样式： Function name Description help() Display the help window. destroy() Destroy your computer! Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 Item Value Computer $1600 Phone $12 Pipe $1 特殊符号 HTML Entities Codes &amp;copy; &amp; &amp;trade; &amp;iexcl; &amp;pound; &amp; &trade; &iexcl; &pound; &amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; &amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14; &amp;times; &amp;divide; &amp;raquo; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 18&amp;ordm;C &amp;quot; &amp;apos; 18&ordm;C &quot; &apos; 科学公式 MathJaxMarkdown 文档中引入 MathJax 标签就可以正常显示了，标签内容如下： &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt; 然后你会发现，博文中插入的公式已可以正常显示了： $$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$","link":"/2017/09/20/%E6%89%93%E9%80%A0%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%86%99%E4%BD%9C%E4%BD%93%E9%AA%8C%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E8%AF%95%E8%AF%95-Markdown-Editor/"},{"title":"Hexo 博客多设备协同管理问题【持续更新】","text":"优秀的 Hexo 博客多环境、多设备协同管理方案。 前面我们已经成功搭建了基于 Hexo + Github·Page + Coding·Page + Domain + VSCode + TinyPNG + PicGo + Image Host 的个人博客环境。系列博文中给出了 Hexo 新手小白如何快速搭建基于 Hexo 的个人博客进行产出。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 前面我们提到过，hexo d 仅仅是将 Hexo 博文静态页面推送到了远程仓库（Github·Page 或 Coding·Page）上以实现公共访问，而 Hexo 个人博客框架相关配置信息都存放在本地终端。如果未进行其它备份或同步处理，一旦存放 Hexo 配置信息的本地终端出现问题（如系统崩溃），那么我们便无法再维护我们的的博客了，Game Over… 所有当我们更换工作环境（公司、个人）或者原来用于搭建 Hexo 博客环境的设备需要重新更换系统，出于安全性以及灵活性考虑，我们不得不面对的一个问题就是： 如何将本地终端中的 Hexo 博客相关配置信息完美移植到新环境是至关重要的。 使用 Git 解决 Hexo 个人博客多平台同步管理关于 Hexo 博客多平台（多设备）协同管理以及更新教程网络上有很多，但对于刚刚接触 Hexo 、Git 的小白们不太友好，配置过程中容易出现各种问题，本文提到的所有配置方案均通过实际测试给出。 本文所作的主要目的：一方面作为学习记录回顾使用；另一方面适用于类似我这样的 Git 新手以供参考分享，可以快速对应以及解决问题。所以文中有些地方可能表达有误，欢迎各位大佬指正。 模拟场景公司和家里两台 PC： 公司 PC_A：最初用于搭建 Hexo 个人博客的终端； 个人 PC_B：移植 Hexo 个人博客项目的终端。 为了可以随时随地创作更新个人 Blog，两台 PC 中都必须搭建有相同的 Hexo 博客环境，并这必然要求我们的 Hexo 博客本地配置项目要保持同步（即实现版本控制）。 对于 同步 问题： 由于除了静态页面 以外，其它全部文件都在本地生成，所以如果在公司终端上推送了 articleA 文章后回家又写了篇 articleB 文章，在家里推送后我们会发现只有 articleB 文章而 articleA 文章没了（因为家里的 PC 上没有 articleA 文章的 md 文件），故及时同步两台 PC 终端中的 Hexo 博客项目相当重要。 也就是说，对我们的 Hexo 个人博客本地项目实现版本控制是必要的。 — important split line — 这里，我们首先给出解决 Hexo 个人博客多平台同步管理的通用步骤： 搭建 Hexo 个人博客环境，包括： Node.js、Git 以及 hexo 的安装，具体安装方式可见前面提到的搭建教程。 对 Hexo 个人博客本地配置信息项目实现同步，也就是版本控制。 实施方案分析介于模拟场景提到的解决方法，搭建 Hexo 个人博客环境本文不在做细致说明，参考前面教程即可。针对同步（备份），这里我们给出三种具体的版本控制（同步、备份）的实施方案分析： 存储设备备份使用存储设备备份，是指我们使用存储设备对 Hexo 个人博客项目本地文档进行备份。例如，我们可以直接对 PC_A 中最新的本地 Hexo 博客目录进行打包存储到硬盘、U盘或者云盘（大多数使用）中，然后将其移植 PC_B 中进行直接使用。 下面我们来分析其优略： 1）优点： 免费且操作简单快捷。 在某些场景下可以很快完成移植，而不需要进行额外的同步设置。例如，当我们的电脑需要重装系统时，我们可以直接将最新的 Hexo 博客项目进行打包，新系统中搭建好 Hexo 个人博客环境后，直接解压几乎就可以使用了。 2）缺点： 对于硬盘、U盘等设备，备份后的同步十分麻烦，每次其它终端都需要手动下载备份最新的 Hexo 博客文件夹，进行手动覆盖。 目前大多数云盘，可以开启云端自动备份功能，写完 Blog 后可以自动备份（同步）到云端。但是很容易产生一些云盘内部文件，影响 Hexo 解析产生一些不可预期的错误。 因此，使用存储设备备份使用的很少。 第三方代码仓库备份鉴于之前我们将 Hexo 个人博客产生的静态页面托管到了一些第三方 Git 服务平台，以实现远程访问。同样，类似于代码托管，我们可以将我们的 Hexo 个人博客项目本地配置信息文档托管到远程仓库进行版本控制，以实现多设备的同步管理。这是 目前最合理，并且使用最多 的解决方案。 使用第三方代码仓库进行备份是目前普遍使用的对 Hexo 个人博客进行备份同步的方法。 国内外现在知名的 Git 服务提供商主要有： Github、Coding 以及 Gitee（码云）等等，使用上没有比较大的差异，但国内站点访问较快。 下面我们来分析其优略： 1）优点： 部署完成后同步非常方便，Hexo 更新完后只需要再更新（push）全站到 Git 远程仓库即可。 2）缺点： 部署过程相对比较麻烦，对 Git 新手不友好，但这仅仅是 Git 使用上的问题，不是难点。 对于使用第三方代码仓库（以 Github 为例）进行备份的方法，目前主流的有两种方法： 分支备份法：我们知道，Hexo生成的静态博客文件都是上传到 GitHub 上的, 且默认放在 master 分支上。分支备份法是将本地的 Hexo 相关环境配置文件都推送到对应仓库新创建的分支上（如 hexo 分支），以实现备份。 将本地整个 Hexo Blog 项目进行备份：创建一个新的仓库用来对本地环境配置文件进行版本管理以及备份。 实施方案细则下面我们将以前面提到的实施方案给出其具体的操作指南，你可以根据需要选择不同的实施方案： 方案一：Hexo Envs + Cloud–&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo –&gt; 步骤二：yunpan1）将 PC_A 终端中 Hexo 个人博客项目目录进行打包（打包格式任选，在 PC_B 中可以实现快速解压即可），备份到云盘。 2）然后在 PC_B 中从云盘下载已经上传好的 Hexo 个人博客项目压缩文件，然后进行解压。 3）PC_B 中开启 Hexo 服务，然后打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 4）Hexo 个人博客本地测试通过后，由于更换设备，我们需要为Hexo Github·Page（Coding·Page）仓库配置新设备的 SSH Key。此时只需要将新设备（PC_B ）的 SSH Key 添加到 Github（Coding）中即可。如果不进行设置，当使用 hexo d 进行推送时无法成功，原因在于 Hexo 无法连接到 Github·Page（Coding·Page）。 关于新设备创建 SSH Key 方法以及为 Github 配置 SSH Key 可参加：Git 使用指南之远程仓库（待续…）。 除了上述添加方式外，还有一种更简单的方式，我们可以将 PC_A 生成的 .ssh 文件直接放到 PC_B 设备当前用户目录下即可。 自此，设置完成。这种方法缺点很明显，对于同步很不友好！！！ 方案二：Hexo envs + hexo 备份这一小节，我们来看如何将本地整个 Hexo Blog 项目进行备份。即创建一个新的仓库用来对本地环境配置文件进行版本管理以及备份。 关于 Git 远程仓库的选择，Github or Coding or Gitee 三选其一即可，这里以 Github 为例，推荐使用 Coding or Gitee。这也就意味着： Hexo 博客静态页面托管到一个仓库，Hexo 博客配置托管到另一个远程仓库。 –&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo 步骤一和方案一种中完全一样，实现 PC_B 上 Hexo 环境的部署。 –&gt; 步骤二：hexo 项目备份注意，这一部分操作全部在 PC_A（保存了 Hexo Blog 最新进度）上进行，用于将本地整个 Hexo Blog 项目托管到 Github 上的一个全新仓库（以创建 HexoBackups 为例）。 首先，添加设备 SSH Key 到 Github 以提供访问权限（在搭建 Hexo 环境时已经添加过），并且在 Github 中创建 HexoBackups 仓库（操作方法可见：Git 使用指南之远程仓库（待续…））。 1）删除 Hexo 站点目录主题路径（Hexo站点目录\\themes）下原有的 .git* 缓存文件夹，并编辑站点目录中的 .gitignore 文件。 有些插件或者主题是从 Github 上 clone 过来安装的，每个文件夹下都会有对应的 .git 文件夹，记得先删掉，否则会和 Blog 仓库冲突。（.git 默认是隐藏文件夹，需要先开启显示隐藏文件夹。.git 文件夹被删除后整个文件对应的 Git 仓库状态也会被清空，避免冲突） 编辑 .gitignore 文件的作用是声明不被 Git 记录的非必要文件（我们希望将必要的 Hexo 配置文件进行版本控制，而不是所有文件）。Blog 站点目录下的 .gitignore 是 Hexo 初始化时生成的，可以先删除或者直接编辑，对 Hexo 不会有影响。我的 Hexo 默认 .gitignore 文件内容如下： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ .deploy_git 是 Hexo 默认的 .git 配置文件夹，不需要同步； public 内文件是根据 source 文件夹内容自动生成，不需要备份，不然版本仓库每次修改内容太多； node_modules 目录中存放了 Hexo 个人博客所需的所有插件，太大，使用时通过 npm install 安装即可。 .DS_Store、Thumbs.db、*.log 、db.json 等均属于非必要文件。 2）初始化本地仓库 Hexo Blog 站点目录下执行以下代码： 123# &lt;server&gt; 是指远程备份仓库的地址（HexoBackups）；origin 是本地分支；remote add 操作会将本地仓库映射到云端 git initgit remote add origin &quot;Repository Addr&quot; “Repository Addr” 即上面创建的用于备份的仓库：HexoBackups 的仓库地址。 3）添加本地文件到本地仓库并同步到远程 Github 上 123456# 添加 Hexo Blog 站点目录下所有文件（.gitignore 声明过的文件不包含在内)git add .# 添加更新操作说明git commit -m &quot;Hexo Blog Backups&quot;# 推送更新到云端服务器git push -u origin master 在执行这步之前一定要注意检查下 .gitignore 文件的内容，看看是否正确的把一些文件夹忽略掉了。如果加错了的话可以用： 1git rm -r --cached . 自此，我们已经成功将本地 Hexo 博客配置文件推送到了 Github 远程仓库 HexoBackups 中实现版本控制。 –&gt; 步骤三：其它设备终端克隆测试1）添加 SSH Key 到 GitHub 首先，我们需要将设备 PC_B 的 SSH Key 添加到 GitHub 以提供访问权限。 2）将 Hexo Github 仓库内容同步到本地 之前我们已经成功将 PC_A 电脑里的 Hexo 配置信息备份到 Github HexoBackups 仓库了。 现在在 PC_B 电脑准备通过为本地仓库配远程 Hexo Github 版本仓库以实现 Hexo 配置信息同步。 123456789# 创建本地博客目录mkdir HexoBlogProjectcd HexoBlogProjectgit init# 将本地文件和云端仓库映射起来。这步不可以跳过git remote add origin &quot;Repository Addr&quot;git fetch --allgit reset --hard origin/master 当然我们还可以直接 git clone 将 HexoBackups 仓库中的 Hexo 博客配置文件拉取下来： 1git clone &quot;Repository Addr&quot; 3）安装依赖插件 同步后需要安装相应的 Hexo 插件（这是由于我们之前备份时未备份 node_modules 插件目录），否则无法正常使用 Hexo： 1npm install 4）localhost 测试 PC_B 中打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 方案三：Hexo envs + hexo 分支备份和方案二中备份整个 Hexo 本地配置信息文件到一个新仓库不同的是，分支备份是在原 Hexo 静态页面托管仓库（username.github.io）重新创建一个分支（以 hexo 分支为例）来备份 Hexo 本地配置信息文件。 最终，username.github.io 仓库的 master 分支和 hexo 分支各自保存着一个版本： master 分支用于保存 Hexo 博客静态资源，提供博客页面以供人访问；hexo 分支用于备份博客部署文件，供自己维护更新，两者在一个 username.github.io 仓库内也不会有任何冲突。 -&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo 步骤一和方案一种中完全一样，实现 PC_B 上 Hexo 环境的部署。 –&gt; 步骤二：hexo 分支备份注意，这一部分操作全部在 PC_A（保存了 Hexo Blog 最新进度）上进行。 和 方案二 中备份过程类似，这一部分给出 Hexo 分支备份通用流程，关于操作解读可对应 方案二 中的步骤二。 12345678910111213141516171819# 消除 Git 仓库冲突rm -rf Hexo站点目录\\themes\\主题目录、.git*# 即 Hexo 博客根目录cd Hexo站点目录# 初始化本地仓库git init# 将本地与 Github 远程仓库进行对接git remote add origin git@github.com:user/user.github.io.git# 添加 Hexo Blog 站点目录下所有文件（.gitignore 声明过的文件不包含在内)git add .# 添加更新操作说明git commit -m &quot;Hexo Blog Backups&quot;# 创建名为 hexo 的分支git checkout -b hexo# 推送分支到 GitHubgit push origin hexo –&gt; 步骤三：其它终端克隆测试1）添加 SSH Key 到 GitHub 首先，我们需要将设备 PC_B 的 SSH Key 添加到 GitHub 以提供访问权限。 2）克隆 Hexo 博客环境 123# 将 Github 中 hexo 分支 clone 到本地git clone -b hexo git@github.com:username/username.github.io.gitcd user.github.io 3）安装依赖插件 12# 安装 Hexo 博客中使用到的插件npm install 4）localhost 测试 PC_B 中打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 Git + Hexo 管理博文这一部分我们来看加入版本控制后，如何进行 Hexo Blog 的多平台协同创作 （Git + Hexo）？ –&gt; 步骤一：发布静态页面 假设在 PC_B 电脑上写完了文章，然后进行发布： 1$ hexo d -g –&gt; 步骤一：同步 Hexo 最新配置 接下来，我们还需要将新文章的 .md 文件推送到备份仓库。（其实就是提交更新给 Hexo Github 备份仓库）： 1$ git add . 这时候可以用 git status 查看状态，一般会显示刚刚更改过的文件状态。如： 123456On branch masterChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) modified: db.json new file: source/_posts/test.md 上面的输出状态即说明 db.json 文件做了更改，source/_posts 目录下新增了 test.md 文件。 然后对更改添加说明并推送到远程仓库： 123456git commit -m '更新信息'# 推送git push# 或者（取决于整体备份还是分支备份）git push origin hexo 当显示类似如下提示的时候，即表示备份成功： 12To git@git.oschina.net:xxxx/HexoBackups.git + 2c77e1e...5616bc6 master -&gt; master (forced update) 再回到到 PC_A 电脑上的时候，我们需要拉取最新的 Hexo 配置信息到本地以实现本地仓库和远程仓库一致： 1234# 拉取最新版本git pull# 或者（取决于整体备份还是分支备份）git pull origin hexo 即可实现 Hexo 博客同步更新以及协同管理。 常见问题hexo init 卡死Hexo 搭建个人博客时，调用 hexo init 命令一直卡住不动： 12$ hexo initINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.git 这就很困惑了，npm 已经使用了淘宝源，node.js &amp;&amp; npm 版本也比较新，就是 hexo init 不成功…. 此时查看 Hexo 站点路径，发现目录已经出现clone的文件目录结构： 12345678.gitscaffoldssourcethemes.gitignore_config.ymldb.jsonpackage.json 网上查找原因，应该是 Hexo 主题未能成功下载（子模块未能成功下载），可以在 .gitmodules 查看相关信息： 123submodule &quot;themes/landscape&quot; path = themes/landscape url = https://github.com/hexojs/hexo-starter.git 通过查看站点目录下的 themes 目录，发现确实没有相应主题。 –&gt; 解决方法： 为 Git 配置代理： git config –global http.proxy http://proxyuser:proxypwd@proxy.server.com:port 当然，你也可以等待网络流畅时重新进行 hexo init，说不定下一次执行就成功了。 npm install 很慢很慢安装 Hexo 博客相关依赖插件时，我们需要使用 npm install 下载进行安装。但是执行指令后一直没反应，这是由于 npm 官方资源被墙，我们可以为其更换一个国内源： 1npm config set registry https://registry.npm.taobao.org 当然，当我们的 Hexo 个人博客使用较多的插件时，npm install 可能看起来很慢（好像卡在某一个安装语句不再执行），此时我们可以通过 Hexo 站点目录下的 node_modules 目录更新时间来判断。 如果 node_modules 目录下各种插件文件更新时间长时间不发生变化，就意外着安装已停止，Ctrl + c 即可。 Git 监测不到空文件夹Git 无法监测到空文件夹，也就意外着无法将空文件夹 git add、git commit -m &quot;&quot;、git push 推送到远程仓库，这会导致 Hexo 博客项目中丢失一些空的功能文件夹。这应该算是 Git 的设计失误。 解决方法： 需要在空文件夹中添加一个占位文件。主流做法是在空文件夹里放置一个 .gitkeep 文件。加个 .gitconfig 文件在里面比较实用，也不会觉得突兀，虽然绝大多数时候这个文件作用。","link":"/2017/09/22/Hexo-%E5%8D%9A%E5%AE%A2%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%8D%8F%E5%90%8C%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91/"},{"title":"稳定快速、高效免费的图床解决方案-Github-jsDelivr-PicGo","text":"一种稳定快速、高效免费的图床解决方案 —— Github + jsDelivr + PicGo。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Introduction先来对比一下之前博文我们给出的图床解决方案: 自建图床服务器：需要支出必要的服务器等费用，还需要去进行相对繁琐的安装过程才可以使用； 云存储对象：有免费额度，但使用量较大时，可能产生相关存储流量费用，并且需要进行实名认证，域名备案等； 第三方免费图床：流量、储存、图片上传受限，国内大平台图床服务商需要进行实名认证，域名备案等； 其它小众图床：不可靠，随时有挂掉的风险。 使用过 Github 的看官肯定知道，Github 的 Repo 也可以储存东西，最直接的就是程序的版本控制，当然也可以用来当作备份储存。关于存储，Github 官方回复是：该行为不构成 Abuse。 因此，GitHub 作为图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效。 并且 GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，速度和容量问题都得以解决，而且完全免费，可以说是目前免费图床的较佳的一种解决方案！ 下面我们来看解决方案的具体实施： New Github Repo登录/注册 GitHub，新建一个仓库。填写好仓库名（HexoImageBed0），仓库描述(Hexo Image Host Repo)，根据需求选择是否为仓库初始化一个 README.md 描述文件: 填好仓库信息后，点击【Create Repository】即可完成 Repo 的创建。 生成一个 Token在主页选择【Settings】： Next –&gt; 点击【Developer settings】: Next –&gt; 依此点击【Personal access tokens】–&gt;【Generate new token】: 进入如下界面： 填写好描述，勾选【repo】，然后点击【Generate token】生成一个如图所示的 Token： 注意：请勿关闭当前页面，这个 Token 只会显示一次，自己先保存下来。或者等后面配置好 PicGo 后再关闭此网页。 PicGoPicGo，一款比较优秀的图床工具。 所谓图床工具，就是自动把本地图片转换成链接，以精简用户繁杂的图床上传、下载过程的一款工具，网络上有很多免费图床工具可供使用。 PicGo 可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，Imgur 等八种常用图床，功能强大，简单易用。 PicGo Setup首先，你可以从这里提供的 PicGo 下载链接地址 下载 PicGo下载到最新的 PicGo。下载好后界面如下所示： PicGo 配置安装好后就可以开始配置 Github 图床了: 具体步骤为：【图床设置】–&gt; 【GitHub图床】，配置界面如下： ============================================== 配置内容详解： 设定仓库名：按照【用户名 / 图床仓库名】的格式填写； 设定分支名：【master】； 设定 Token：粘贴之前生成的【Token】； 指定存储路径：填写想要储存的路径，如【Img/】，这样就会在仓库下创建一个名为 Img 的文件夹，图片将会储存在此文件夹中； 设定自定义域名：在图片上传后，PicGo会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接。这里由于我们要使用 jsDelivr 加速访问，所以可以设置为【https://cdn.jsdelivr.net/gh/用户名/图床仓库名 】。使用时，我们就可以通过【https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径】加速访问我们的图片了。 About CDN百度百科：CDN 的全称是 Content Delivery Network，即内容分发网络。 CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。 我们知道，放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开以及资源访问速度，“jsDelivr + Github” 是免费，好用的 CDN 加速方案，非常适合博客网站使用。 jsDelivr 引用资源方法： https://cdn.jsdelivr.net/gh//@/ 例如： 12# https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0@1.0/images/test.png# https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0@2.0/css/style.css 注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下： 123456789101112131415161718# 加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file# 加载 jQuery v3.2.1https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js# 使用版本范围而不是特定版本https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.jshttps://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js# 完全省略该版本以获取最新版本https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js# 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js# 在末尾添加 / 以获取资源目录列表https://cdn.jsdelivr.net/gh/jquery/jquery/ Quick Start安装配置好 Github + jsDelivr+PicGo 之后，我们就可以进行高效创作了 点击 PicGo【上传区】，将图片拖拽到上传区域，即可自动上传到 Github 仓库（支持多图片上传），注意上传区域下方可设置图床链接格式，默认为 Markdown 格式（可以直接复制到 MD 文档中使用）。 PicGo 还有相册功能，可以快速查看以及复制上传的图片链接。并且可以对已上传的图片进行删除，修改链接等快捷操作。 例如，我们选择默认的链接格式（Markdown），上传完毕后，点击相册，然后复制相应图片链接，示例： 1![](https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0/Img/hexo-picgo-setting.png) 这样的 Markdown 链接格式，可以直接插入到 MD 中使用了。 ================================================ PicGo 用了一段时间，可能突然发现偶尔上传图片时报如下错误： 12# 上传失败：服务端出错，请重试# 上传失败：请检查配置和上传文件是否符合要求 解决方法（迷之方法~）： 更改文件名（任何形式的改动）即可成功上传。 You need to know more当然了，人无完人。Gihub+jsDelivr+PicGo 图床解决方案也是有缺陷的，你应该了解当前方案的局限： Github Page 容量受限正如 Github 官方给出的说明： Github 没有设置磁盘配额。我们试图为所有 Git 仓库提供充足的存储空间。保持存储库的大小可以确保我们的服务器快速且下载速度快。 如果您经常向 GitHub 推送大型文件，可以考虑将 Git 大型文件存储（Git LFS）作为你的工作流的一部分。Git LFS 可以很好地使用 GitHub 流，并且可以与任何大文件一起使用，不管它的类型是什么。 如果您的存储库超过 1 GB，则可能会收到来自 GitHub 支持的礼貌电子邮件，要求您减少存储库的大小以使其恢复。 也就是说，对于 Github Repo 是没有磁盘配额限制的，但单个仓库存储要低于 1G。 这也就意味着，一旦仓库满额，就得需要重新配置一个新的图床仓库了… Public RepoGithub 中创建的图床仓库必须是 Public，如果是 Pravite，那么图片地址会带有一个随时刷新 Token，这样虽然 Repo 他人不可见，但是也没法作为图床用。 Github Contribution Activity图床每添加一张，就会进行一次 commit，这样会导致你的 Github 动向表部分一片绿……虽然这样显得你很活跃，但是真正点进去会发现你的代码更新并没有你真正提交 commit 的频率高。 小结: Gihub 是一个稳定快速，高效免费的图床解决方案，但绝对不适用于大流量场景，只限于个人小流量博客站点适用。 并且，我们要注意：禁止滥用！！！把 Github 当图床算滥用，那么和把微博当图床使用最终导致被锁理所应当。","link":"/2017/09/21/%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Github-jsDelivr-PicGo/"},{"title":"一文学会 Hexo 轻量级框架的博客搭建【持续更新】","text":"HEXO 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 写在前面–&gt; 在开始 Hexo 轻量级博客框架搭建之前，首先说明本文所作目的： 其一：本文作为基于 Hexo Frame 搭建个人博客过程记录，方便日后回顾使用 其二：由于在搭建过程中受益于博客上分享过 Hexo 环境搭建的前辈们（致敬~），故作此以分享给更多的 Hexo 新手小白们。 如文中有表述不恰当的地方，欢迎各位在留言区进行指正，若有转载请注明出处！ 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Getting Started with IcarusHexo 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 注意，在正式开始 Hexo 博客安装以及搭建之前，我们需要预先准备 Hexo 安装环境依赖（预安装环境），这是必须的，否则会影响到后续的安装、搭建过程。所以下面我们需要先来 部署 Hexo 预安装环境： 安装 Node.js前面提过，Hexo 博客需要 Node.js 来进行渲染，才可以完成最终博客静态页面的显示。关于 Node.js 的详细下载以及安装过程说明请参见：Hexo 预安装环境搭建之 Node.js ，这里提供了不同平台下 Node.js 的安装过程。 –&gt; 到这里，相信你已经完成了 Node.js 的安装 安装 Git关于 Git，你可以理解为 Hexo + Git 的搭配方案才可以让互联网内的其他用户可以正常访问我们的博客站点，甚至博客的多平台（家&amp;公司&amp;学校…多环境博客创作）协同管理也要靠 Git 来支持。 Git 的详细下载以及安装过程说明请参见：Git 使用指南之初识 ，这里不仅提供了不同平台下 Git 的安装记录，还包含了 Git 快速入门指南 来帮助你快速了解 Git。 –&gt; 到这里，相信你已经完成了 Git 的安装 维护一个 Github 远程仓库首先通过 Github 官网 ，注册一个 Github 账号并完成登陆。 在 Github 上新建一个 Repository（远程仓库），显示如下： 注意：Repository 名称最好是 Github 账号名（保证唯一，这里我的 Github 账户名是：TheNightIsYoung），并且一定要加 .github.io，所以最终我所创建的 Github 仓库名称为：TheNightIsYoung.github.io。 接着，我们还需要为 Github 和 本地 Git 配置 SSH Key，具体配置过程可以参见 Git 使用指南之远程仓库 中 “4.1.1 GitHub 配置 SSH Key” 章节内容。 维护一个 Gitee 远程仓库首先通过 Gitee 官网 ，注册一个 Citee（码云）账号并完成登陆。 当然，你还可以选择其它 国内远程仓库，这里配置另外一个远程仓库的目的主要是为了解决 Github 的访问速度较慢的问题（不要深究，后续会进行说明）。 例如：如果你使用过 腾讯云开发者平台 或者 Coding（腾讯云开发者平台是由腾讯云与 CODING 共同开发的）的用户无须使用 Gitee 平台远程仓库，可以直接使用 Coding 平台。两者在使用上几乎没有差异（但这里博主推荐使用 Gitee，一些原因博主感觉 Coding 越来越不友好了….）。 以 Gitee 平台为例，新建一个项目（Repository），如下： 这里注意：和 Github 一样，Repository 名称也要和账户名称一致。同样，我们需要为 Gitee 配置 SSH Key，在账户 Settings 中点击 SSH keys，添加一个 SSH KEY，将之前公钥的内容添加进去。然后测试是否成功连接： 123456C:\\Users\\Jie Guo&gt;ssh -T git@gitee.comThe authenticity of host 'gitee.com (212.64.62.183)' can't be established.ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'gitee.com,212.64.62.183' (ECDSA) to the list of known hosts.Hi TheNightIsYoung! You've successfully authenticated, but GITEE.COM does not provide shell access. 预安装环境部署至此就完成了~ 下面我们正式开始 Hexo 博客的搭建： Hexo 安装以及初始化NPM 安装 Hexo使用 NPM 管理工具安装 Hexo 在预安装环境部署中我们已经成功安装 Node.js，这里无需单独安装 npm（Node.js 中已包含了 npm），打开 Git Bash（桌面点击鼠标右键）运行以下命令安装 Hexo： 1$ npm install -g hexo-cli 回车之后，日志信息输出中可能会出现 WARN 的警告语句，不要担心，等着即可…。过一段时间如果出现hexo 版本号信息输出的语句就代表安装成功了。如下： 123456npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+hexo-cli: 1.1.0audited 4700 packages in 5.05sfound 0 vulnerabilities –&gt; npm install 很慢很慢的问题，请参见博文 1.4 常见问题。 安装完后输入 hexo -v 验证是否安装成功： 123456789101112131415161718$ hexo -vhexo: 3.8.0hexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.0v8: 6.8.275.32-node.45uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 初始化 Hexo 博客目录首先在任意一个位置新建一个文件夹用于存放 Hexo 初始化博客文件，这里我选择 F:/HexoBlogProject ： 12$ cd F:$ mkdir HexoBlogProject 然后在 Git Bash 中依次运行以下命令来 初始化 Hexo 项目： 123$ hexo init &lt;floder&gt;$ cd &lt;floder&gt;$ npm install 实际环境测试如下： 123456789101112131415161718192021222324252627282930313233343536373839$ hexo init HexoBlogProject/INFO Cloning hexo-starter to F:\\HexoBlogProjectCloning into 'F:\\HexoBlogProject'...remote: Enumerating objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68Unpacking objects: 100% (68/68), done.Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'Cloning into 'F:/HexoBlogProject/themes/landscape'...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 867 (delta 0), reused 0 (delta 0), pack-reused 866Receiving objects: 100% (867/867), 2.55 MiB | 1.64 MiB/s, done.Resolving deltas: 100% (459/459), done.Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm WARN deprecated postinstall-build@5.0.3: postinstall-build's behavior is now built into npm! You should migrate off of postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.&gt; nunjucks@3.1.6 postinstall F:\\HexoBlogProject\\node_modules\\nunjucks&gt; node postinstall-build.js srcnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})added 422 packages from 501 contributors and audited 4700 packages in 23.449sfound 0 vulnerabilitiesINFO Start blogging with Hexo!$ cd HexoBlogProject/$ npm installnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})audited 4700 packages in 5.05sfound 0 vulnerabilities 看到 INFO Start blogging with Hexo！ 是不很激动！！！此时我们来看一下 Hexo 初始化目录 HexoBlogProject 结构，如下： 123456789HexoBlogProject.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes HexoBlogProject 站点目录说明这一小节我们简要介绍一下站点目录结构，这将有助于我们进一步了解 Hexo 博客框架的工作原理。 1）package.json：hexo 框架的参数和所依赖插件： 12345678910111213141516171819{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;3.8.0&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.1&quot; }} 2）scaffolds—脚手架、骨架 当我们想要新建一篇文章的时候，hexo 是根据这个目录下的文件进行构建的，基本不用关心。 3）source—博文目录 source 目录下包含一个 _posts 目录 ：需要新建的博文都放在 _posts 目录下。 _posts 目录下是一个个 MarkDown 文件。默认情况下有一个 hello-world.md 的文件，博文就在这个文件中编辑。 _posts 目录下的 MarkDown 文件，最终会被编译成 html 文件，放到 public`（此文件现在应该没有，因为 Blog 项目初始化之后还没有编译过）文件夹下。 4）themes—主题目录 themes 为博客网站主题目录，Hexo 有非常好的主题拓展，支持的主题也很丰富，通过更换主题会使得你的博客更加酷炫，后面的博文会教你如何更换 Hexo 主题。 \\themes 目录下每一个子目录就是一个主题，默认情况下子目录如下： 123themes.|-- landscape // 默认主题 当然我们可以下载自己满意的主题到该目录下，hexo主题传送门。 5）_config.yml—站点配置文件： 博客站点的很多信息都在这里配置：诸如网站名称、副标题、描述、作者、语言、主题等等参数。这里我们给出_config.yml 文件中的内容，以及主要参数说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Hexo # 网站标题subtitle: # 网站副标题description: # 网站描述keywords:author: John Doe # 作者language: # 语言timezone: # 网站时区：Hexo 默认使用当前电脑的时区。时区列表，比如说：America/New_York, Japan, 和 UTC 。# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com # 站点的 Urlroot: / # 站点的根目录permalink: :year/:month/:day/:title/ # 文章的“永久链接”格式 permalink_defaults: # 永久链接中各部分的默认值# Directorysource_dir: source # 资源文件夹：用来存放 hexo 内容public_dir: public # 公共文件夹：这个文件夹用于存放生成的站点文件。tag_dir: tags # 标签文件夹archive_dir: archives # 归档文件夹category_dir: categories # 分类文件夹code_dir: downloads/code # Include code 文件夹i18n_dir: :lang # 国际化（i18n）文件夹skip_render: # 跳过指定文件的渲染：可使用 glob 表达式来匹配路径# Writingnew_post_name: :title.md # File name of new posts # 新文章的文件名称default_layout: post # 预设布局titlecase: false # Transform title into titlecase # 把标题转换为 title caseexternal_link: true # Open external links in new tab # 在新标签中打开链接filename_case: 0 # 把文件名称转换为 ‘1’ 小写或 ‘2’ 大写render_drafts: false # 是否显示草稿post_asset_folder: false # 是否启动 Asset 文件夹relative_link: false # 把链接改为与根目录的相对位址 future: true # 显示未来的文章highlight: # 内容中代码块的设置 enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map: # 分类别名tag_map: # 标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD # 日期格式time_format: HH:mm:ss # 时间格式# Pagination## Set per_page to 0 to disable paginationper_page: 10 # 分页数量pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # 主题名称# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 部署部分的设置 type: # 类型：常用的是 Git 关于 HexoBlogProject 站点目录配置以及使用，后续我们进行博客配置时会具体说明，这里不再赘述。 Hexo 本地博客上面我们已经完成了 Hexo 本地博客的安装以及搭建，注意只是 本地博客（只可以在你本地运行，其他人在互联网上是看不到的）。现在我们来启动 Hexo 本地服务，进行本地博客预览测试。Git Bash 中运行以下命令： 123$ hexo server （或 hexo s）INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 此时，通过浏览器访问 http://localhost:4000/ ，就可以看到 Hexo 的原始博客内容，页面如下所示： 至此，我们已经可以在本地使用 Hexo 博客了。 但其实我们更加关注的是如何将 Hexo 博客发布到 Internet 上供其他人分享交流，下面我将会给出一个解决方案——将我们搭建好的本地 Hexo 博客项目推送到公共代码仓库以提供公共访问。 Hexo 个人博客实施方案实施方案一：Github·PageGithub·Page 方法是将本地 Hexo 博客推送至 GithubPages 以实现公共访问： 1）首先，安装 hexo-deployer-git 插件，Git bash 下运行下面命令： 12345678910$ npm install hexo-deployer-git --savenpm WARN deprecated swig@1.4.2: This package is no longer maintainednpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ hexo-deployer-git@0.3.1added 31 packages from 36 contributors and audited 5870 packages in 11.225sfound 1 low severity vulnerability run `npm audit fix` to fix them, or `npm audit` for details 2）然后，修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master 实际环境测试： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master 这里，我的 Github account name（Github 账户名称）为：TheNightIsYoung。 注意：仓库地址最好使用 SSH 访问，不要填写 Http 地址。 3）将本地 Hexo 博客推送至 GithubPages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 生成静态页面：$ hexo generate （或：hexo g）INFO Start processingINFO Files loaded in 272 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: fancybox/fancybox_loading.gifINFO Generated: archives/2019/index.htmlINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: archives/2019/01/index.htmlINFO Generated: js/script.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: css/fonts/FontAwesome.otfINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/style.cssINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2019/01/07/hello-world/index.htmlINFO Generated: fancybox/jquery.fancybox.jsINFO Generated: css/images/banner.jpgINFO 28 files generated in 650 ms# 部署至 GithubPages：$ hexo deploy （或：hexo d）INFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) 6d469d7] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master c71b7a5] Site updated: 2019-01-08 12:03:08 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.To github.com:TheNightIsYoung/TheNightIsYoung.github.io.git * [new branch] HEAD -&gt; masterINFO Deploy done: git 4）通过浏览器访问网址： https://&lt;Your github account name&gt;.github.io 就可以看到和本地 hexo 博客相同页面。 ================================================= 对比 Hexo 站点目录，观察一下被推送到远程仓库的文件，你是否发现： 远程仓库中的资源文件，其实就是我们的 .../&lt;Hexo 站点目录&gt;/public 目录下的内容。简单来说，执行 hexo d 命令会将站点目录下 ：public 目录下的内容推送到远程仓库，而 Hexo 博客项目的配置文件、主题、scaffolds 等等，仍在我们本地储存维护…. 实施方案二：Github·Page + Gitee·Page使用过 Github 都知道，Github 有时候在国内访问较慢，而 Gitee 国外访问较快。故除了添加 Github 仓库外，我们可以在第一种实施方案的基础上配置 Citee·Page。 1）hexo-deployer-git 插件已经安装过，这里可以直接跳过； 2）修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master- type: git repo: git@gitee.com:&lt;Your coding account name&gt;/&lt;Your coding account name&gt;.git branch: master 实际环境测试： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master- type: git repo: git@gitee.com:thenightisyoung/thenightisyoung.git branch: master 这里，我的 gitee account name（Gitee 账户名称）为：thenightisyoung。 3）将本地 Hexo 博客推送至 GiteePages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ hexo g$ hexo dINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) c9fcced] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master 498e47c] Site updated: 2019-01-08 13:55:57 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git + c425509...498e47c HEAD -&gt; master (forced update)INFO Deploy done: gitINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheMusicIsLoud/TheMusicIsLoud.git'.To git.dev.tencent.com:TheMusicIsLoud/TheMusicIsLoud.git * [new branch] HEAD -&gt; masterINFO Deploy done: git ４）Gitee 还需要通过 Gitee Pages 服务 ，才能开启静态 Pages 应用（Service –&gt; Gitee Pages）。如下页面显示： 开启成功后界面如下： 5）通过浏览器访问网址： https://&lt;Your coding account name&gt;.gitee.io/ 同样也可以访问到 hexo 博客页面 12# 我的访问链接如下：https://thenightisyoung.gitee.io 实施方案三：Github·Page + Gitee·Page + domain name上面我们已经将 Hexo 个人博客远程托管到 Gihub &amp; Gitee上了。 还能不能再继续优化一下方案？？？ 一方面每一次进行访问时，我们都需要通过 https://&lt;Your coding account name&gt;.coding.me 或者 https://&lt;Your github account name&gt;.gitee.io 一长串的域名来进行访问，显得非常繁琐；另一方面我们有一个闲置的域名，单纯想做域名映射，以达到通过域名即可访问我们的个人博客。 前提：你有一个闲置的自定义域名。这里你可以为 Github·Page 或者 Gitee·Page 配置域名映射，二选其一，Gitee 域名绑定是面向企业用户（难受）。 1）配置 Github·Page 的域名映射 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your github account name&gt;.github.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.github.io# TTL：默认选项即可 注意：要确认你的域名的解析状态为正常状态！ 2 –&gt; 博客 Github 仓库设置： 首先打开博客仓库设置：https://github.com/&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io/settings 找到 Custom domain，填写好自定义域名（例如：www.xxxxxx.com），点击 save。 –&gt; 启用 Github Page HTTPS ： 自 2018 年 5 月 1 日，Github 支持自定义域名的 HTTPS 请求了，直接在 Custom domain 下勾选 Enforce HTTPS 即可开启。 配置也相当简单，只需要更新 DNS 配置里的 A 记录，将其指向以下4个 IP 地址中的至少一个。 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 HTTPS 让你的网站和网站访客更安全，并且 Github 提供的这些 IP 地址自动将你的站点加入了 CDN，提高了访问速度（真香~）。 3 –&gt; 在 Hexo 站点目录中的 public 目录下创建 CNAME 文件，内容如下： www.xxxxxx.com 部署： 1$ hexo d 4 –&gt; 等待一段时间（域名生效时间，10分钟左右）后，我们发现已经可以通过我们的域名访问到个人博客了。 2）配置 Gitee·Page 的域名映射 在上述 配置 Github·Page 的域名映射 基础上进行如下设置即可将域名指向 &lt;Your coding account name&gt;.coding.me： 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your coding account name&gt;.gitee.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.gitee.io# TTL：默认选项即可 注意：要确认域名解析状态为正常状态！ 2 –&gt; 打开 Pages 服务 设置页:https://dev.tencent.com/u/&lt;Your coding account name&gt;/p/&lt;Your coding account name&gt;/git/pages/settings, 进行域名绑定即可。 留一个小期待吧，希望码农后续可以支持普通用户的 Gitee·Pages 绑定自定义域名，持续关注 。 至此，你就可以通过你的自定义域名进行 Hexo 博客的访问了。 Problem &amp;&amp; Solution1）Github·Page 配置域名绑定问题 问题描述：Github·Page 项目成功绑定了自定义域名之后，可以正常通过域名进行站点访问了。但发现一个现象，在部署上传新的文章后，访问又双叒变成了 404 ？？？ WTF！？在我打算再次重新配置 Github·Page 的时候，我突然发现仓库 Settings 页面绑定域名的那一栏变成空了，是谁动了我的奶酪？？？ 度娘上查到，在为 Github·Page 配置域名绑定之后，会在当前仓库中自动生成一个 CNAME 文件（你可以重新 Save 域名试一下），查看 CNAME 文件内容： 12# 只有一行语句，就是你的域名your domain name 而我们在 hexo d 重新部署之后，发现 CNAME 文件不见了。 你很容易可以想到，hexo d 时，Hexo 会将 public 目录中的文件和目录推送至远端仓库指定分支中，并且完全覆盖该分支下的已有内容。 也即是说，前面我们在 “实施方案一：Github·Page” 配置过程中，由于 public 文件下没有 CNAME 文件，导致远程仓库中的域名绑定相关的 CNAME 文件 被覆盖掉了，≧ ﹏ ≦ 知道了原因，下面我们给出解决方法： 我们知道，站点目录下 public 中的文件是由 source 文件夹的内容生成的。我们尝试一下在 source 目录下添加一个 Github·Page 需要的 CNAME 文件 ，内容如下； 12# 我的域名www.orangeshare.cn 然后执行如下命令，清除以及重新生成静态页面内容： 12$ hexo clean$ hexo g 可以观察到，重新生成的 public 目录下，已经包含 CNAME 文件 了，有点小激动啊~ 再次 hexo d 推送试一下。成功了 O(∩_∩)O","link":"/2017/09/20/%E4%B8%80%E6%96%87%E5%AD%A6%E4%BC%9A-Hexo-%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91/"}],"tags":[{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Picture bed","slug":"Picture-bed","link":"/tags/Picture-bed/"}],"categories":[{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"}]}