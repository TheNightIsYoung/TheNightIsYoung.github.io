{"pages":[],"posts":[{"title":"Hexo 预安装环境部署之 Node.js","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。因此安装 Hexo 前，我们必须完成 Node.js 应用程序的下载和安装。 系列博文快捷链接： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Node.js了解一定网页基础的同学肯定听说过 JavaScript。Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。简单的说， Node.js 就是运行在服务端的 JavaScript。 当然不了解 JavaScript 的同学也不要慌张，我们只需要将 Node.js 理解为：是 Hexo 用来渲染我们博客页面的插件即可。毕竟这里我们更关注的 Node.js 下载和安装，并不关心其原理以及使用。 开始安装之前，这里先给出 Node.js 安装包及源码下载地址。截至目前， Node.js 最新可供下载安装版本为：v10.15.0 (includes npm 6.4.1)。官网下载界面如下，我们可以根据不同平台的下载要求获取相应的安装包： 当然，你也可以从 Node.js 历史版本 获取到较老的历史版本。 下面我们来看不同平台（Windows、Linux 以及 Mac）下 Node.js：v10.15.0 (includes npm 6.4.1) LST（长期支持版本） 的下载以及安装方法： Windows 平台下安装 Node.js这里我们提供了两种 Windows 平台下来安装 Node.js 的方式： 使用 MSI Windows 安装包方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js MSI 安装包：node-v10.15.0-x64.msi 注意：要使用 MSI 安装应用程序 （例如：node-XYZ.msi）, Windows 系统必须支持 Microsoft Installer 2.0。需要看看你的机器是否支持 MSI，Windows XP 和更高版本已经有 MSI，很多老机器也可以安装 MSI。安装时，只要保存安装文件（**.msi**）到本地计算机，然后运行它即可完成安装（安装时，根据提示 Next 即可）。 下面我们正式开始 node-v10.15.0-x64.msi 的安装过程： 步骤 1 : 双击下载后的安装包 node-v10.15.0-x64.msi 开启安装界面，然后点击 Next 。如下所示： 步骤 2 : 勾选接受协议许可选项，然后点击 Next: 步骤 3 : Node.js 默认安装目录为 C:\\Program Files\\nodejs 。 你可以自定义修改存储目录（这里我存储于：E:\\nodejs），然后点击 Next： 步骤 4 : 点击树形图标来选择你需要的安装模式（默认为：Node.js runtime，这里我们选择：online documentation shortcuts）, 然后点击 Next 进入 Setup 界面。 步骤 5 : 点击 Install（安装） 开始安装 Node.js。 然后点击 Next，等待安装完成点击 Finish 即可： 步骤 6：DOS 安装检测 首先检测系统 PATH 环境变量中是否配置了 Node.js，日志信息输出如下： 12345PATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;E:\\TortoiseSVN\\bin;E:\\Git\\cmd;E:\\nodejs\\;C:\\Users\\xxxxxx\\AppData\\Local\\Microsoft\\WindowsApps;E:\\Anaconda3\\Scripts;E:\\Anaconda3;C:\\Users\\xxxxxx\\AppData\\Roaming\\npm 可以看到 E:\\nodejs\\ 路径已经被成功添加到系统环境变量 Path 中。 此时我们来查看安装好的 Node.js 版本号： 12C:\\Users&gt;node -vv10.15.0 至此，使用 “MSI Windows 安装包” 的方式安装 Node.js 的过程已经全部完成。 使用 EXE Windows 二进制文件方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js Binary 安装包：node-v10.15.0-win-x64.zip。 使用 Windows 二进制文件安装 Node.js 比较简单。直接解压安装包，然后双击安装目录下的：node.exe 等待即可 注意，node.exe 安装过程中会出现如下安装窗口： 安装版本测试： 查看已安装 Node.js 版本号，信息如下表示安装成功： 12C:\\Users&gt;node -vv10.15.0 如果没显示正确版本号，请添加系统环境变量。 Linux 平台下安装 Node.js 注意：Linux 上安装 Node.js 需要安装 Python 2.6 / 2.7 ，不建议安装 Python 3.0 以上版本。 使用已编译好的包Node.js 官网提供了已经编译好的 linux Node.js 安装包，解压即用： 123456789# 下载相应版本安装包（下载目录为：/usr/software）：$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz＃ 解压：$ tar -zxvf node-v10.15.0-linux-x64.tar.xz# Node.js 安装版本测试：＄ cd node-v10.15.0-linux-x64$ ./bin/node -vv10.15.0 注意，解压文件的 bin 目录底下包含了 node、npm 等命令，为了方便系统调用，我们可以使用 ln 设置命令软链接： 12ln -s /usr/software/node-v10.15.0-linux-x64/bin/npm /usr/local/bin/ ln -s /usr/software/node-v10.15.0-linux-x64/bin/node /usr/local/bin/ 使用源码安装1）Ubuntu 这一小节我们来看如何在 Ubuntu OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：开放目录权限： 1$ sudo chmod -R 755 node 步骤三：依次执行如下命令编译源码： 1234$ cd node-v10.15.0$ sudo ./configure$ sudo make$ sudo make install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile |——————————————————— 补充：Ubuntu 还可以通过 apt-get 命令 直接安装： 12sudo apt-get install nodejssudo apt-get install npm ———————————————————| 步骤五：检测是否安装成功： 12$ node --versionv10.15.0 2）Centos 这一小节我们来看如何在 Centos OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：解压源码文件： 1$ tar -zxvf node-v10.15.0.tar.gz 步骤三：依次执行如下命令编译安装源码： 1234cd node-v10.15.0./configure --prefix=/usr/local/node/10.15.0makemake install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile 步骤五：验证是否安装配置成功： 1$ node -v Mac 平台下安装 Node.js这里我们提供两种方式来在 Mac OS 上安装 Node.js： 1）使用 pkg 安装包 前往 Node.js 官网下载地址 下载最新 Node 版本 .pkg 安装包，进行安装即可。 2）使用包管理器 1$ brew install node","link":"/2017/09/20/Hexo-%E9%A2%84%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8B-Node-js/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/01/14/hello-world/"},{"title":"一文学会 Hexo 轻量级框架的博客搭建【持续更新】","text":"HEXO 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 写在前面–&gt; 在开始 Hexo 轻量级博客框架搭建之前，首先说明本文所作目的： 其一：本文作为基于 Hexo Frame 搭建个人博客过程记录，方便日后回顾使用 其二：由于在搭建过程中受益于博客上分享过 Hexo 环境搭建的前辈们（致敬~），故作此以分享给更多的 Hexo 新手小白们。 如文中有表述不恰当的地方，欢迎各位在留言区进行指正，若有转载请注明出处！ 系列博文快捷链接： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Getting Started with IcarusHexo 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 注意，在正式开始 Hexo 博客安装以及搭建之前，我们需要预先准备 Hexo 安装环境依赖（预安装环境），这是必须的，否则会影响到后续的安装、搭建过程。所以下面我们需要先来 部署 Hexo 预安装环境： 安装 Node.js前面提过，Hexo 博客需要 Node.js 来进行渲染，才可以完成最终博客静态页面的显示。关于 Node.js 的详细下载以及安装过程说明请参见：Hexo 预安装环境搭建之 Node.js ，这里提供了不同平台下 Node.js 的安装过程。 –&gt; 到这里，相信你已经完成了 Node.js 的安装 安装 Git关于 Git，你可以理解为 Hexo + Git 的搭配方案才可以让互联网内的其他用户可以正常访问我们的博客站点，甚至博客的多平台（家&amp;公司&amp;学校…多环境博客创作）协同管理也要靠 Git 来支持。 Git 的详细下载以及安装过程说明请参见：Git 使用指南之初识 ，这里不仅提供了不同平台下 Git 的安装记录，还包含了 Git 快速入门指南 来帮助你快速了解 Git。 –&gt; 到这里，相信你已经完成了 Git 的安装 维护一个 Github 远程仓库首先通过 Github 官网 ，注册一个 Github 账号并完成登陆。 在 Github 上新建一个 Repository（远程仓库），显示如下： 注意：Repository 名称最好是 Github 账号名（保证唯一，这里我的 Github 账户名是：TheNightIsYoung），并且一定要加 .github.io，所以最终我所创建的 Github 仓库名称为：TheNightIsYoung.github.io。 接着，我们还需要为 Github 和 本地 Git 配置 SSH Key，具体配置过程可以参见 Git 使用指南之远程仓库 中 “4.1.1 GitHub 配置 SSH Key” 章节内容。 维护一个 Gitee 远程仓库首先通过 Gitee 官网 ，注册一个 Citee（码云）账号并完成登陆。 当然，你还可以选择其它 国内远程仓库，这里配置另外一个远程仓库的目的主要是为了解决 Github 的访问速度较慢的问题（不要深究，后续会进行说明）。 例如：如果你使用过 腾讯云开发者平台 或者 Coding（腾讯云开发者平台是由腾讯云与 CODING 共同开发的）的用户无须使用 Gitee 平台远程仓库，可以直接使用 Coding 平台。两者在使用上几乎没有差异（但这里博主推荐使用 Gitee，一些原因博主感觉 Coding 越来越不友好了….）。 以 Gitee 平台为例，新建一个项目（Repository），如下： 这里注意：和 Github 一样，Repository 名称也要和账户名称一致。同样，我们需要为 Gitee 配置 SSH Key，在账户 Settings 中点击 SSH keys，添加一个 SSH KEY，将之前公钥的内容添加进去。然后测试是否成功连接： 123456C:\\Users\\Jie Guo&gt;ssh -T git@gitee.comThe authenticity of host 'gitee.com (212.64.62.183)' can't be established.ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'gitee.com,212.64.62.183' (ECDSA) to the list of known hosts.Hi TheNightIsYoung! You've successfully authenticated, but GITEE.COM does not provide shell access. 预安装环境部署至此就完成了~ 下面我们正式开始 Hexo 博客的搭建： Hexo 安装以及初始化NPM 安装 Hexo使用 NPM 管理工具安装 Hexo 在预安装环境部署中我们已经成功安装 Node.js，这里无需单独安装 npm（Node.js 中已包含了 npm），打开 Git Bash（桌面点击鼠标右键）运行以下命令安装 Hexo： 1$ npm install -g hexo-cli 回车之后，日志信息输出中可能会出现 WARN 的警告语句，不要担心，等着即可…。过一段时间如果出现hexo 版本号信息输出的语句就代表安装成功了。如下： 123456npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+hexo-cli: 1.1.0audited 4700 packages in 5.05sfound 0 vulnerabilities –&gt; npm install 很慢很慢的问题，请参见博文 1.4 常见问题。 安装完后输入 hexo -v 验证是否安装成功： 123456789101112131415161718$ hexo -vhexo: 3.8.0hexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.0v8: 6.8.275.32-node.45uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 初始化 Hexo 博客目录首先在任意一个位置新建一个文件夹用于存放 Hexo 初始化博客文件，这里我选择 F:/HexoBlogProject ： 12$ cd F:$ mkdir HexoBlogProject 然后在 Git Bash 中依次运行以下命令来 初始化 Hexo 项目： 123$ hexo init &lt;floder&gt;$ cd &lt;floder&gt;$ npm install 实际环境测试如下： 123456789101112131415161718192021222324252627282930313233343536373839$ hexo init HexoBlogProject/INFO Cloning hexo-starter to F:\\HexoBlogProjectCloning into 'F:\\HexoBlogProject'...remote: Enumerating objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68Unpacking objects: 100% (68/68), done.Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'Cloning into 'F:/HexoBlogProject/themes/landscape'...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 867 (delta 0), reused 0 (delta 0), pack-reused 866Receiving objects: 100% (867/867), 2.55 MiB | 1.64 MiB/s, done.Resolving deltas: 100% (459/459), done.Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm WARN deprecated postinstall-build@5.0.3: postinstall-build's behavior is now built into npm! You should migrate off of postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.&gt; nunjucks@3.1.6 postinstall F:\\HexoBlogProject\\node_modules\\nunjucks&gt; node postinstall-build.js srcnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})added 422 packages from 501 contributors and audited 4700 packages in 23.449sfound 0 vulnerabilitiesINFO Start blogging with Hexo!$ cd HexoBlogProject/$ npm installnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})audited 4700 packages in 5.05sfound 0 vulnerabilities 看到 INFO Start blogging with Hexo！ 是不很激动！！！此时我们来看一下 Hexo 初始化目录 HexoBlogProject 结构，如下： 123456789HexoBlogProject.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes HexoBlogProject 站点目录说明这一小节我们简要介绍一下站点目录结构，这将有助于我们进一步了解 Hexo 博客框架的工作原理。 1）package.json：hexo 框架的参数和所依赖插件： 12345678910111213141516171819{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;3.8.0&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.1&quot; }} 2）scaffolds—脚手架、骨架 当我们想要新建一篇文章的时候，hexo 是根据这个目录下的文件进行构建的，基本不用关心。 3）source—博文目录 source 目录下包含一个 _posts 目录 ：需要新建的博文都放在 _posts 目录下。 _posts 目录下是一个个 MarkDown 文件。默认情况下有一个 hello-world.md 的文件，博文就在这个文件中编辑。 _posts 目录下的 MarkDown 文件，最终会被编译成 html 文件，放到 public`（此文件现在应该没有，因为 Blog 项目初始化之后还没有编译过）文件夹下。 4）themes—主题目录 themes 为博客网站主题目录，Hexo 有非常好的主题拓展，支持的主题也很丰富，通过更换主题会使得你的博客更加酷炫，后面的博文会教你如何更换 Hexo 主题。 \\themes 目录下每一个子目录就是一个主题，默认情况下子目录如下： 123themes.|-- landscape // 默认主题 当然我们可以下载自己满意的主题到该目录下，hexo主题传送门。 5）_config.yml—站点配置文件： 博客站点的很多信息都在这里配置：诸如网站名称、副标题、描述、作者、语言、主题等等参数。这里我们给出_config.yml 文件中的内容，以及主要参数说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Hexo # 网站标题subtitle: # 网站副标题description: # 网站描述keywords:author: John Doe # 作者language: # 语言timezone: # 网站时区：Hexo 默认使用当前电脑的时区。时区列表，比如说：America/New_York, Japan, 和 UTC 。# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com # 站点的 Urlroot: / # 站点的根目录permalink: :year/:month/:day/:title/ # 文章的“永久链接”格式 permalink_defaults: # 永久链接中各部分的默认值# Directorysource_dir: source # 资源文件夹：用来存放 hexo 内容public_dir: public # 公共文件夹：这个文件夹用于存放生成的站点文件。tag_dir: tags # 标签文件夹archive_dir: archives # 归档文件夹category_dir: categories # 分类文件夹code_dir: downloads/code # Include code 文件夹i18n_dir: :lang # 国际化（i18n）文件夹skip_render: # 跳过指定文件的渲染：可使用 glob 表达式来匹配路径# Writingnew_post_name: :title.md # File name of new posts # 新文章的文件名称default_layout: post # 预设布局titlecase: false # Transform title into titlecase # 把标题转换为 title caseexternal_link: true # Open external links in new tab # 在新标签中打开链接filename_case: 0 # 把文件名称转换为 ‘1’ 小写或 ‘2’ 大写render_drafts: false # 是否显示草稿post_asset_folder: false # 是否启动 Asset 文件夹relative_link: false # 把链接改为与根目录的相对位址 future: true # 显示未来的文章highlight: # 内容中代码块的设置 enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map: # 分类别名tag_map: # 标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD # 日期格式time_format: HH:mm:ss # 时间格式# Pagination## Set per_page to 0 to disable paginationper_page: 10 # 分页数量pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # 主题名称# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 部署部分的设置 type: # 类型：常用的是 Git 关于 HexoBlogProject 站点目录配置以及使用，后续我们进行博客配置时会具体说明，这里不再赘述。 Hexo 本地博客上面我们已经完成了 Hexo 本地博客的安装以及搭建，注意只是 本地博客（只可以在你本地运行，其他人在互联网上是看不到的）。现在我们来启动 Hexo 本地服务，进行本地博客预览测试。Git Bash 中运行以下命令： 123$ hexo server （或 hexo s）INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 此时，通过浏览器访问 http://localhost:4000/ ，就可以看到 Hexo 的原始博客内容，页面如下所示： 至此，我们已经可以在本地使用 Hexo 博客了。 但其实我们更加关注的是如何将 Hexo 博客发布到 Internet 上供其他人分享交流，下面我将会给出一个解决方案——将我们搭建好的本地 Hexo 博客项目推送到公共代码仓库以提供公共访问。 Hexo 个人博客实施方案实施方案一：Github·Page Github·Page 方法是将本地 Hexo 博客推送至 GithubPages 以实现公共访问： 1）首先，安装 hexo-deployer-git 插件，Git bash 下运行下面命令： 12345678910$ npm install hexo-deployer-git --savenpm WARN deprecated swig@1.4.2: This package is no longer maintainednpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ hexo-deployer-git@0.3.1added 31 packages from 36 contributors and audited 5870 packages in 11.225sfound 1 low severity vulnerability run `npm audit fix` to fix them, or `npm audit` for details 2）然后，修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master 实际环境测试： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master 这里，我的 Github account name（Github 账户名称）为：TheNightIsYoung。 注意：仓库地址最好使用 SSH 访问，不要填写 Http 地址。 3）将本地 Hexo 博客推送至 GithubPages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 生成静态页面：$ hexo generate （或：hexo g）INFO Start processingINFO Files loaded in 272 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: fancybox/fancybox_loading.gifINFO Generated: archives/2019/index.htmlINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: archives/2019/01/index.htmlINFO Generated: js/script.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: css/fonts/FontAwesome.otfINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/style.cssINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2019/01/07/hello-world/index.htmlINFO Generated: fancybox/jquery.fancybox.jsINFO Generated: css/images/banner.jpgINFO 28 files generated in 650 ms# 部署至 GithubPages：$ hexo deploy （或：hexo d）INFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) 6d469d7] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master c71b7a5] Site updated: 2019-01-08 12:03:08 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.To github.com:TheNightIsYoung/TheNightIsYoung.github.io.git * [new branch] HEAD -&gt; masterINFO Deploy done: git 4）通过浏览器访问网址： https://&lt;Your github account name&gt;.github.io 就可以看到和本地 hexo 博客相同页面。 实施方案二：Github·Page + Gitee·Page 使用过 Github 都知道，Github 有时候在国内访问较慢，而 Gitee 国外访问较快。故除了添加 Github 仓库外，我们可以在第一种实施方案的基础上配置 Citee·Page。 1）hexo-deployer-git 插件已经安装过，这里可以直接跳过； 2）修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master- type: git repo: git@gitee.com:&lt;Your coding account name&gt;/&lt;Your coding account name&gt;.git branch: master 实际环境测试： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master- type: git repo: git@gitee.com:thenightisyoung/thenightisyoung.git branch: master 这里，我的 gitee account name（Gitee 账户名称）为：thenightisyoung。 3）将本地 Hexo 博客推送至 GiteePages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ hexo g$ hexo dINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) c9fcced] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master 498e47c] Site updated: 2019-01-08 13:55:57 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git + c425509...498e47c HEAD -&gt; master (forced update)INFO Deploy done: gitINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheMusicIsLoud/TheMusicIsLoud.git'.To git.dev.tencent.com:TheMusicIsLoud/TheMusicIsLoud.git * [new branch] HEAD -&gt; masterINFO Deploy done: git ４）Gitee 还需要通过 Gitee Pages 服务 ，才能开启静态 Pages 应用（Service –&gt; Gitee Pages）。如下页面显示： 开启成功后界面如下： 5）通过浏览器访问网址： https://&lt;Your coding account name&gt;.gitee.io/ 同样也可以访问到 hexo 博客页面 12# 我的访问链接如下：https://thenightisyoung.gitee.io 实施方案三：Github·Page + Gitee·Page + domain name 上面我们已经将 Hexo 个人博客远程托管到 Gihub &amp; Gitee上了。 还能不能再继续优化一下方案？？？ 一方面每一次进行访问时，我们都需要通过 https://&lt;Your coding account name&gt;.coding.me 或者 https://&lt;Your github account name&gt;.gitee.io 一长串的域名来进行访问，显得非常繁琐；另一方面我们有一个闲置的域名，单纯想做域名映射，以达到通过域名即可访问我们的个人博客。 前提：你有一个闲置的自定义域名。这里你可以为 Github·Page 或者 Gitee·Page 配置域名映射，二选其一，Gitee 域名绑定是面向企业用户（难受）。 1）配置 Github·Page 的域名映射 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your github account name&gt;.github.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.github.io# TTL：默认选项即可 注意：要确认你的域名的解析状态为正常状态！ 2 –&gt; 博客 Github 仓库设置： 首先打开博客仓库设置：https://github.com/&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io/settings 找到 Custom domain，填写好自定义域名（例如：www.xxxxxx.com），点击 save。 –&gt; 启用 Github Page HTTPS ： 自 2018 年 5 月 1 日，Github 支持自定义域名的 HTTPS 请求了，直接在 Custom domain 下勾选 Enforce HTTPS 即可开启。 配置也相当简单，只需要更新 DNS 配置里的 A 记录，将其指向以下4个 IP 地址中的至少一个。 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 HTTPS 让你的网站和网站访客更安全，并且 Github 提供的这些 IP 地址自动将你的站点加入了 CDN，提高了访问速度（真香~）。 3 –&gt; 等待一段时间（默认 10 分钟）后，我们发现已经可以通过我们的域名访问到个人博客了。 2）配置 Gitee·Page 的域名映射 在上述 配置 Github·Page 的域名映射 基础上进行如下设置即可将域名指向 &lt;Your coding account name&gt;.coding.me： 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your coding account name&gt;.gitee.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.gitee.io# TTL：默认选项即可 注意：要确认域名解析状态为正常状态！ 2 –&gt; 打开 Pages 服务 设置页:https://dev.tencent.com/u/&lt;Your coding account name&gt;/p/&lt;Your coding account name&gt;/git/pages/settings, 进行域名绑定即可。 留一个小期待吧，希望码农后续可以支持普通用户的 Gitee·Pages 绑定自定义域名，持续关注 。 至此，你就可以通过你的自定义域名进行 Hexo 博客的访问了。","link":"/2017/09/20/%E4%B8%80%E6%96%87%E5%AD%A6%E4%BC%9A-Hexo-%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91/"}],"tags":[{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"}]}