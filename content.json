{"pages":[],"posts":[{"title":"Eclipse 2020 Shortcut Key","text":"Eclipse 2020 版本常用快捷键。 注释快捷键1 –&gt; ctrl+shift+/ 使用 /* */（块注释）自动注释掉选择的代码块。 问题：注释后多行语句乱码（合并为一行），取消注释无法恢复。 Solution：Window –&gt; Perference –&gt; Java –&gt; Code Style –&gt; Formatter –&gt; 取名（my_add_annotation）–&gt; Edit –&gt; Comments（左侧）–&gt; 勾掉：Enable block comment formatting –&gt; Apply –&gt; OK –&gt; Apply and Close; 2 –&gt; ctrl+shift+\\ 取消 /* */（块注释）注释。 3 –&gt; ctrl+/ 使用 //（行注释）自动 注释或取消注释 选择的多行代码。 4 –&gt; ctrl+shift+j 快速为文档，类，方法等添加模板注释。 注释模板修改： Window –&gt; Preferences –&gt; Java –&gt; Code Style –&gt; Code Templates –&gt; Comments –&gt; Types –&gt; Edit； ============================================= 文档注释模板格式： 12345678910/** * Project Name: ${project_name} * Class Name: ${type_name} * Created By: ${user} * Created At: ${date} ${time} * E-Mail: ${name:git_config(user.name)} * @Version * * ${tags} */ ============================================= 编辑快捷键1 –&gt; ctrl+d 删除当前光标所在行。 2 –&gt; ctrl+shift+enter 在当前行上插入一行。 3 –&gt; shift+enter 在当前行下插入一行。 4 –&gt; alt+/ 自动补全代码或者提示代码。 问题：Eclipse 编写代码不能自动补全，而需要不停的按 ALT+/ 或者检测到 . 才会进行补全。 Solution：Window –&gt; Perference –&gt; Java –&gt; Editor –&gt; Content Assist –&gt; Auto activation triggers for Java（右侧，只有一个 . 存在） –&gt; 改为：**.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ** –&gt; Apply –&gt; OK; 这样，就可以通过代码补全，自动生成 main，getter，setter，toString 等方法了。 5 –&gt; ctrl+shift+o 自动引入包和删除无用包。 6 –&gt; ctrl+shift+f 格式化代码。 问题：使用搜狗输入法/微软输入法，会和 “繁/简体切换” 快捷键冲突。 Solution：关闭输入法 “繁/简体切换 ” 快捷键“ 。 7 –&gt; alt+↑/↓ 移动一行或多行。 8 –&gt; ctrl+alt+↑/↓ 复制选择的一行或多行代码块。 9 –&gt; F3 快速查看源码。 窗口快捷键1 –&gt; alt+← 全局 后退历史记录。 2 –&gt; alt+→ 全局 前进历史记录。 3 –&gt; ctrl+o 快速 Outline 视图：查看当前文件中的类、方法名。 4 –&gt; ctrl+PgDn/PgUp 选项卡之间快速切换。 5 –&gt; ctrl+h 全局搜索对话框。 6 –&gt; ctrl+f 当前文件搜索、替换对话框。 Debug 模式快捷键1 –&gt; F11 Debug 模式运行程序。 2 –&gt; F5 单步调试进入函数内部。 3 –&gt; F6 单步调试不进入函数内部。 4 –&gt; F8 一直执行到下一个断点。 5 –&gt; F7 由函数内部返回到调用处。 6 –&gt; alt+shift+x 正常运行应用。","link":"/2017/10/11/eclipse-2020-shortcut-key/"},{"title":"Git 使用指南之分支管理","text":"版权说明： 本文思路以及内容主要来自廖雪峰老师的 Git 教程 （强烈推荐膜拜原文），并结合个人使用所作，只作为学习记录使用。如内容有侵权请联系删除，禁止转载！ 更多 Git 相关内容，请关注博主 Git 博文系列： 之一 &gt;&gt;&gt; Git 使用指南之初识 之二 &gt;&gt;&gt; Git 使用指南之时光穿梭机 之三 &gt;&gt;&gt; Git 使用指南之远程仓库 之四 &gt;&gt;&gt; Git 使用指南之分支管理 之五 &gt;&gt;&gt; Git 使用指南之分布式开发","link":"/2017/07/04/git-shi-yong-zhi-nan-zhi-fen-zhi-guan-li/"},{"title":"Git 使用指南之远程仓库","text":"版权说明： 本文思路以及内容主要来自廖雪峰老师的 Git 教程 （强烈推荐膜拜原文），并结合个人使用所作，只作为学习记录使用。如内容有侵权请联系删除，禁止转载！ 更多 Git 相关内容，请关注博主 Git 博文系列： 之一 &gt;&gt;&gt; Git 使用指南之初识 之二 &gt;&gt;&gt; Git 使用指南之时光穿梭机 之三 &gt;&gt;&gt; Git 使用指南之远程仓库 之四 &gt;&gt;&gt; Git 使用指南之分支管理 之五 &gt;&gt;&gt; Git 使用指南之分布式开发","link":"/2017/07/03/git-shi-yong-zhi-nan-zhi-yuan-cheng-cang-ku/"},{"title":"Git 使用指南之时光穿梭机","text":"版权说明： 本文思路以及内容主要来自廖雪峰老师的 Git 教程 （强烈推荐膜拜原文），并结合个人使用所作，只作为学习记录使用。如内容有侵权请联系删除，禁止转载！ 更多 Git 相关内容，请关注博主 Git 博文系列： 之一 &gt;&gt;&gt; Git 使用指南之初识 之二 &gt;&gt;&gt; Git 使用指南之时光穿梭机 之三 &gt;&gt;&gt; Git 使用指南之远程仓库 之四 &gt;&gt;&gt; Git 使用指南之分支管理 之五 &gt;&gt;&gt; Git 使用指南之分布式开发","link":"/2017/07/02/git-shi-yong-zhi-nan-zhi-shi-guang-chuan-suo-ji/"},{"title":"Hello Hexo Matery World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Begin To Edit ArticleDoc Front-Matter PolicyFront-matter 选项中的所有内容均为 非必填 的。推荐至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。 The Simple Demo1234---title: typora-vue-theme主题介绍date: 2017-12-18 00:55:00--- The Most Complete Demo1234567891011121314151617---title: Hello, Hexo Worlddate: 2017-12-18 00:55:00author: Waldeinsamkeitimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags: - Hexo - Markdown---","link":"/2017/09/23/hello-hexo-matery-world/"},{"title":"Hexo 预安装环境部署之 Node.js","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。因此安装 Hexo 前，我们必须完成 Node.js 应用程序的下载和安装。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Node.js了解一定网页基础的同学肯定听说过 JavaScript。Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。简单的说， Node.js 就是运行在服务端的 JavaScript。 当然不了解 JavaScript 的同学也不要慌张，我们只需要将 Node.js 理解为：是 Hexo 用来渲染我们博客页面的插件即可。毕竟这里我们更关注的 Node.js 下载和安装，并不关心其原理以及使用。 开始安装之前，这里先给出 Node.js 安装包及源码下载地址。截至目前， Node.js 最新可供下载安装版本为：v10.15.0 (includes npm 6.4.1)。官网下载界面如下，我们可以根据不同平台的下载要求获取相应的安装包： 当然，你也可以从 Node.js 历史版本 获取到较老的历史版本。 下面我们来看不同平台（Windows、Linux 以及 Mac）下 Node.js：v10.15.0 (includes npm 6.4.1) LST（长期支持版本） 的下载以及安装方法： Windows 平台下安装 Node.js这里我们提供了两种 Windows 平台下来安装 Node.js 的方式： 使用 MSI Windows 安装包方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js MSI 安装包：node-v10.15.0-x64.msi 注意：要使用 MSI 安装应用程序 （例如：node-XYZ.msi）, Windows 系统必须支持 Microsoft Installer 2.0。需要看看你的机器是否支持 MSI，Windows XP 和更高版本 已经有 MSI，很多老机器也可以安装 MSI。安装时，只要保存安装文件（**.msi**）到本地计算机，然后运行它即可完成安装（安装时，根据提示 Next 即可）。 下面我们正式开始 node-v10.15.0-x64.msi 的安装过程： 步骤 1 : 双击下载后的安装包 node-v10.15.0-x64.msi 开启安装界面，然后点击 Next 。如下所示： 步骤 2 : 勾选接受协议许可选项，然后点击 Next: 步骤 3 : Node.js 默认安装目录为 C:\\Program Files\\nodejs 。 你可以自定义修改存储目录（这里我存储于：E:\\nodejs），然后点击 Next： 步骤 4 : 点击树形图标来选择你需要的安装模式（默认为：Node.js runtime，这里我们选择：online documentation shortcuts）, 然后点击 Next 进入 Setup 界面。 步骤 5 : 点击 Install（安装） 开始安装 Node.js。 然后点击 Next，等待安装完成点击 Finish 即可： 步骤 6：DOS 安装检测 首先检测系统 PATH 环境变量中是否成功配置了 Node.js（这是关键的），日志信息输出如下： 12345PATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;E:\\TortoiseSVN\\bin;E:\\Git\\cmd;E:\\nodejs\\;C:\\Users\\xxxxxx\\AppData\\Local\\Microsoft\\WindowsApps;E:\\Anaconda3\\Scripts;E:\\Anaconda3;C:\\Users\\xxxxxx\\AppData\\Roaming\\npm 可以看到 E:\\nodejs\\ 路径已经被成功添加到系统环境变量 Path 中。 此时我们来查看安装好的 Node.js 版本号： 12C:\\Users&gt;node -vv10.15.0 至此，使用 “MSI Windows 安装包” 的方式安装 Node.js 的过程已经全部完成。 使用 EXE Windows 二进制文件方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js Binary 安装包：node-v10.15.0-win-x64.zip。 使用 Windows 二进制文件安装 Node.js 比较简单。直接解压安装包，然后双击安装目录下的：node.exe 等待即可 注意，node.exe 安装过程中会出现如下安装窗口： 安装版本测试： 查看已安装 Node.js 版本号，信息如下表示安装成功： 12C:\\Users&gt;node -vv10.15.0 如果没显示正确版本号，请添加系统环境变量。 Linux 平台下安装 Node.js 注意：Linux 上安装 Node.js 需要安装 Python 2.6 / 2.7 ，不建议安装 Python 3.0 以上版本。 Linux 平台下，我们也提供了两种 Node.js 的按照方式： 使用已编译好的包Node.js 官网提供了已经编译好的 linux Node.js 安装包，解压即用： 123456789# 下载相应版本安装包（下载目录为：/usr/software）：$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz＃ 解压：$ tar -zxvf node-v10.15.0-linux-x64.tar.xz# Node.js 安装版本测试：＄ cd node-v10.15.0-linux-x64$ ./bin/node -vv10.15.0 注意，你可以在 https://nodejs.org/dist 中查找到其它支持的 node.js 版本进行下载。 注意，解压文件的 bin 目录底下包含了 node、npm 等命令，为了方便系统调用，我们可以使用 ln 设置命令软链接： 12ln -s /usr/software/node-v10.15.0-linux-x64/bin/npm /usr/local/bin/ ln -s /usr/software/node-v10.15.0-linux-x64/bin/node /usr/local/bin/ 使用源码安装1）Ubuntu 这一小节我们来看如何在 Ubuntu OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：开放目录权限： 1$ sudo chmod -R 755 node 步骤三：依次执行如下命令编译源码： 1234$ cd node-v10.15.0$ sudo ./configure$ sudo make$ sudo make install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile |——————————————————— 补充：Ubuntu 还可以通过 apt-get 命令 直接安装： 12sudo apt-get install nodejssudo apt-get install npm ———————————————————| 步骤五：检测是否安装成功： 12$ node --versionv10.15.0 2）Centos 这一小节我们来看如何在 Centos OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：解压源码文件： 1$ tar -zxvf node-v10.15.0.tar.gz 步骤三：依次执行如下命令编译安装源码： 1234cd node-v10.15.0./configure --prefix=/usr/local/node/10.15.0makemake install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile 步骤五：验证是否安装配置成功： 1$ node -v Mac 平台下安装 Node.js这里我们提供两种方式来在 Mac OS 上安装 Node.js： 1）使用 pkg 安装包 前往 Node.js 官网下载地址 下载最新 Node 版本 .pkg 安装包，进行安装即可。 2）使用包管理器 1$ brew install node","link":"/2017/09/20/hexo-yu-an-zhuang-huan-jing-bu-shu-zhi-node-js/"},{"title":"JAVA 中的 JVM &amp; JRE &amp; JDK ?","text":"我们知道，任何语言或者软件的运行都依赖环境，Java 必然也不例外。Java 语言的开发运行，也离不开 Java 语言的运行环境 JRE。没有 JRE 的支持，Java 语言便无法运行。当然，如果还想编译 Java 程序，搞搞小开发的话，JRE 是明显不够了，这时候就需要 JDK。 那么， JDK，JRE 和 JVM 有什么区别以及联系呢？ JVM &amp; JRE &amp; JDK很多 Java 初学者肯定会或多或少产生过这样的疑问： JDK，JVM 和 JRE ？？？三者有什么区别？又有什么联系呢？ 所以，这里来整理一下三者的关系和区别： JDK（Java Development Kid，Java 开发工具包）：是针对 Java 开发人员的产品，是整个 Java 的核心，包括了 Java 运行环境 JRE、Java 工具和 Java 基础类库。 JRE（Java Runtime Environment，Java 运行环境）是运行 JAVA 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。 JVM（Java Virtual Machine，Java 虚拟机）是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言编写的软件程序。 还不明白？！直接上图： 可以看出： JDK = JRE + 多种 Java 开发工具 JRE = JVM + 各种类库 JDK &gt; JRE &gt; JVM –**&gt; Java IDE ** 那么，加入 Java IDE 的话，IDE 应该处于什么位置呢？？ JAVA IDE &gt; JDK &gt; JRE &gt; JVM","link":"/2017/10/09/java-zhong-de-jvm-jre-jdk/"},{"title":"Java Hello World","text":"相信这里你已经对 Java 有了基本的了解，并且你已经完成了 Java 开发环境的基本搭建。你可能会很疑惑上面我们配置的开发环境是否真的可以运行 Java 应用程序？而不是通过简单的 java –version 来判断。看完本篇博文你会了解一个完整 Java 应用程序的基本开发过程。 Hello Java World在开始后续的学习之前，我们先给出一个经典的 Java 程序 Demo（HelloWorld）： 1234567891011/** * * My First Java Code * */public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); }} 先来看一下，上诉的 Java 程序有什么样的含义，具体 Java 语句的用法会在后续的学习中深入了解，这里不用深究。 上述代码的含义是，我们运行上述 Java 程序后，会在屏幕打印一行文字：Hello, Java World! 编写 Java 源程序Java 源程序可以使用任何一个文本编辑器（记事本、Sublime、Notepad++…）来编写，这里以 Windows 下的记事本为例： 1）新建一个空白记事本，然后如实地将我们上面给出的 Java 程序内容编写进去。 2）将写完代码后的文件另存为 HelloJava.java，保存类型选择“所有文件”，接着单击“保存”按钮，保存文件到任一文件夹中。 重新打开选用记事本打开编写好的 Java 源程序文件，如下： 提示：保存的 Java 源程序文件名中不能出现空格，类似 “Hello Java.java” 的文件名在编译时会出现找不到文件的错误。 编译源程序将 Java 源程序编写并保存到文件之后，还需要进行编译才能运行。编译 Java 源程序使用的是 JDK 中的 javac 编译器。你需要在 CMD 下执行： 1javac HelloJava.java 此时如果没有任何其他信息，表示该源程序通过了编译；否则会输出错误编译信息，这时说明程序中存在错误，必须根据错误提示，重新在记事本中打开 HelloJava.java 文件修改出错代码，修改完成后保存修改到文件，然后回到命令提示符窗口重新编译（可能要反复几次，修改程序中出现的多个编写错误），直到编译通过为止。 实在通过不了，你可以直接复制我上面给出的代码。 javac HelloJava.java 命令的作用是让 Java 编译器获取 Java 应用程序 HelloJava.java 的源代码，把它编译成符合 Java 虚拟机规范的字节码文件。 这时，你会发现在 HelloJava.java 同目录下生成一个新文件 HelloJava.class，此文件便是我们所说的字节码文件，它也是 JVM 上的可执行文件。 运行字节码文件编译完成后，我们就可以使用 Java 解释器（java）运行 Java 源程序所对应的字节码文件（.class）了，命令如下： 1java HelloJava 你会发现，DOS 下输出如下： Hello, Java World! 到这里，你已经成功运行了你写好的 Java 源程序了！ 注意，运行字节码文件时，无需使用 .class 全名。 Hello World 执行详解从上面的过程中，你肯定不难归纳出 Java 程序的运行必须经过的 3 个步骤： 编写：使用文本编辑器编写，最终形成后缀名为 .java 的 Java 源文件。 编译：是指使用 Java 编译器对源文件进行错误排査的过程，编译后将生成后缀名为 .class 的字节码文件，而不是不像 C 语言那样的可执行文件。 运行：是指使用 Java 解释器将字节码文件翻译成机器代码，执行并显示结果。 Java 程序运行流程示意图如下： 详细说明： 1.字节码文件，是一种二进制文件，是一种和任何具体机器环境及操作系统环境无关的中间代码，这就意味着 任何安装了 JDK 平台编译后生成的字节码文件是相同的。 2.编程人员和计算机都无法直接读懂字节码文件。 3.Java 解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码，以便执行。也就是说，Java解释器依托的 JVM 是平台相关的，不同平台下的 JVM 是不同的，相同的字节码文件会被翻译成不同的机器代码。 Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是 Java 虚拟机的一部分。 4.JVM 把不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。 Java 的这种运行机制如下： Java IDE事实上，我们在实际开发 Java 程序时，会使用 Java IDE（Java Integrated Development Environment，Java 集成开发环境）。 即我们会选择一款合适的 IDE 工具来完成 Java 程序的编写 &amp; 编译 &amp; 运行。 Java IDE 可以为我们提供如下功能： 提供代码编辑功能； 快捷方式调用：javac，java….. 可视化界面； 文档自动编写 … IDE 帮助我们把 Java 程序开发过程中的编写、分析、编译、调试、文档生成、字节码混淆、打包压缩、发布部署一系列任务等集成到一个可视化界面，极大的方便了开发人员的工作，提升了编程效率。 Java IDE 推荐：Eclipse / Intellij IDEA 关于反编译在 JDK 安装与配置博文中，JDK 安装目录详解时，我们提到过 javap 反编译器，不知道你是否还记得？？？ Java 程序经过编译后生成的 .class 文件中，包含有大量的源程序信息，很容易被反编译，拿到我们源程序信息。 例如，我们使用 javap 对上面我们的 Hello Java World Demo 进行反编译： 123456$ javap HelloJavaCompiled from &quot;HelloJava.java&quot;public class HelloJava { public HelloJava(); public static void main(java.lang.String[]);} 关于字节码混淆怎么办？事实上，我们可以使用 Java 代码混淆器来进行字节码混淆。 IDE 集成的字节码混淆功能，能够对字节码文件进行代码混淆，防止源程序不被解读。 代码混淆一般原理： 对 .class 文件或 .jar 文件中的字节码进行修改，使其不能被很好的反编译，或者反编译不容易阅读。","link":"/2017/10/10/java-hello-world/"},{"title":"Java, Write Once, And Run Any Where","text":"Java 语言特点中提到过，Java 是平台无关的。Java 的平台无关性具体表现在于 “一次编写，到处运行（Write Once，Run any Where）”，因此采用 Java 语言编写的程序具有很好的可移植性，编译之后可以直接在不同的平台上运行。 Java平台无关性为什么需要平台无关性平台无关（跨平台），用一句话来阐述就是 ”Write once, and run anywhere“，也就是说：语言在计算机上的运行不受不同平台的约束，一次编写，到处运行。 就比如说我们在 Windows 下面写出来的一段 Java 程序，换成 Linux or Mac os 系统里面，一样可以正常运行并且输出相同的结果。 Java 的这种跨平台的特性，很大程度上依赖于 JVM（Java Virtual Machine），但注意不仅限于 JVM。 Java 如何支持平台无关性1 –&gt; Java 平台本身 Java 平台中的 Java API（Application Programming Interface，Java 应用编程接口），提供了一套独立于操作系统的标准接口，作为 Java 程序和所在平台（硬件与操作系统）之间的缓冲角色，这样开发编写 Java 程序只与 Java 平台打交道，而不需要了解平台硬件或操作系统细则。 2 –&gt; Java 字节码 不同平台下，Java 程序经过 Java 编译器会被编译成 同样的 二进制 的 Java 字节码文件（class文件）。class 文件可以在任何平台（Win or Linux or Mac）生成，也可以被任何平台的 JVM 装载运行。 Java 字节码是 Java 平台无关的基石，真正的平台无关。 3 –&gt; JVM 虚拟机机制 Java 的平台无关性很大程度上依赖于 JVM（Java Virtual Machine），JVM 是可以执行 Java 字节码的虚拟进程。JVM 能够将 相同的字节码 编译成与平台相关的 不同的机器码，从而进一步再解释执行。 JVM 机制百度百科上 JVM 的专业解释如下： Java 虚拟机（Java Virtual Machine，简称 JVM）是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。 Java 虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。JVM 在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。 ============================================== 通俗的说： JVM，也就是 Java 虚拟机，就属于 Java 平台的一部分，包含于 JRE 的下面。 解释执行当你需要执行某个 Java 程序时，由 JVM 帮你进行进一步编译（JIT，Just In Time）和解释执行，它负责将编译生成的字节码文件翻译成特定平台下的机器码然后运行。 注意： 1. 编译的结果不是生成机器码，而是生成字节码，字节码不能直接运行。必须通过 JVM 翻译成机器码才能运行。2. 不同平台下编译生成的字节码是一样的，但是由 JVM 翻译成的机器码却不一样。 因此，运行 Java 程序必须有 JVM 的支持，即使你将 Java 程序打包成可执行文件（例如 .exe），仍然需要 JVM 的支持。 平台相关性JVM 屏蔽了与具体操作系统平台相关的信息，可以得知，JVM 是平台相关的。 事实上也正是如此，JVM 分为很多个系统版本的，你编写好的 Java 程序，无论到哪个平台上，Windows 也好，Linux 也好，Mac 也罢，只需要安装对应平台 JVM，便可以成功编译和执行。 这里我们知道： 跨平台的是字节码（Java 程序），不是 JVM。JVM 是平台相关的，不同平台下需要安装不同版本的 JVM。 Java API待续…","link":"/2017/10/09/java-write-once-and-run-any-where/"},{"title":"Java 中的 final 修饰符","text":"Java 中 final 修饰符的使用。 final 修饰变量我们知道，final 修饰符可用来修饰变量。 final 修饰变量（基本数据类型，或引用数据类型）时，三大原则： 当定义的 final 变量为成员变量（类或结构中的属性）时，必须在定义时就明确设定它的初始值，否者直接会报错无法通过编译，并且如果再次对其进行赋值将会提示编译错误。 当定义的 final 变量为 方法中（方法内，或方法块内）的局部变量 时，可以直接定义时赋值，也可以由开发者在声明后，第一次使用该变量之前，显式的赋初始值，实例化该变量； 当定义的 final 变量为 方法上的局部变量（参数） 时，是为了防止数据在方法体中被修改，这时参数的值（或引用）在方法体内是不能不能被重新赋值的。 根据 Java 中数据类型的分类，这里 final 修饰符修饰的变量的使用场景我们需要注意以下两种，使用上是有细微差异的（两个注意）： final 修饰符修饰基本数据类型的变量 final 修饰符修饰引用数据类型的变量 1 –&gt; 修饰基本数据类型的变量时 final 修饰基本数据类型的变量时，基本类型的值是不能够改变的。 2 –&gt; 修饰引用数据类型的变量时 final 修饰引用数据类型的变量时，引用类型变量所指的引用是不能够改变的（地址不变），但是引用类型变量的值是可以改变的（地址所指向存储空间值可变）。 详细使用样例差异，可见下文原则 1~3 中样例。 原则一当定义的 final 变量为成员变量（类或结构中的属性）时，必须在定义时就明确设定它的初始值，否者直接会报错无法通过编译，并且如果再次对其进行赋值将会提示编译错误。 1 –&gt; 基本数据类型 12345678910public class HelloJava { static final int i = 3; // 声明时，显式初始化 public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(i); } } 关于 final 前面的 staitc 修饰符，这里可以不用深究，你就当没看见。 输入： 1203 2 –&gt; 引用数据类型 12345678910public class HelloJava { static final String str1 = &quot;this is a test&quot;; // 声明时，显式初始化 public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(str1); } } 输入： 12nullthis is a test 下面这样的表达可以么？（先忽略之后的注释） 1234567891011121314151617181920public class HelloJava { static final int i; // 编译不通过，声明时，未初始化 static final int j = 3; static final String str1; // 编译不通过，声明时，未初始化 static final String str2 = null; static final int[] a_test = {2,3,4}; public static void main(String[] args) { // TODO Auto-generated method stub j = 1; // 编译错误，再次对 final 修饰成员变量进行赋值操作 System.out.println(j); System.out.println(str2); a_test = {1,2}; // 编译错误，引用类型变量所指的引用是不能够改变的 a_test[0] = 2; // 编译可通过，引用类型变量的值是可以改变的 } } =========================================== final 修饰的成员变量的另一种赋值方法（构造函数）： 1234567public class FinalDemo { final int age; public FinalDemo(int age){ this.age=age; // 编译通过 }} 你可以想想上述赋值方法成立的原因…. 原则二当定义的 final 变量为 方法中（方法内，或方法块内）的局部变量 时，可以直接定义时赋值，也可以由开发者在声明后，第一次使用该变量之前，显式的赋初始值，实例化该变量。 1 –&gt; 基本数据类型 12345678910111213public class HelloJava { public static void main(String[] args) { final int i_test = 3; // 变量声明时，进行初始化 System.out.println(i_test); final int j_test; j_test = 1; // 变量声明后，使用前，进行初始化 System.out.println(j_test); } } 输出： 1231 2 –&gt; 引用数据类型 12345678910111213public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub final String i_test = &quot;abc&quot;; System.out.println(i_test); final String j_test; j_test = &quot;def&quot;; System.out.println(j_test); } } 输出： 12abcdef 下面这样的表达可以么？（先忽略之后的注释） 12345678910111213141516public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub int i = 1; final String str; if (i &gt; 0) { str = &quot;this is a test&quot;; str = &quot;test&quot;; // 编译错误，块内使用前多次初始化赋值 str.length(); // 编译可通过，块内使用前已初始化赋值 } else { str.length(); // 编译错误，块内使用前未初始化赋值 } } } 原则三当定义的 final 变量为 方法上的局部变量（参数） 时，是为了防止数据在方法体中被修改，这时参数的值（或引用）在方法体内是不能被重新赋值的。 但需要谨记上文的 两个注意。 1 –&gt; 基本数据类型 1234567891011public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub } public static void checkValue(final int a) { a = 234; // 编译错误，基本类型的值在方法内部是不能够改变的 } } 2 –&gt; 引用数据类型 123456789101112public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub } public static void checkValue(final int[] a) { a = {2,3,4}; // 编译错误，a 变量的引用是不能够改变的 a[0] = 3; // 编译可通过，a 变量所指向的存储中的值是能够修改的 } } final 修饰类final 修饰类时，可以继承其他类，但是不可以被继承的，使用方式跟其它类一样。 123class Parent{}final class Person extends Parent{}class child extends Person{} final 修饰方法final 修饰方法时，不可以被覆盖（不可以重写），但可以继承使用。 123456789class Parent { // final 修饰的方法，不可以被覆盖，但可以继承使用 public final void method1(){} public void method2(){} // 普通方法}class Child extends Parent { // 普通 method2 方法，支持重写 public final void method2(){}}","link":"/2017/10/13/java-zhong-de-final-xiu-shi-fu/"},{"title":"Java 程序设计基础之数据类型","text":"前面我们在介绍 Java 中的字面值以及变量时提到过，Java 中的数据类型分类：基本数据类型（Primitive Type）和引用数据类型（Reference Type），本文我们来详细解读 Java 的数据类型定义以及应用，本文学习之后重新回顾之前的内容，可以帮助你更好的理解前文。 Java 中的数据类型结构如图： 下面我们分别来看两种数据类型的说明： Java 中的基本数据类型Java 中包含八种基本的数据类型，都是 Java 基础语言中预先定义好的。 基本数据类型包括：byte（字节型）、short（短整型）、int（整型）、long（长整型）、boolean（布尔型）、char（字符型）、float（单精度浮点型）、和 double （双精度浮点型）共 8 种。 所有的基本数据类型的大小（所占用的字节数，数据取值范围）都已明确规定，在各种不同的平台上保持不变，这一特性有助于提高 Java 程序的可移植性。 类型名称 关键字 占用内存 取值范围 字节型 byte 1 字节 -128~127 短整型 short 2 字节 -32768~32767 整型 int 4 字节 -2147483648~2147483647 长整型 long 8 字节 -9223372036854775808L~9223372036854775807L 单精度浮点型 float 4 字节 +/-3.4E+38F（6~7 个有效位） 双精度浮点型 double 8 字节 +/-1.8E+308 (15 个有效位） 字符型 char 2 字节 ISO 单一字符集，也可以看作是一种整数类型，相当于无符号整数类型 布尔型 boolean 1 字节 true 或 false 整数类型Java 定义了 4 种整数类型变量用于存放整型字面值： 字节型（byte） 短整型（short） 整型（int） 长整型（long） 使用说明如下： 名称 说明 byte byte 类型是最小的整数类型。当用户从网络或文件中处理数据流时，或者处理可能与 Java 的其他内置类型不直接兼容的未加工的二进制数据时，该类型非常有用。 short short 类型限制数据的存储为先高字节，后低字节，这样在某些机器中会出错，因此该类型很少被使用。 int int 类型是最常使用的一种整数类型。 long 对于大型程序常会遇到很大的整数，当超出 int 类型所表示的范围时就要使用 long 类型。 这些都是有符号的值，具体区别在于不同类型的整型，最大值，最小值不一样，见小节开始。 如果试图给 byte 类型的变量赋予超出其范围的值（300），就会产生编译错误 1234567891011public class HelloWorld{ public static void main(String[] args){ byte b = 1; short s = 200; int i = 300; long l = 400L; byte b2 = 200; // 编译错误 }} 字符型Java 语言中的字符类型（char）使用两个字节的 Unicode 编码表示，它支持世界上所有语言，可以使用单引号字符或者整数（0~65535）对 char 型赋值。 超过一个字符，或整数超过 65535 就会产生编译错误。 123456789public class HelloWorld{ public static void main(String[] args){ char c = '中'; char c2 = '中国'; // char 只能存放一个字符，超过一个字符就会产生编译错误 char c3 = 'ab'; // char 只能存放一个字符，超过一个字符就会产生编译错误 }} 前面我们知道，字符型字面值中的字符可以八进制或者十六进制，八进制使用 ‘反斜杠加3位八进制数字’ 表示，例如 ‘\\141’ 表示字母 a。十六进制使用 ‘\\u加上4为十六进制的数’ 表示，如 ‘\\u0061’ 表示字符 a。 Java 只允许转义不超过 0377 的八进制数来表示字符。0377 是占满 8 位的数，但 Java 中的 char 是 16 位，所以无法表达所有 char 值。 其实 Java 允许转义八进制数表示字符是来源于 C 语言，C 中字符类型只占 8 位，所以才有这个限制。Java 是推荐使用转义十六进制数来表示 char 的。 如果不用转义，换一种方式，你可以用“把八进制数表示为整型，再把整型转为 char 类型”来实现八进制数到 char 的转换。用 ‘卷’ 举例，它的八进制数值为 051567，可以这样：char c = (char)051567; Unicode 字符集（char）通常用十六进制表示，范围从\\uOOOO ~ \\uFFFF，刚好占满（0~65535）。 布尔类型布尔类型（boolean）用于对两个数值或表达式通过逻辑运算，判断结果是“真”还是“假”。 只能是取 true 和 false 这两个值中的一个。 在 Java 语言中，布尔类型的值不能转换成任何数据类型，true 常量不等于 1，而 false 常量也不等于 0。这两个值只能赋给声明为 boolean 类型的变量，或者用于布尔运算表达式中。 浮点类型浮点类型是带有小数部分的数据类型，也叫实型。 浮点型数据包括单精度浮点型（float）和双精度浮点型（double），代表有小数精度要求的数字。 一个值要能被真正看作 float，它必须以 f（或 F）后缓结束；否则，会被当作 double 值。对 double 值来说，d（或 D）后缓是可选的。 123456789public class HelloWorld{ public static void main(String[] args){ double d = 123.45; float f = 54.321; //该行会出现编译错误，因为 54.321 默认是 double 型的 float f2 = 54.321f; }} String说起数据类型，不得不提的就是字符串类型，是使用双引号引起来的单个或多个字符。 事实上，Java 中 String 类型其实 并不是基本类型，是一个类，并且是 Immutable（不可变）类型的，一旦创建就不能够被改变。 引用类型所谓引用数据类型就是对一个对象的引用。 引用数据类型是建立在基本数据类型的基础上，包括数组、类和接口。 Java 语言中不支持 C++ 中的指针类型、结构类型、联合类型和枚举类型。 引用类型还有一种特殊的 null 类型。因为 null 类型没有名称，所以不可能声明一个 null 类型的变量或者转换到 null 类型。 在实际开发中，程序员可以忽略 null 类型，把 null 只当作是引用类型的一个特殊字面值，用于给引用类型赋初始值，并且不要把一个 null 值赋给基本数据类型的变量。。 数据类型转换数据类型的转换是在所赋值的数值类型和被变量接收的数据类型不一致时发生的，它需要从一种数据类型转换成另一种数据类型。也就是说，不同类型之间的数据可以互相转换。 但是要注意，满足一定的规则才可以互相转换： 精度高的数据类型就像容量大的杯子，可以放更大的数据精度低的数据类型就像容量小的杯子，只能放更小的数据小杯子往大杯子里倒东西，大杯子怎么都放得下大杯子往小杯子里倒东西，有的时候放的下，有的时候就会有溢出 所以根据以上两种情况，Java 中的数据类型的转换可以分为 隐式转换（自动类型转换） 显式转换（强制类型转换） 隐式转换自动转换规则：低精度类型向高精度类型进行转换，会进行自动转换。 这里有一个 拓宽转换（widening conversion）原则：在运算过程中，由于不同的数据类型会转换成同一种数据类型，所以整型、浮点型以及字符型都可以参与混合运算。最终结果会自动转发成高精度的字面值。 123456789101112public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub float c_test = 10 + 10.0 + 'a'; // 编译错误，将 double 型字面值赋直接给 float short a = 1; short b = 2; short c = a+b; // 编译错误，将 int 型字面值赋直接给 short } } 任何运算单元的长度，超过 int,那么运算结果就按照最长的长度计算。不超过 int,那么运算结果就按照 int 来计算 自动转换规则： 数值型数据的转换：byte→short→int→long→float→double。 字符型转换为整型：char→int→long→float→double。 需要注意的是，虽然 short 和 char 都是16位的，长度是一样的，但是彼此之间，依然需要进行强制转换。byte 也不能自动转换为 char，而且 char 也不能自动转换为 byte。 这里的强制转换，就是我们下面要提到的显示转换。 – &gt; 自动类型提升有好处，但它也会引起令人疑惑的编译错误。引发一个问题： 12byte b = 50;b = b * 2; // Type mismatch: cannot convert from int to byte 第二行会报 “类型不匹配：无法从int转换为byte” 错误。 该程序试图将一个完全合法的 byte 型的值 50*2 再存储给一个 byte 型的变量。但是当表达式求值的时候，操作数被自动的提升为 int 型，计算结果也被提升为 int 型。这样表达式的结果现在是 int 型，不强制转换它就不能被赋为 byte 型。 所以应该使用一个显示的强制类型转换，例如： 12byte b = 50;b = (byte)(b*2); 显示转换当两种数据类型不兼容（byte &lt;–&gt; char），或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行显示的强制类型转换。其语法格式如下： 1(type)variableName 但是注意，强制转换的意思就是，转是可以转的，但是不对转换之后的值负责。 风险自担，后果自负 就像我们前面说的，大杯子往小杯子里倒东西，有的时候放的下，有的时候就会有溢出。当出现溢出时，不也就意味着数据丢失么？所以使用显示转换时要注意！！！ 显示转化可使用场景如下：","link":"/2017/10/14/java-cheng-xu-she-ji-ji-chu-zhi-shu-ju-lei-xing/"},{"title":"Java 程序设计基础","text":"要想编写规范、可读性高的 Java 程序，就必须熟练掌握 Java 基本语法。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。随后的章节开始学习 Java 的基础语法部分，主要分为 4 部分内容：数据类型，变(常)量，运算符，以及控制流程语句，这也是构成 Java 程序最基础的 4 个部分，敲黑板！ 其中，数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作；变量是用来存储指定类型的数据；而控制流程根据用户的输入决定程序要进入什么流程，即要做什么？如何做？ 在开始正式的学习之前，我们需要先了解一些 Java 基本语法最最基本的定义： Java 标识符 &amp; 关键字任何一种计算机语言都离不开标识符和关键字，本小节将详细介绍 Java 的标识符、关键字（保留字）。 标识符所有编程语言中的 标识符，都是为 变量、方法、类、对象以及文件、工程 等进行命名的，可以有一个或多个字符。 标识符构成规则Java 语言规定的，标识符的构成规则如下： 标识符可以由任意多的 字母（AZ 和 az），数字（0~9），下划线（_），dollar 符（$），Unicode 字符集中符号（大于 0xC0 ）的所有符号组合构成。注意不包含空格！！！ 必须以字母，dollar 符以及下划线开头，不可以是数字。 运算符，关键字（保留字）以及标准方法名不可以作为标识符。 注意：标识符中可以包含 关键字 &amp; 标准方法名。 标识符命名规范一个良好的编程习惯要求命名标识符时，应赋予它 ”意义“（非强制）。 见名知义：代码命名神奇 –&gt; CodeIF； 包名全部小写； 类名各单词首字母大写（大驼峰命名法） 变量名，方法，类的实例：第一个单词字母小写，其它单词首字母大写（小驼峰命名法）； 常量名全部大写； 参数的名尽量使用一个单词的情况下，命名明确； 数组命名使用：”类型[] 数组名” 的形式。 驼峰命名法： 小驼峰式（little camel-case）–&gt; 第一个单词首字母小写，后面其他单词首字母大写。 大驼峰式（big camel-case）–&gt; 每个单词的第一个字母都大写; 关键字关键字（或者保留字）是语言中已经被赋予了特殊含义的专有单词，Java 编译器有特殊的意义，不能在程序中做其他目的使用。 保留字是为 Java 预留的关键字，它们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 Java 语言目前定义了 51 个关键字，这些关键字不能作为标识符使用： 数据类型：boolean、int、long、short、byte、float、double、char、class、interface。 流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally。 修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native。 动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new。 保留字：true、false、null、goto、const。 Java 注释注释不是编程语句，编译时会被编译器忽略。 Java 支持以下三种注释方式： 单行注释以双斜杠 “//” 标识，只能注释一行内容： 123456public class HelloJava { public static void main(String[] args) { // 这是一个单行注释 System.out.println(&quot;Hello, Java World!&quot;); }} 多行注释包含在 “/*” 和 “*/” 之间，能注释很多行的内容，也成为 块注释。 为了可读性（美观）比较好，一般首行和尾行不写注释信息: 123456789public class HelloJava { /** * 这是一个多行注释 */ public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); }} 注意：多行注释可以嵌套单行注释，但是不能嵌套多行注释和文档注释。 文档注释包含在 “/**” 和 “*/” 之间，也能注释多行内容，只在类、接口、方法、成员变量上面，用来描述其作用。 注释后，鼠标放在类和方法上面会自动显示出我们注释的内容 1234567891011121314151617/** * Project Name: HelloJava * Class Name: HelloJava * Created By: xxxxxx * Created At: xxxx年xx月xx日 上午3:31:44 * E-Mail: * @Version * */public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); }} 注意：文档注释能嵌套单行注释，但是不能嵌套多行注释和文档注释 Java 平台提供了 javadoc 工具，使用 Java 源代码中的文档注释，来生成 API 说明文档。 语句Java 程序中，语句是最小的组成单位，每个语句必须使用分号作为结束符。 除此之外，Java 对语句无任何其他限制，开发人员可以很随意地用符合自己风格的方式编写语句。 1 –&gt; 一个语句放在多行 123String str = &quot;Apple &quot;+&quot;Banner &quot;+&quot;Pear &quot;+&quot; Orange&quot;; 由于 Java 使用分号作为语句的结束符，所以上面的 3 行代码会被 Java 认为是一条语句，因为这 3 行中只有一个分号。但是，我们不推荐使用这种方式来编写语句（不符合编码规范）。 2 –&gt; 多个语句放在一行 使用分号作为分隔符，将多个语句放在一行来编写也是允许的： 1int a=0,b,c;b=a+10;b++;c=a*b;System.out.println(c); 但也不这样推荐。 3 –&gt; 空语句 所谓空语句（Empty Statement），它在程序中什么都不做，也不包含具有实际性的语句。 空语句的语法格式如下： 1; // 其实就是一个分号 表达式表达式是由变量、操作符以及方法调用所构成的结构。在表达式后面添加分号，就成了独立的表达式语句。 样例： 12int i = 5; System.out.println(5); 注意： ; 也是一个完整的表达式，即使没有任何变量、操作符以及方法调用。 1234567public class HelloWorld { public static void main(String[] args) { //一个空;也是一个表达式 ; ; }} 语句块从 { 开始 到对应的 } 结束，即为一个语句块，也称为：复合语句，是很多个语句的组合。 123456789public class HelloWorld { //类对应的块 public static void main(String[] args) { //主方法对应的块 System.out.println(&quot;abc&quot;); } { // 这是正确的语法 System.out.println(&quot;this is a test&quot;); }} Java 编码规范 程序最开始编写导入包和类语句，即 import 语句，import 语句可以有多行，编写完 import 语句后空一行; 定义 public 类，顶格书写。类的主体左括号 “{” 不换行书写，右括号 “}” 顶格书写； 定义 public 类中的变量，缩进书写； 定义方法用缩进书写，方法的左括号 “{” 不换行书写，右括号 “}” 和方法首行第一个字符对齐；方法体要再次缩进书写，最后一个变量定义和第一个方法定义之间、方法和方法之间最好空一行； 方法名和紧跟在其后的左括号 “(” 无空格，该左括号和其后的标识符之间无空格。多个参数之间的逗号和前一个参数紧靠，与后一个参数空一格。 在一行内只写一个语句，并采用空格、空行来保证语句容易阅读。 关于编码规范，可以以权威公司（Google 等）编码规范为参考。 Java 包名(Package)命名规范每个 Java 开发人员都可以开发自己的 Java 项目，Coder 可以为 Java 项目中的包定义各种各样满足命名规范定义的名字。 但是，我们需要尽可能保障每个 Java Package 命名的唯一性，尤其是在你上传编写好的 Java 库到第三方平台供他人使用时，这尤为重要（第三方平台一般会进行唯一性检验，成功后才允许你上传，否则认为包名冲突了）。 这就要求我们，尽可能的在 Package 命名时： 为自己定义的包名前加上唯一的前缀 1 –&gt; 公司项目命名 一般公司项目中，包名的命名规则可定义为如下： com.公司名.项目名.模块名 2 –&gt; 团队项目 一般公司项目中，包名的命名规则可定义为如下： team.公司名.项目名.模块名 3 –&gt; 个人项目命名 那么，我们的个人项目又怎么命名呢？ indi（individual）–&gt; 个人发起，但非自己独自完成的项目（可公开或私有项目），但 Copyright 主要属于发起者。 命名规则如下: indi.发起者名.项目名.模块名 pers（personal）–&gt; 个人发起，独自完成，可分享的项目，Copyright 属于个人。 命名规则如下: pers.个人名.项目名.模块名 人发起，独自完成，非公开的私人使用的项目，Copyright 属于个人。 命名规则如下: priv.个人名.项目名.模块名","link":"/2017/10/12/java-cheng-xu-she-ji-ji-chu/"},{"title":"Java 程序设计基础之 Java 变量","text":"变(常)量——Java 程序中最基础的元素。我们在前面提到过，Java 字面值是 Java 数据具体、直观的表现，就是一个具体的值。事实上， Java 中字面值的主要功能就是来给变量、常量进行赋值用的。程序设计语言中变量的引入是至关重要的，有了变量后续的一切才是有意义的。 Java 变量什么是变量变量你可以将其看成是一个个带有名字的小盒子，用来存放我们的数据（字面值），方便后续在程序中引用（使用），这是有意义的。 严格来说， 在 Java 中，变量是指向计算机内存中的某一存储区域的引用，该区域有自己的名称（变量名）和数据类型（变量类型）。 事实上，变量的类型是，变量所指向的存储区域中所存储数据的类型。 该区域的数据可以在同一类型范围内不断的变化~ 变量定义Java 语言是强类型（Strongly Typed）语言，强类型包含以下两方面的含义： 所有的变量必须先定义（声明）、后使用 指定数据类型的变量只能接受类型与之匹配的值 定义（声明）变量，就是要告诉编译器这个变量的数据类型，和变量的名称，编译器才知道它能存放什么样的数据，需要分配多少空间给它，以及如何找到它。 1 –&gt; 声明变量 在 java 中用户可以通过指定数据类型和标识符来声明变量，其基本语法如下所示： DataType identifier; 或者： DataType identifier=value; 注意：同一代码块范围内不允许有多个相同命名的变量。 2 –&gt; 初始化变量 初始化变量是指为变量指定一个明确的初始值，变量声明后并不会分配内存空间，只有赋值之后才会分配内存。 初始化变量有两种方式： 声明时直接赋值 先声明、后赋值。 123456// 声明时直接赋值char usersex='female';// 先声明、后赋值String username;username = &quot;Wangyi&quot;; 多个同类型的变量可以同时定义或者初始化，但是多个变量中间要使用逗号分隔，声明结束时用分号分隔。 123# Java 编码规范中不推荐使用String username,address,phone,tel; // 声明多个变量int num1=12,num2=23,result=35; // 声明并初始化多个变量 Java 中初始化变量时需要注意以下事项： 变量是类或者结构中的字段（属性），如果没有显式地初始化，默认状态下会创建变量并初始化为【默认值】，默认值见：【数据类型默认值对照表】。 方法中的变量必须显式地初始化，否则在 使用该变量时 就会出错 常量常量，一种特殊的变量！ 当使用 final 关键字来修饰一个变量时，就成为一个 常量，也称为 final 变量。Java 语言使用 final 关键字来定义一个常量，其语法如下所示： final dataType variableName = value 常量有很多种说法，比如不能改变等等。但更为准确的描述是： 当一个变量被 final 修饰的时候，该变量 只有一次赋值的机会！！！ ========================================== You Need Know More: final 关键字不仅可以用来修饰基本数据类型的常量（或引用类型的变量），还可以用来修饰类、和方法。 当定义的 final 变量为成员变量（类或结构中的属性）时，必须在定义时就设定它的初始值（没有显式初始化，会被隐式初始化为0），如果再次对其进行赋值将会提示编译错误 当定义的 final 变量为方法中的局部变量时，则需要开发者在声明后，第一次使用该变量之前，显式的赋初始值，实例化该变量 Java 中 final 修饰符的用法详细见：Java 中的 final 修饰符，你可以看到 final 修饰类，方法的使用场景。 变量的作用域变量的作用域，也称为：变量的有效范围。 变量的有效范围是指：程序代码中能够访问该变量的区域，若超出该区域进行访问，则在编译时会出现错误。 在程序中，一般会根据变量的有效范围将变量划分为： 成员变量 局部变量 成员变量成员变量是指：定义在类下面，不属于任何一个方法的变量。 别名：字段，属性，Field 作用域是：从变量声明的位置开始，整个类都可以访问得到 类中的成员变量，根据是否有无 static 修饰符修饰，可以分为： 1 –&gt; 实例变量 无 static 修饰符修饰；访问方式：对象名.变量名；生命周期：只要对象被当作引用，实例变量就将存在。 2 –&gt; 类变量（静态变量） 有 static 修饰符修饰；访问方式：类名.变量名（推荐，编码规范），或对象名.变量名；生命周期：其生命周期取决于类的生命周期，类被垃圾回收机制彻底回收时才会被销毁。 注意：Java 中 static 关键字只作用于成员变量，局部变量无法使用 static 修饰。 示例代码如下： 变量声明代码如下所示： 12345678public class DataTest { String name; int age; static final String website = &quot;orangeshare.cn&quot;; static String url = &quot;https://www.orangeshare.cn&quot;;} 测试类代码如下所示： 12345678910111213141516171819public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub DataTest dataTest = new DataTest(); // 创建类的对象 // 实例变量调用方法（对象名.变量名）： System.out.println(dataTest.name); System.out.println(dataTest.age); // 类变量调用方法（类.变量名）： System.out.println(DataTest.website); System.out.println(DataTest.url); // 类变量调用方法（对象名.变量名）： System.out.println(dataTest.website); System.out.println(dataTest.url); } } 上面，name 和 age 显示系统默认初始化的值，website 和 URL 显示初始化的值。且用 static final 修饰的变量必须赋予初始值。 关于 static 修饰符的用法详细见：Java 中的 static 修饰符。 局部变量局部变量是指：在方法或者方法代码块中定义的变量。 别名：参数 根据其所处的位置可以分为三种： 1 –&gt; 方法局部变量（方法内定义） 作用域是：从定义这个变量开始到方法结束这一段时间内有效。 2 –&gt; 方法参数变量（形参） 作用域是：整个方法内均有效。局部变量在使用前必须主动初始化值。 3 –&gt; 代码块局部变量（代码块内定义） 作用域是：从定义这个变量开始到代码块结束这一段时间内有效。 观察下面程序是否可正常运行： 123456789101112131415public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); for (int i = 0; i &lt; 5; i++) { } System.out.println(i); // 无效作用域 } } 重名问题想象一种场景：如果局部变量和成员变量重名，那么在方法中调用打印标识符时，显示的是局部变量的值，还是成员变量的值？ java 采用局部优先的思想。局部变量可以和成员变量相同，使用标识符调用时，优先使用局部变量。想调用成员变量怎么办？如果该变量是实例变量，可使用 this.变量名，否者可使用 类.变量名。 数据类型默认值对照表 数据类型 初始值 boolean false char ‘/uoooo’(null) byte (byte)0 short (short)0 int 0 long 0L float 0.0f double 0.0d 引用型（String等） null 注：引用型数据类型包括：类(class)、接口（interface）、数组（Array）、字符串（String），默认值都为 null。","link":"/2017/10/13/java-cheng-xu-she-ji-ji-chu-zhi-java-bian-liang/"},{"title":"Java 程序设计基础之字面值","text":"所有计算机编程语言的设计初衷，都是为了高效地解决现实世界里的繁琐任务。所谓巧妇难为无米之炊，第一步要做的就是从现实实体中提取出，可用于计算机输入的表达。比如现实世界中最常见的数字、文字、图像、声音等等，在 Java 世界统一被称为：【数据】，有了数据才有后续的一切。 Java 字面值字面值就是数据。 一个具体的数字（3.2，996），或是一个字符串（”I love China“）——文本，都是一个字面值。 字面值，本身就是一个具体（固定的）的值，也只是一个值，是数据最具体，直观的表现。 符合 Java 字面值定义的字面值示例：10，100，3.14，true，false，”I am a Chinese”，’A’，‘b’ 字面值类型我们知道，数据在现实世界中是分门别类的，比如整数、小数、文本等等。将其映射到 Java 中也是一样的。 Java 中对数据的数据类型也是有明确分类定义的，分为：基本数据类型（Primitive Type）和引用数据类型（Reference Type）。 后续章节，我们会更加深入的了解 Java 中定义的数据类型以及其使用。这里如有不理解的地方，不要深究，等待深入学习之后再来进行回顾就一目了然了。 这里，探讨字面值类型的主要目的，是为了明确： Java 中我们可以使用什么数据类型的变量或者常量存储字面值，或是特定数据类型变量或者常量可以使用什么类型的字面值进行赋值，这是关键的！ 根据 Java 的基本数据类型和引用类型，Java 中的字面值类型大致可分为：整型字面值、浮点字面值、布尔型字面值、字符和字符串字面值 以及 特殊字面值 五大类 整型字面值Java 的整型字面值值主要有如下 4 种形式（4 种进制表示）： 十进制数形式（默认）：基 10, 包含从 0-9 的数字。如：54、-67、0。 八进制形式：基 8, 包含从 0-7 的数字，八进制字面值的表示 以 0 开头，如：0125 表示十进制数 85，-013 表示十进制数 -11。 十六进制形式：基 16, 包含从 0-9 的数字，和从 A-F 的字母。十六进制字面值的表示 以 0x 或 0X 开头，如 ：0x100 表示十进制数 256，-0x16 表示十进制数 -22。 二进制形式: 基 2, 包含 0 和 1。二进制字面值的表示 以 0b 或 0B 开头，如：0b11010。 –&gt; 默认情况下，整型字面值对应的是 基本数据类型——整数类型 中的 int 类型（整型），默认在内存中占 32 位。 –&gt; 当整型字面值以 l 或者 L 结尾时（建议使用大写的 L 而非小写的 l，因为容易和 1 混淆），对应的是 基本数据类型——整数类型 中的 long 类型（长整型），表示一个长整型数，它在内存中占 64 位。 –&gt; 如果你可以确定整型字面值（不以 L 结尾）在 基本数据类型——整数类型 中的 byte， short 取值范围之内，你可以把它赋值给 byte(8 bit)， short(16 bit) 类型（字节型，短整型），Java 会自动完成转换，如果试图将超出范围的字面值赋给某一类型（比如把 128 赋给 byte 类型），编译通不过。 浮点型字面值Java 的浮点字面值主要有如下 2 种形式： 小数：如 12.34、-98.0。 科学记数法形式：如 1.75e5 ，2.38E3，其中 e 或 E 之前必须有数字，且 e 或 E 之后的数字必须为整数。 默认情况下（或以 d 或者 D 结尾，写不写都行），浮点字面值是具有双精度型（double）的，对应的是 基本数据类型——浮点类型 中的 double 类型（双精度浮点型），在内存中占 64 位。 当浮点字面值以 f 或者 F 结尾的时，对应的是 基本数据类型——浮点类型 中的 float 类型（单精度浮点型），在内存中占 64 位。 布尔型字面值Java 的布尔型字面值，对应的是 基本数据类型——布尔类型 ，即 boolean 类型。 只有两个值，即 false（假）和 true（真）。 字符型和字符串字面值1 –&gt; 字符型字面值 Java 中的字符型字面值，是用单引号（英文输入）引起来的一个字符，如 ‘e’、E’。 注意，字符型字面值中的字符可以八进制或者十六进制，八进制使用 ‘反斜杠加3位八进制数字’ 表示，例如 ‘\\141’ 表示字母 a。十六进制使用 ‘\\u加上4为十六进制的数’ 表示，如 ‘\\u0061’ 表示字符 a。 不能直接输入的字符，可以使用 转义字符，如 ‘\\n’，‘\\t’，‘\\r’。常见的转义字符序列有： \\ddd(八进制) 、 \\uxxxx(十六进制Unicode字符)、'（单引号）、&quot;（双引号）、\\ （反斜杠）\\r（回车符） \\n（换行符） \\f（换页符） \\t（制表符） \\b（回格符） 2 –&gt; 字符串字面值 字符串字面值则使用双引号引起来的单个或多个字符。如：“I love China” 字符串字面值中同样可以包含字符字面值中的 转义字符序列。字符串必须位于同一行或者使用 + 运算符，因为Java 没有续行转义序列。 Java 字符串字面值中的单引号和双引号不可混用。字符串中包含双引号时，需要对其进行转义处理。 特殊字面值null 是 Java 数据类型中的一种特殊数据类型。 这里将其也看作是一种特殊字面值，它可以赋值给 Java 中的任意 引用类型。 最后，再次重申一遍：字面值就是一个具体的值。 可以看出，Java 字面值和前面我们说过的，Java 标识符和关键字一样，都是 Java 语法中最最基础的定义。","link":"/2017/10/12/java-cheng-xu-she-ji-ji-chu-zhi-zi-mian-zhi/"},{"title":"MarkdownPad2 安装以及常见问题解决教程","text":"Markdown 是一种轻量级的，可以使用 普通文本编辑器编写 的标记语言。它允许所有的写作爱好者（Sharer）可以专注于内容而不是纠结于字体字号行间距等等排版问题（沉浸式写作），使用易读易写的纯文本格式编写文档，然后就可以转化成格式丰富优美的 HTML 页面或 PDF（所思即所得）。 MarkdownPad2 Setup And Crack In WindowsMarkdownPad2 可以在官网得到下载文件，传送门 –&gt; Markdown 官网，点击后自动下载，界面如下： 安装好后直接开始安装，一路 「Next」 即可，安装完成打开后会让升级到豪华版（Pro）。开始破解，点击 「Enter Key」 进入后输入账号密钥。此处提供一个来自网络上的账号（膜拜大佬吧）： Email address : Soar360@live.com License key： 1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== 直接粘贴后点击 「OK」 激活成功！至此 MarkdownPad2 安装以及破解已经完成。 Common Problem &amp;&amp; Solution汉化MarkdownPad2 汉化非常简单，已内置汉化包。选择左上角的 「TOOL」 下的 「option」 后在语言栏选择简体中文即可。 右侧无法预览MarkdownPad2 正常安装完成后，即可直接使用标记语言开始写作了，你可以直接在右侧实时预览效果（F5 开启预览功能）。 Win10 安装打开后，你可能会发现右侧预览栏无法显示: 查阅相关资料后需要安装一个插件: To fix this issue, please try installing the Awesomium 1.6.6 SDK. 安装也是全程 「next」 即可，安装过程如下： 安装成功后，关闭软件再次打开即可正常使用 Markdown 了！ 表格以及代码无法显示使用 Markdown 插入表格和代码有时会发现无法正常显示，事实上，你只需要更改一下 Markdown 处理器就可以了： 中文版： 工具 –&gt; 选项 –&gt; Markdown –&gt; Markdown 处理器改为: GitHub Flavored Markdown(Offling) 英文版： Tools –&gt; Options –&gt; MarkDown –&gt; Markdown Processor –&gt; GitHub Flavored Markdown(Offling) 【持续更新…】","link":"/2017/09/20/markdownpad2-an-zhuang-yi-ji-chang-jian-wen-ti-jie-jue-jiao-cheng/"},{"title":"Python-Vers Management","text":"Foreword 设想 –&gt; 场景一：A 项目是一个爬虫项目，需要用到 requests、pyspider、scrapy 等包或框架；B 项目是一个 GUI 界面项目，需要用到 GUI 相关的包或库；这需要把所有用到的包安装到原生 Python 环境中，开发环境越来越臃肿。场景二：C 项目是一个 Python2.x 项目；D 项目是一个 Python3.x；两项目要求的 Python 版本不兼容。怎么办？！！ 前面提到过一个系统中是可以同时存在多个 Python 版本的，它可以完美的解决上述问题，但是你需要注意新添加的 Python 环境对系统既有环境的影响，这就涉及到系统中多个 Python 版本的管理。 Python-Vers Introduction目前，Python 有两个主流的版本： 分别为：2.x 版本 和 3.x 版本。 Python 3.0 是一次重大的升级，为了避免引入历史包袱，Python 3.0 没有考虑与 Python 2.x 的兼容（不完全兼容），这也就导致很长时间以来，将现有应用从 Python 2.x 迁移到 Python 3.x 是一项不小的挑战。 虽说有 2to3 之类的工具可以进行代码的自动转换，但无法保证转换后的代码 100% 正确。而且，如果不做人工修改的话，转换后的代码性能可能还不如转换前。故很多 Python 2.x 的用户不愿意升级到 Python 3.0 2.x &amp; 3.x 版本的不兼容，引发如下问题： 我们给出一种实际情况 –&gt; 原生 Unix &amp; Linux 系统已经自带有一个版本的 Python2，但它不是我们需要的 Python 版本，我们想要编译安装满足我们需要的 Python 版本（Python3）。那么我们面临一种选择：是在原有版本基础上 Update（2.x –&gt; 3.x） 呢？还是去 Setup 一个新版本的 Python（原生版本 Python 也保留）？ Update 存在的问题 –&gt; 事实上，由于 Python 2.x 和 Python 3.x 兼容性问题，将 Python 2.x 直接升级到 Python 3.x 会产生一些问题（Centos 系统下的很多工具（yum、iotop 等）都依赖原生 Python 2.x 版本），直接升级会无法使用。 Solution –&gt; 所以，一般建议添加安装一个新版本的 Python（与系统原生 Python 版本共存），或着使用虚拟隔离环境 Virtual Envs 进行多版本管理（这里不用深究，Virtual Envs 是一种优秀的 Python 多版本共存管理方案）。 多版本共存管理方案正如博文前言场景二中所描述，实际 Python 开发过程中，多 Python 版本开发环境是我们必然要面对的问题。 关键在于：如何保证多个 Python 版本安装、配置以及使用之间互相不产生影响呢？ 这就是当前小节讨论的内容，这里会对网络上主流的几种方案进行试验、分析，你可以根据自身情况选择一个适合开发场景的解决 Python 多版本共存冲突问题的解决方案。 Using Symbolic Link一个简单、快捷的解决多版本冲突问题的方案 –&gt; 使用软链接 核心思想：在系统原生 Python 版本的基础上，再安装（Add）一个目标版本的 Python 环境，且保证新安装 Python 不会影响原生环境，以实现目标版本和原生版本完美共存。 For Unix &amp; Linux Platform在介绍 Unix &amp; Linux 平台下安装 Python 时，已经给出了具体的解决方法: 1 –&gt; 源码编译安装 注意在使用源码安装过程中，不要勾选有关自动添加环境变量的选项（默认不勾选），安装成功后手动设置即可，否则会影响原生环境。 安装步骤见前面系列博文，这里不再赘述。 2 –&gt; 构建软链接 Unix &amp;&amp; Linux 下可以通过构建多个带有不同版本标识的 Python 软链接： 注意，不要去覆盖原生的 /usr/local/bin/python 或 /usr/bin/python 1234# python 3.5 symbolic linkln -s /usr/local/python3.5/bin/python3.5 /usr/local/bin/python3.5# python 2.7 symbolic linkln -s /usr/local/python2.7/bin/python2.7 /usr/local/bin/python2.7 创建软链接后，在使用 Python 时，我们可以启动相应版本的 Python 了： 12345678# 启动系统原生环境：python# 启动 python2.7 环境：python2.7# 启动 python3.5 环境：python3.5 For Windows Platform那么 Windows 下如何实现呢？Windows 下是通过设置环境变量来达成的。 1 –&gt; 二进制包安装 注意在使用二进制包安装过程中，不要勾选有关自动添加环境变量的选项（默认不勾选），安装成功后手动设置即可，否则会影响原生环境。 安装步骤见前面系列博文，这里不再赘述。 2 –&gt; 配置系统环境变量 推荐修改环境变量中设置的 Python 安装目录路径即可，想用那个版本就指向那个版本。 思考：可能有些同学会将多个 Python 安装目录同时添加到系统的环境变量中，以期待可以同时使用多个版本的 Python。这是有问题的，系统搜索程序或可执行文件的路径（$PATH）是具有优先级的！，路径在系统 PATH 变量中设置越靠前，越先被检索到。 ================================================ 至此，我们就可以在当前系统中同时存在多个 Python 版本供我们选择使用！ 使用软链接 实现多版本冲突问题存在一定的缺陷： 不进行特殊安装、配置记录的话，一段时间后，容易引发系统中的 Python 版本管理混乱； Windows 下各版本 Python 环境切换繁琐，并且极易发生库管理混乱问题； 需要开发人员手动进行 Python 版本的管理，很繁琐。 那有没有更好的 Python 多版本共存的解决方案？？？ 答案肯定是有的！！！ Virtual Envs Tools（Recommended）除了上述给出的方法外，虚拟环境管理工具 是一种完美解决 Python 的多版本共存问题的最优解决方案。 什么是虚拟管理工具？Python 的正式学习之后，相信你肯定会对 “Python 实现其强大功能的前提，就是它具有数量庞大且功能相对完善的标准库和第三方库。通过对库的引用，能够快速实现对不同领域业务的开发。” 有比较深入的理解。 1 –&gt; 为什么引入虚拟环境管理工具？ 引入虚拟环境管理工具 –&gt; 可以帮助你完美解决： 不同学习、开发项目对 Python 环境的要求不同（可能使用 Python2.x，可能使用 Python3.x）; 配合包管理工具（Pip），管理以及维护 Python 中数量庞大的标准库和第三方库，这是复杂也是重要的！ 2 –&gt; 虚拟环境管理工具可以做什么? Virtual Envs Toos 可以创建任意多个虚拟环境（可以看作成一个个容器），使用时指定到（切换到）某一虚拟环境之后 Pip 安装的包、库就只会在这个环境（容器）下；并且各虚拟环境（容器）之间，以及虚拟环境和系统原生环境之间是隔离的（一个个相互独立、隔离的容器）。 假设某一个虚拟环境预计不再使用，可以直接删除掉相应虚拟环境，由于虚拟环境的独立、隔离性，不用关注文件残留、关联问题。 通俗来说，Virtual Envs Toos 可以为每个 Python 项目，甚至每个脚本各自建立一套 “独立、隔离” 的 Python 环境（环境中可以自定义特定的 Python 版本以及特定的依赖库）。NB~ virtualenv &amp;&amp; conda这里给出两种用于解决 Python 多版本共存冲突问题的虚拟环境管理工具（神器）： virtualenv conda virtualenv &amp; conda 都可以进行虚拟隔离环境管理，但两者之间也存在一定的 区别： 准确来说，virtualenv 仅仅是虚拟环境管理器，conda 相当于：virtualenv（虚拟隔离环境） + pip（包管理工具），也就是说 conda 同时具有虚拟环境管理和包管理的功能； 作为包管理器，pip 只能安装 python 的包，而 conda 还可以安装一些不是基于 Python 开发的工具软件，但遗憾的是，相较于 pip，conda 作为包管理器一般且会安装过多依赖。故推荐，在无特殊需求安装应用时，可以先选择使用 pip install packagename 进行安装，如果无法安装的话，再尝试使用 conda install packagename 进行安装。 作为虚拟环境，conda 虚拟环境是独立与于系统原生 Python 环境的，即无论系统 Python 解释器什么版本（哪怕 2.7），你也可以指定虚拟环境中 Python 版本为 3.6；而 virtualenv 是依赖系统主环境的，只能虚拟系统中已安装解释器版本的 Python 环境。 事实上，一般不单独使用 virtualenv 和 conda 工具进行 Python 版本管理，而 选用 virtualenv &amp;&amp; conda 的扩展应用 来进行管理 –&gt; virtualenv –&gt; virtualenvwrapper conda –&gt; anaconda(miniconda) 这里是为了以一种更方便、高效、愉悦的方式来使用 virtualenv &amp;&amp; conda。 篇幅原因，关于 virtualenv(virtualenvwrapper) &amp;&amp; conda(anaconda/miniconda) 的使用方法可见相关系列博文： Pythoner 神器之 virtualenv 一文了解数据科学神器 Anaconda","link":"/2018/01/02/python-vers-management/"},{"title":"Hello Hexo World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start如果你使用的是 Hexo Matery 主题的话，你可以参考系列博文： Hello, Hexo Matery World Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files12$ hexo clean$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Begin To Edit ArticleDoc Front-Matter PolicyFront-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON. YAML 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- JSON 123&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;;;; Front-matter 选项中的所有内容均为 非必填 的。推荐至少填写 title 和 date 的值。 Setting Description Default title Title Filename (posts only) date Published date File created date updated Updated date File updated date tags Tags (Not available for pages) categories Categories (Not available for pages) toc Article Contents false 以下为文章的 Front-matter 示例。 The Simple Demo1234---title: Hello Hexodate: 2017-12-18 00:55:00--- The Most Complete Demo1234567---title: Hello, Hexo Worlddate: 2017-12-18 00:55:00categories: [Markdown, Hexo]tags: [Markdown, Hexo]toc: true---","link":"/2017/09/20/hello-world/"},{"title":"一文了解什么是 Java","text":"Java 是一门经典的面向对象编程语言，是基于 C++ 发展起来的，你可以将其看作是 C++ 的 “纯净” 版，它不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 中难以理解的指针等部分。再加上刚好赶上互联网的“顺风车”，随着 Internet 和 WWW 的迅速发展，Java 成为了越来越受欢迎的语言。尽管经历了近 30 年的技术变革，但 Java 仍然是当前开发基于 Web 的应用程序的最佳选择。 Java 起源及发展–&gt; Java 前身 起初（90 年代初），Sun Microsystems 公司为了开发一种用于编写 “家用电器的小型交互式系统” 的编程语言，如手机、机顶盒、面包机等。由于当时设备平台（硬件和操作系统）多样化，即需要该编程语言具有良好的跨平台能力，而且这些家用设备不足以运行大型程序（小内存），故开发了基于 C++ 的 Oak（橡树）语言。 –&gt; Java 的正式诞生 Oak 语言的诞生，就像 C/C++ 语言的诞生一样，开发者都寄予了很大的期望。但事实上，基于 Oak 语言所开发的智能化家电的市场需求远没有没有预期的那么高，不得以 Sun 公司放弃了该项计划。 绝境中往往孕育着机遇！90 年代随着互联网的迅猛发展，Sun 公司发现 Oak 在互联网上的应用前景，于是再一次做出尝试，改造了 Oak。 1995 年，Sun 公司正式发布了第一个 Java 版本，Java 正式诞生！！！ 2010 年 Oracle（甲骨文）公司收购 Sun Microsystems 公司，之后由 Oracle 公司负责 Java 的维护和版本升级。 随着互联网的迅速发展，定位于网络运算的 Java 语言，特别适合于开发网络应用程序，于是 Java “热” 迅速席卷全球。 Java 开篇Java 不仅仅是一门编程语言，还是一个平台。Java 平台由 Java 虚拟机（Java Virtual Machine，JVM）和 Java 应用编程接口（Application Programming Interface，API）构成。Java 应用编程接口提供了一套独立于操作系统的标准接口，可分为基本部分和扩展部分。 在硬件或操作系统平台上安装一个 Java 平台之后，Java 应用程序就可运行。Java 平台已经嵌入了几乎所有的操作系统，这样 Java 程序只编译一次，就可以在各种系统中运行。 JDK &amp; JRE为了编程人员开发和运行 Java 程序，Sun 公司免费推出了 Java 的开发、运行工具 —— JDK（Java Development Kit，Java 开发工具包）。 有时候，你可能会遇到如下说法： 1 –&gt; Java SDK 我们先来认识一下 SDK： SDK 说法：全称 Software Development Kit，即软件开发工具包，覆盖面很广泛的一个说法。可以这么说：辅助某一类软件开发的相关文档、范例和工具的集合都可以叫做 “SDK”，它为软件的开发提供一个平台。 JDK 是 Java 开发工具包，专为开发、运行 Java 设计而生，是 SDK 的一个子集。 所以，你可以说：JDK 是 Java SDK（Java Software Development Kit），这也没问题。 2 –&gt; Java 2 Java 1.2 版本之后发布的 Java 版本都可以称为：Java 2。 Java 5（Java 7/8/9）：Java 1.5（Java 1.7/1.8/1.9）版本。 所以，现在我们说的 Java，更多的是指 Java 2 平台。 3 –&gt; J2 SDK J2 SDK，全称 Java2 Software Development Kit，包含 JDK、JRE（Java Runtime Environment）等。 JRE：Java Runtime Environment，Java 运行环境，是运行 JAVA 程序所必须的环境的集合。 但要注意的是，JDK 中也包含一套单独的 JRE。 J2 SDK 一般特指 Java 2 平台的 JDK，开发人员必装，可进行 Java 程序的开发、运行。 J2 JRE 就是 Java 2 平台的 JRE，Java 客户端运行必装。如果你只需要运行 Java 程序，只需要安装 JRE 即可。 J2SE &amp; J2EE &amp; J2ME为了推广 Java，根据应用领域的不同，Java 可以分为 3 个体系： 1 –&gt; J2SE J2SE，也称为 Java SE（Java Platform Standard Edition，Java 平台标准版），它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序，是 Java 系统的标准与核心平台。 Java SE 包含了 Java 语言基础、JDBC 操作、I/O 操作、JavaSwing 以及多线程等技术，还提供了支持 Java Web 服务开发的类库。 Java SE 平台体系示意图如下： 2 –&gt; J2EE J2EE，也称为 Java EE（Java Platform Enterprise Edition，Java 平台企业版），帮助企业开发和部署可移植、健壮、可伸缩且安全的服务器端 B/S架构的 Java 应用程序。 Java EE 是在 Java SE 基础上构建的，个人理解就是在 J2SE 平台的基础上，添砖加瓦后出现的。它提供 Web 服务、组件模型、管理和通信 API等： servlet jsp spring mybatis … 3 –&gt; J2ME J2ME，也称为 （Java Platform Micro Edition，Java 平台微型版）， Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。 ============================================== 关系图示： Java 特点Java 语言是一种分布式的面向对象语言，具有面向对象、平台无关性、简单性、解释执行、多线程、安全性等很多特点，下面针对这些特点进行逐一介绍。 面向对象Java 是一种纯面向对象的语言。使用 Java 语言开发程序，需要采用面向对象的思想设计程序和编写代码。 和 C++ 相比，Java 更加纯粹，所有内容都被封装到类中。 1 –&gt; 面向对象的核心： 以更接近人的思维去建立计算机逻辑，利用类和对象对数据和操作的分装到一起，并通过定义统一的接口去和 “外界” 交互，使反映实体的类在程序中能够独立、自治和继承 2 –&gt; 面向对象的程序设计： 从实际问题中抽象出封装了数据和操作的对象，定义其属性和操作，以及接口实现交互，形成一个接近于实际问题的动态对象模式。 简单易学Java 语言是基于 C++ 创建的，所以 Java 语言的风格很像 C/C++ 语言，但要比 C++ 更纯粹。 继承了 C++ 语言面向对象的技术核心，但是拋弃了 C++ 的一些缺点，比如说容易引起错误的指针、操作符重载以及多继承等，同时也增加了垃圾回收机制，释放掉不被使用的内存空间，解决了管理内存空间的烦恼。 基础语法同 C 语言几乎一模一样，便于学习。 平台无关性Java 提出 “Write Once，Run any Where”，即 “一次编写，到处运行”。 Java 编译后产生一种 二进制字节码文件，任何操作系统平台，只要安装有 Java 虚拟机都可以解释执行。并且 Java 中的原始数据存储都是固定的，如任何机器，int 都是 32 位。理所当然，使整数类型平台无关后性能必然下降，但这带来的跨平台特性是值得的。 Java 语言使用 Java 虚拟机机制屏蔽了具体平台的相关信息，使得 Java 语言编译的程序只需生成虚拟机上的目标代码，就可以在多种平台上不加修改地运行。 解释型语言Java 程序在 Java 平台运行时会被编译成字节码文件，在运行文件时，Java 的解释器对这些字节码进行解释执行。 看起来，逐条解释执行，导致单机运行很慢。但事实上，JVM 中采用了即时编译机制（JIT）可以很大程度上的优化，Java 的运行速度也越来越高。 多线程Java 语言是多线程的，但它必须由 Thread 类和它的子类来创建。Java 支持多个线程同时执行，并提供多线程之间的同步机制。 分布式Java 语言支持 Internet 应用的开发，在 Java 的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库，包括 URL、URLConnection、Socket 等。Java 的 RIM 机制也是开发分布式应用的重要手段。 健壮性Java 的强类型机制、异常处理、垃圾回收机制等都是 Java 健壮性的重要保证。对指针的丢弃是 Java 的一大进步。另外，Java 的异常机制也是健壮性的一大体现。 安全性Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防止恶意代码的攻击。 除了 Java 语言具有许多的安全特性以外，Java 还对通过网络下载的类增加一个安全防范机制，分配不同的名字空间以防替代本地的同名类，并包含安全管理机制。 丰富的类库支持Java 中提供了丰富的类库支持，这些类库存放于 Java 系统的各种包（Package）中，有接口、类、异常处理等等 1 –&gt; java.lang Java 语言包，提供了包括字符串处理，多线程处理，数学函数处理等各种基础类。 2 –&gt; java.io Java 输入输出包，用统一的 “流” 模型来实现所有格式的输入、输出。通过数据流，序列化，文件系统提供系统输入输出。 3 –&gt; java.awt/javax.swing Java 图形用户接口包，提供实现不同平台的计算机图形用户接口部件，包括窗口，菜单，滚动条等等组件。 4 –&gt; java.sql Java 数据库包，提供了用户进行数据库操作的驱动程序和应用程序接口。 5 –&gt; java.util Java 应用程序工具包，支持哈希表，堆栈，可变数组，时间和日期，集合框架，事件模型和各种实用工具类（随机数生成器、位数组等等）。 6 –&gt; java.net Java 网络包，提供了实现网络编程的 URL，Socket 编程，还支持 Internet 的 ICP/IP 协议，提供了与 Internet 的接口。","link":"/2017/10/08/yi-wen-liao-jie-shi-me-shi-java/"},{"title":"一文了解数据科学神器 Anaconda","text":"我们知道：Python 是一种面向对象的解释型计算机程序设计语言，其使用具有跨平台的特点，可以在 Linux、macOS 以及 Windows 系统中安装环境并使用。也就是说，其编写的代码在不同平台上运行时，几乎不需要做较大的改动，使用者无不受益于它的便捷性。 此外，Python的强大之处在于它的应用领域范围之广，遍及人工智能、科学计算、Web开发、系统运维、大数据及云计算、金融、游戏开发等等。而实现其强大功能的前提，就是 Python 具有数量庞大且功能相对完善的标准库和第三方库。通过对库的引用，能够实现对不同领域业务的开发。 然而正是由于库的数量庞大，对于这些库的管理维护成为既重要但复杂度又高的事情，这对于 Python 开发人员来说是极不友好的。同时 Python 多版本控制也是 Python 开发过程中极其常见的并且难以管理的。此时，Anaconda 粉墨登场… Anaconda 提供一种使用虚拟隔离环境来解决库管理以及维护问题的策略，它通过 conda 工具解决了 Python 开发者的两大痛点： 提供包管理：功能类似于 pip，Windows 平台安装第三方包经常失败的场景得以解决； 提供虚拟环境管理：功能类似于 virtualenv，解决了多版本 Python 并存问题。 话不多说了，下面我们正式开始 Anaconda 的学习： What Is Anaconda？Anaconda 官方地址：https://www.anaconda.com/ IntroductionAnaconda 就是可以便捷获取包且对包进行管理，同时对环境进行统一管理的开源的 Python 发行版本。其包含了Conda、Python 等 180 多个科学包及其依赖项。 由于包含了大量的科学计算包，Anaconda 的下载文件比较大（约 500 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用 Miniconda 这个较小的发行版（仅包含 conda 和 Python）。 AdvantagesAnaconda 拥有 Conda 包、环境管理器、Conda 包、1,000+ 开源库 等等，Anaconda 还具有如下特点： 开源 安装、配置过程简单 高性能使用 Python 和 R 语言 免费的社区支持 Conda &amp;&amp; Pip &amp;&amp; Virtualenv进行 Python 学习、开发过程中，你肯定听说或者使用过 Pip 包管理工具、Virtualenv 虚拟环境管理器，再加上这里我们提到的 Anaconda、conda 工具。下面我们来横向比较一下这些工具的区别: 1 –&gt; Anaconda Anaconda 是一个包含 180+ 的科学包及其依赖项的 Python 发行版本。其包含的科学包包括：conda, numpy, scipy, ipython, jupyter notebook 等等，你可以将其理解为一个 Python 的开发生态圈。 2 –&gt; conda conda 是包管理工具，也是虚拟环境管理以及维护工具； conda 为 Python 项目而创造，但同样也适用于：Python, R, Ruby, Lua, Scala, Java, JavaScript, C/C++, FORTRAN 等语言； 适用平台：Windows, macOS, Linux； Conda 主要用途： 通过 conda 快速安装、运行和升级包及其依赖项； 使用 conda 可以在计算机中便捷地创建、保存、加载和切换虚拟环境。 前面我们提到过多版本 Pyhton 环境的问题。如果使用 conda ，仅需要几条命令，你就可以创建一个个完全独立的环境来运行不同的 Python 版本，同时你可以继续在系统原生环境中使用你常用的 Python 版本。 3 –&gt; pip pip 是常用的用于安装和管理软件包的 Python 包管理器； pip 编写语言：Python； Python 中 pip 的默认安装： Python 2.7.9 及后续版本：默认安装，命令为 pipPython 3.4 及后续版本：默认安装，命令为 pip3 名称由来：pip 采用的是递归缩写进行命名的。其名字被普遍认为来源于两处： Pip installs Packages（pip 安装包）Pip installs Python（pip 安装 Python） 4 –&gt; Virtualenv virtualenv：用于创建一个独立的 Python 环境的工具； virtualenv 可解决的问题： 当一个程序需要使用 Python 2.7 版本，而另一个程序需要使用 Python 3.6 版本，如何同时使用这两个程序？ 如果将所有程序都安装在系统下的默认路径（如：/usr/lib/python2.7/site-packages），当不小心升级了本不该升级的程序时，将会对其他的程序造成影响。 如果想要安装程序并在程序运行时对其库或库的版本进行修改，都会导致程序的中断。 在共享主机时，无法在全局 site-packages 目录中安装包。 virtualenv 将会为它自定义的虚拟环境创建一个独立的环境，这并不与其他 virtualenv 环境共享库；同时也可以选择性地连接已安装的全局库。 Compare：Conda &amp;&amp; Pip我们已经知道，pip 和 conda 都可以用于安装和管理 Python 相关软件包以及其依赖项。那么它们有什么区别？（5 tips） 1 –&gt; 依赖项检查 pip： 不一定会展示所需其他依赖包； 安装包时或许会直接忽略依赖项而安装，仅在结果中提示错误。 conda： 罗列出所需其他依赖包； 安装包时自动安装其依赖项； 可以便捷地在包的不同版本中自由切换。 注意：同样可以在 conda 虚拟环境中安装的 pip 进行软件包的安装，所以在 conda 封装的独立环境中我们可以同时使用 conda、pip 进行包管理。 2 –&gt; 环境管理 pip：维护多个环境难度较大； conda： 比较方便地在不同环境之间进行切换，环境管理较为简单。 3 –&gt; 对系统自带 Python 的影响 pip：在系统自带 Python 中包的 更新/回退版本/卸载 将影响其他程序。 conda：多版本环境实现隔离，不会影响系统自带 Python。","link":"/2018/01/05/yi-wen-liao-jie-shu-ju-ke-xue-shen-qi-anaconda/"},{"title":"基于图床的博客图片存储解决方案","text":"一个优秀的博客图片存储解决方案—图床。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Pictures use in hexo当你看到这里的时候，应该已经有一个自己的 Hexo 博客了。如果还没有的话，不妨使用 Hexo 和 Markdown 来写博客和文章。 在 Hexo 使用初期，你可能也遇到过和我相似的问题： 一篇添加了本地图片的博文在你的个人博客站点无法预览显示出来。 考虑一下：为什么博客站点中的本地图片无法正常加载显示？ 事实上，这个很好理解，图片是无法直接作为 MD 文本源码的一部分插入的，只能插入图片的地址，这个地址可以是相对 MD 文件的相对路径，也可以是网络图片地址（网络图片事实上也是不可靠的，毕竟来源是第三方的，当网络图片来源被删除时也会丢失，所以很多使用网络图片的博客一段时间后就会发生图像无法显示、缺失）。 这里我们来考虑插入电脑本地图片的场景，Markdown 文档中指定的图片路径就是自己本地的路径，博客站点当然链接不到自己本地的图片了。 这里，我们先来分享一种基本的解决此问题的方法。使用 hexo-asset-image 插件来为博客插入图片： 插件下载在 Git Bash 中，进入 Hexo 站点目录下执行如下命令： 1$ npm install https://github.com/CodeFalling/hexo-asset-image --save Hexo 配置在 Hexo 站点配置文件中，搜索 post_asset_folder 关键字，并将其值设为：true： 1post_asset_folder: true 下载以及设置完成后，当你通过 hexo new “Blog Name” 新建博客后，会在 &lt;Hexo 站点目录&gt;\\source_posts 文件夹下产生一个和博文同名的文件夹（这个和博文同名文件夹可以作为当前博文的图集，远程推送时会被一起推送到远程库中）。 Demo设置后如何进行图像的插入呢？ 当博文需要添加图片时，将需要添加的图片放入和博文同名的文件夹中，同时通过【相对路径】索引到该图片即可。 例如，你想要在博文 post_name.md 中想要插入了一张图片（test.jpg）。首先你需要将图片资源放在同名文件夹 post_name 中，然后使用相对路径就可以引用到图片资源： 1![](test.jpg) 添加后你可以使用 hexo s 开启本地 Hexo 服务预览一下，发现已经可以正常显示图片了~ ========================================== 事实上，这样的使用是存在问题的： 当添加的图片比较多、比较大时，除了自己本地的博客源文件比较臃肿外，还会占用大量本地空间。再加上 Github 仓库的使用，会使得网站部署时非常的慢（推送图集）； 博客中所有的图片都是要部署到仓库的，而仓库容量是受限的，你懂得； 博文中存在大量图片时，会大大降低网页的加载速度，加载的难受啊； 哪里都有玄学….咳咳，之前的博客采用这种方法，不知道什么时候竟然丢失了一部分图片。 ┓( ´∀` )┏ 怎么办？幸好有度娘啊… 一个广泛使用的，优秀的博客图片存储解决方案 —— 图床。 Image HostImage Host（Picture Host），也称为图床。图床？！！ 何为图床？图床是指 用于储存图片，并且可以对外提供图片访问链接 的服务器。 服务器？！！难道博主又要骗我花钱买服务器拉？┓( ´∀` )┏ 事实上，有很多免费的图床可供你选择。国内和国外都有，国外的图床可能由于有空间距离等因素决定访问速度很慢影响图片显示速度（可以通过 CDN 技术实现加速）。国内很多大中小型公司都提供免费的图床服务，注册后就可以使用（真香）。 事实上，图床的本质就是： 将图片保存在网络上，并且可以获得图片的直链地址。 爱思考的看客老爷可能已经反应过来了： 这不就是博主前面说的网络图片链接么？你不是说不可靠么？！不要担心，前面我们使用的网络图片其实是其他人提供的图床。这当然是不可靠的，毕竟你不知道什么时候这些图床就不再提供了！之后我们使用的是自己的图床，这是可控的。 了解了图床的基本概念之后，我们再来看一下图床都有哪些优点： 图床的优点1 –&gt; 图床访问速度快 图床，一般会把图片存储到第三方的 CDN，除了加快图片访问速速，还可以降低你服务器的存储压力，后续网站迁移扩容就不受影响了。 2 –&gt; 博客前瞻性 目前，你可能只是在部署一个个人博客小网站，但是以后无论是自己的博客还是实际的项目，都可以用图片来提供外链，方便管理。 并且如果你的网站访问量很高啊，一天几十万几百万啊，这时候你考虑的就不是服务器空间够不够大，而是惊人的并发数啊，光是请求 HTML 文件（或其他）的链接就处理不过来了，哪还有多余的资源去读取图片啊，索性就把图片存另一个服务器，为主服务器缓解压力。 大致了解了图床的基本概念以及其优点，这里我们来看当前个人博客有哪些具体的图床实施方案？ 图床实施方案说到这里，图床原来就是图片网络链接啊。可能一些爱动手的看客老爷可能已经开始思绪乱飞~ 下面我们来看如何将图片保存在网络上且获得图片的链接地址方案，看客老爷可以根据个人实际情况进行选择： 网盘很多看客老爷可能想到，如果直接把图片放到各类网盘（百度、腾讯、坚果、OneDrive…）是否可行？ 事实上，虽然网盘上传图片方便快捷，免费存储空间又足够，但是网盘中的图片无法获取到链接，或者获取到链接后很快就无法使用了。 直接 Pass…. 自建图床服务器关于自建图床服务器，如果你有一台可供使用的个人服务器，可以尝试使用FTP、Nginx、PHP、MySQL、Chevereto等工具搭建个人图床服务器。 缺点就是，你需要支出必要的服务器等费用，还需要去进行相对繁琐的安装过程才可以使用。 关于自建图床服务器方法，网络上的教程很多。当然你也可关注博主相关系列博客 –&gt; 传送门（未完成，待续…）。 云存储对象腾讯云、阿里云、等云平台都提供有云储存对象支持，可以用作图床使用，配置过程也非常简单快捷。 但是缺点是，虽有免费额度，但使用量较大时，可能产生相关存储流量费用。但贵在对于访问量较少的个人博客使用很便宜甚至免费，具体收费情况可见各云平台。 特别说明，云存储对象的使用可能涉及到实名认证，域名备案等过程。 关于使用云存储对象配置图床，请参见博主相关系列博客 –&gt; 传送门（未完成，待续…）。 第三方免费图床(推荐)上面我们说过，国内外有很多免费的图床可供使用。 在选择一款免费图床平台时，你需要关注的是，图床平台服务商是否可靠，图床的流量限制、储存限制以及访问速度等。 例如：免费存储容量为10G，每月访问流量10G，每小时限制上传 20 张，每张大小小于 10M 之类的，但这对于写MD 远远够了。当然这些第三方服务商也是提供相关的收费服务的，你可以消费提升使用权限。 特别说明，一定要选择相对大平台的服务商，主要是怕图床服务商经营惨淡，挂掉以后图片就丢失了。并且有些第三方免费图床会要求进行实名认证，域名备案等。 ===================================================== 网络上各路主流图床推荐： 1 –&gt; 微博图床 你在查找时，很有可能查到使用微博做为博客图床的教程。 这里特别说明一下，微博图床之前使用人较多，但从2019年开始开启了防盗链，直接凉凉了…. 2 –&gt;七牛云 官网地址：https://portal.qiniu.com 简介：注册认证后有 10G 永久免费空间，每月 10G 国内和 10G 国外流量，速度相当快，七牛云是国内专业 CDN 服务商，插件支持比较多，有免费 SSL 证书，但 HTTPS 流量收费。 图片上传限制：暂无 七牛云 30 天后会回收测试域名，因此你必须要实名认证以及绑定自己的已经备案的域名。 3 –&gt;又拍云 官网地址：https://www.upyun.com 简介：注册认证后有10G永久免费空间，每月 15G 的 HTTP 和 HTTPS 流量，提供两款可以免费续期的 SSL 证书，不过用户需要加入又拍云联盟（即在网站底部添加又拍云 LOGO 及官网链接）。 图片上传限制：暂无 需要实名认证以及绑定自己的已备案域名，又拍云认证比较麻烦，建议使用七牛云。 4 –&gt;路过图床 官网地址：https://imgchr.com 简介：支持免注册上传图片，永久存储，支持 HTTPS 加密访问和调用图片，提供多种图片链接格式。 图片上传限制：最大10M 5 –&gt;SM.MS 官网地址：https://sm.ms 简介：永久存储免注册，图片链接支持 HTTPS，可以删除上传的图片，提供多种图片链接格式，有时速度可能较慢。 图片上传限制：每个图片最大 5M，每次最多上传 10 张 ================================================== 墙裂推荐： 如果想要长期稳定使用，请优先选择七牛云或者又拍云（需要实名认证以及已备案域名），再下来就是路过图床和SM.MS 图床。 图床工具选择好图床之后，你可以选择搭配以下图床工具一起使用以便更高效地使用图床： 图片压缩工具上传图片之前建议压缩一下，一方面可以降低存储，又可以有效加快图片载入速度： TinyPNG –&gt; 传送门 Tiomg –&gt; 传送门 图床工具使用图床工具可以方便我们快速将本地图片转换成图床链接，以方便各位博主使用： PicGo（Molunerfinn/PicGo），是一款比较优秀的图床工具，可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，imgur 等八种常用图床。且功能强大，简单易用。 关于 PicGo 的安装以及配置方法，请参见博主相关系列博客 –&gt; 传送门。 这里，由于篇幅原因，不做赘述。关于博客中图床方案的具体应用参加博文系列：稳定快速、高效免费的图床解决方案-Github-jsDelivr-PicGo","link":"/2017/09/21/ji-yu-tu-chuang-de-bo-ke-tu-pian-cun-chu-jie-jue-fang-an/"},{"title":"打造沉浸式写作体验，你需要试试 Markdown + Editor","text":"Markdown，一款轻量级的，可以使用普通文本编辑器编写的标记语言，打造沉浸式写作新体验。 Markdown + Editor「Action」 夜深人静，房间的门紧闭着，灯也关着。 屏幕发出的亮光隐约勾勒出坐在电脑前码字的你的轮廓。 你脑海中的思绪畅游，无数想法在飞舞，但输出过程却不像脑中的思考那么流畅。 为了打磨用词和造句，你的手不断的从键盘移到鼠标上，只为把光标移到合适的位置。为了快速的调整样式，你虽然记住一些快捷键，但发现依然要先用鼠标选中。 不要小瞧了这看似短暂频繁的切换，稍纵即逝的想法可不会因为你的输出的节奏的中断而停留。 沉浸式写作 的前提，可 不是只要有个安静不受打扰的环境就够了，你还需要让输出的速度跟上你思考的速度。 如果你刻意练习过盲打，那么你会知道提高打字速度的首要条件就是保证打字姿势的稳定，手要保持在键盘上，尽量减少手的移动范围。 可问题是，在写作过程中，如何才能在保持手在键盘上，却依旧能准确的移动光标、调整样式呢？ 答：忘记鼠标，只用键盘就好。 …… 哎哎哎，千万别走，不是在逗你。 相信我，你只需要一个简单的文本编辑器（YOU WANT），再熟练掌握一把“利刃”——Markdown Syntax，就可以开启新世界的大门。 Markdown 初识Markdown 是一种轻量级的，可以使用 普通文本编辑器编写 的标记语言。它允许所有的写作爱好者（Sharer）可以专注于内容而不是纠结于字体字号行间距等等排版问题（沉浸式写作），使用易读易写的纯文本格式编写文档，然后就可以转化成格式丰富优美的 HTML 页面或 PDF（所思即所得）。你唯一要付出的代价就是掌握极其 简单的标记语法。 眼尖尖的同学已经发现：普通文本编辑器编写！？对，你看的没错，只要你手头有任意一款文本编辑器，参照后文中「Markdown Function Demo」标记语法，就可以开始使用 Markdown “随心所欲”了。 敲黑板！！！是不有“急躁”的看官已经默默打开 Windows 自带的记事本准备开始尝试了…？ 初学者警告！！！ 初学 MarkDown 的人，最开始可能会用 Windows 自带的记事本进行编辑，然后baidu，balabala….在线转成 HTML 或 PDF，用自带的浏览器打开查看效果。这种方式是最绿色的不依靠任何其他软件，就可以完成一份高质量的排版，但…实在是太累了。 Windows 自带的记事本没有语法提醒功能，也没有语法高亮功能，还无法 实时预览，对初学者很不友好。往往边写作的同时还要百度语法，这就失去了用 MarkDown 快速办公的意义了（相信看客老爷们愤怒了，你不是说任何普通编辑器就可以编写了！！！前提是你得使用灰常熟练啊~人艰不拆…）。 事实上，使用更多的是： –&gt; 1 Markdown 在线编辑器，推荐一种：MdEditor； –&gt; 2 专门支持用来写 Markdown 的编辑器：MarkdownPad、Typora 等等。 对于新手，选择一款顺手的 Markdown 编辑器是刚需啊… MarkDown 编辑器推荐MarkdownPad2很多初学者的第一选择，支持多操作系统平台，UI 简洁，使用流畅，功能全面，但需要升级到 Pro 版本后（付费升级，可破解）才可解锁所有功能。主要特点：左右分屏实时预览（F5），可自定义添加各种 CSS 样式渲染。 关于 MarkdownPad2 安装以及常见问题解决见: 传送门 –&gt; MarkdownPad2 安装以及常见问题解决教程 。 缺点也很明显，软件 UI 一般般，更重要的是，安装后可能存在一些 Bug，如公式不能正常显示…，需要自行 baidu 解决。 Typora推荐，同样支持多平台（OS X， Windows 和 Linux），UI 界面美观，官网的首页如下： Typora 抛弃了传统的交互模式，它只使用一个窗口，却能优雅地实现同时将代码编辑与预览结合起来！从而为用户带来更加流畅直观的，所见即所得的 Markdown 写作体验。毕竟，对于刚接触 MarkDown 的新手来说，实时预览的功能真的太重要了。 Typora 安装过程很简单，一路 「Next」 即可。 Atom开源世界的巨人，全世界最大的，开源平台，GitHub 出品的编辑器 Atom，也是很多人选择使用的。 和 Typora 不同的是，Atom 并不只是用来写 MarkDown，通过丰富的插件机制支持 CSS，HTML，JavaScript 等各种网页编程语言，常用于 WEB 开发, 也可用于 PHP 等后端开发。 个人建议，可以和 Typora 二选其一（博主没有使用过 Atom，捂脸~）。 事实上，光日常学习和使用有上面几款编辑器已经可以满足你的需要了。 VS Code真正的编辑器神器，强烈安利！ 本人最常用的一款开源的文本编辑器编辑器（Atom 表示很悲伤），不仅用它写 MarkDown 文档，还可以通过丰富的插件机制用它写 Python、C/C++、Java 等等，几乎支持所有的语言。 你只需要下载它，安上 Markdown Preview Enhanced 插件就可以薅微软爸爸的羊毛了。界面效果图如下： 对于使用，篇幅原因，这里不进行详细的赘述。如果你想要详细了解 VS Code 的更多使用方法，可以关注我的相关系列博文。 Markdown 编辑器选择好之后，你就可以开始学习 Markdown 标记语法了： Markdown Function Demo标题演示一级标题：H1 语法规则： # 标题H1 MarkdownPad 中快捷键：Ctrl + 1 二级标题：H2 语法规则： ## 标题H2 MarkdownPad 中快捷键：Ctrl + 2 三级标题：H3 语法规则： ### 标题H3 MarkdownPad 中快捷键：Ctrl + 3 四级标题：H4 语法规则： #### 标题H4 MarkdownPad 中快捷键：Ctrl + 4 五级标题：H5 语法规则： ##### 标题H5 六级标题：H6 语法规则： ##### 标题H6 字符效果和横线演示删除线语法规则： &lt;s&gt;删除内容&lt;/s&gt; 显示效果： 删除内容 斜体字语法规则：*斜体字* &amp;&amp; _斜体字_ 显示效果： 斜体字 &amp;&amp; 斜体字 粗体法规则： **粗体** &amp;&amp; __粗体__ 显示效果： 粗体 &amp;&amp; 粗体 斜粗体语法规则： ***粗斜体*** &amp;&amp; ___粗斜体___ 显示效果： 粗斜体 &amp;&amp; 粗斜体 上下标语法规则：X&lt;sub&gt;2&lt;/sub&gt;, O&lt;sup&gt;2&lt;/sup&gt; 下标：X2，上标：O2 缩写缩写功能，同 HTML 的 &lt;abbr&gt; 标签 即更长的单词或短语的缩写形式，前提是开启识别 HTML 标签，默认已开启。 语法规则： The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;. 显示效果如下： The HTML specification is maintained by the W3C. 分割线 语法规则： --- 字体颜色 语法规则: &lt;font color=blue/red/yellow...&gt; Text &lt;/font&gt; 显示效果： 此处文本为蓝色 此处文本为红色 引用 Blockquotes 文本引用 Blockquotes 引用的行内混合 Blockquotes 规则: &gt; 引用内换行使用&lt;br /&gt;标签，此处换行–&gt;这里为下一行引用文本。 锚点与链接 Links这是一个普通链接 语法规则： [这是一个普通链接](https://www.baidu.com/) 语法规则： [这是一个带标题的普通链接（光标移到此处显示标题）](https://www.baidu.com/ &quot;百度一下&quot;) 这是一个直接链接：https://www.baidu.com 语法规则： 这是一个直接链接：&lt;https://www.baidu.com&gt; 多语言代码高亮 Codes行内代码1Ctrl + k 或者 Tab 或者 ``` ``` 预格式化文本缩进后可用于格式化文本，正常以下内容会显示一个表格（可见下文绘制表格部分：3.8）： 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | JS 代码12345​```javascriptfunction test() { console.log(&quot;Hello world!&quot;);}​``` 显示效果如下： 123function test() { console.log(&quot;Hello world!&quot;);} HTML 代码12345678910111213141516171819​```html&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt; &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;​``` 显示效果如下： 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt; &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 图片链接 语法规则： ![](https://www.mdeditor.com/images/logos/markdown.png)](https://markdownpad.com &quot;markdown&quot;) 可以发现，我们只是把链接中的文本替换为图片，就创建了一个图片链接。 如何插入图片： 语法规则： ![](https://www.mdeditor.com/images/logos/markdown.png) 插入图片效果如下： Follow your heart. 列表 Lists无序列表（减号）Unordered Lists (-)- 列表一 - 列表二 - 列表三 显示效果如下： 列表一 列表二 列表三 无序列表（星号）Unordered Lists (*)* 列表一 * 列表二 * 列表三 显示效果如下： 列表一 列表二 列表三 无序列表（加号和嵌套）Unordered Lists (+)多级列表注意缩进（2 空格），显示效果如下： 列表一 列表二 列表二-1 列表二-2 列表三 列表三-1 列表三-2 有序列表 Ordered Lists 第一行 第二行 第三行 绘制表格 Tables语法规则： 默认标题栏居中对齐，内容居左对齐。 -: 表示内容和标题栏居右对齐，:- 表示内容和标题栏居左对齐，:-: 表示内容和标题栏居中对齐。 内容和 | 之间的多余空格会被忽略，每行第一个 | 和最后一个 | 可以省略，- 的数量至少有一个。 | First Header | Second Header | | ------------ | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | 显示效果如下： First Header Second Header Content Cell Content Cell Content Cell Content Cell 去练习如下样式： 表一 –&gt; Function name Description help() Display the help window. destroy() Destroy your computer! 表二 –&gt; Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 表三 –&gt; Item Value Computer $1600 Phone $12 Pipe $1 特殊符号 HTML Entities Codes &amp;copy; &amp; &amp;trade; &amp;iexcl; &amp;pound; &amp; &trade; &iexcl; &pound; &amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; &amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14; &amp;times; &amp;divide; &amp;raquo; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 18&amp;ordm;C &amp;quot; &amp;apos; 18&ordm;C &quot; &apos; 科学公式 MathJaxMarkdown 文档中引入 MathJax 标签就可以正常显示了，标签内容如下： &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt; 然后你会发现，博文中插入的公式已可以正常显示了： $$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$","link":"/2017/09/20/da-zao-chen-jin-shi-xie-zuo-ti-yan-ni-xu-yao-shi-shi-markdown-editor/"},{"title":"稳定快速、高效免费的图床解决方案-Github-jsDelivr-PicGo","text":"一种稳定快速、高效免费的图床解决方案 —— Github + jsDelivr + PicGo。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Introduction先来对比一下之前博文我们给出的图床解决方案: 自建图床服务器：需要支出必要的服务器等费用，还需要去进行相对繁琐的安装过程才可以使用； 云存储对象：有免费额度，但使用量较大时，可能产生相关存储流量费用，并且需要进行实名认证，域名备案等； 第三方免费图床：流量、储存、图片上传受限，国内大平台图床服务商需要进行实名认证，域名备案等； 其它小众图床：不可靠，随时有挂掉的风险。 使用过 Github 的看官肯定知道，Github 的 Repo 也可以储存东西，最直接的就是程序的版本控制，当然也可以用来当作备份储存。关于存储，Github 官方回复是：该行为不构成 Abuse（滥用）。 因此，GitHub 作为图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效。 并且 GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，速度和容量问题都得以解决，而且完全免费，可以说是目前免费图床的较佳的一种解决方案！ 下面我们来看解决方案的具体实施： New Github Repo登录/注册 GitHub，新建一个仓库。填写好仓库名（HexoImageBed0），仓库描述(Hexo Image Host Repo)，仓库必须设为：public 的，根据需求选择是否为仓库初始化一个 README.md 描述文件: 填好仓库信息后，点击【Create Repository】即可完成 Repo 的创建。 生成一个 Token在主页选择【Settings】： Next –&gt; 点击【Developer settings】: Next –&gt; 依此点击【Personal access tokens】–&gt;【Generate new token】: 进入如下界面： 填写好描述，勾选【repo】，然后点击【Generate token】生成一个如图所示的 Token： 注意：请勿关闭当前页面，这个 Token 只会显示一次，自己先截图保存下来。或者等后面配置好 PicGo 后再关闭此网页。 PicGoPicGo，一款比较优秀的图床工具。 所谓图床工具，就是自动把本地图片转换成链接，以精简用户繁杂的图床上传、下载过程的一款工具，网络上有很多免费图床工具可供使用。 PicGo 可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，Imgur 等八种常用图床，功能强大，简单易用。 PicGo Setup首先，你可以从这里提供的 PicGo 下载链接地址 下载 PicGo下载到最新的 PicGo。下载好后界面如下所示： PicGo 配置安装好后就可以开始配置 Github 图床了: 具体步骤为：【图床设置】–&gt; 【GitHub图床】，配置界面如下： ============================================== 配置内容详解： 设定仓库名：按照【用户名 / 图床仓库名】的格式填写； 设定分支名：【master】； 设定 Token：粘贴之前生成的【Token】； 指定存储路径：填写想要储存的路径，如【Img/】，这样就会在仓库下创建一个名为 Img 的文件夹，图片将会储存在此文件夹中； 设定自定义域名：在图片上传后，PicGo会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接。这里由于我们要使用 jsDelivr 加速访问，所以可以设置为【https://cdn.jsdelivr.net/gh/用户名/图床仓库名 】。使用时，我们就可以通过【https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径】加速访问我们的图片了。 About CDN百度百科：CDN 的全称是 Content Delivery Network，即内容分发网络。 CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。 我们知道，放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开以及资源访问速度，“jsDelivr + Github” 是免费，好用的 CDN 加速方案，非常适合博客网站使用。 jsDelivr 引用资源方法： https://cdn.jsdelivr.net/gh/ {your usrname name}/{your repositry name}@{release version}/{resource file path} 例如： 12# https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0@1.0/images/test.png# https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0@2.0/css/style.css 注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下： 123456789101112131415161718# 加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file# 加载 jQuery v3.2.1https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js# 使用版本范围而不是特定版本https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.jshttps://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js# 完全省略该版本以获取最新版本https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js# 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js# 在末尾添加 / 以获取资源目录列表https://cdn.jsdelivr.net/gh/jquery/jquery/ Quick Start安装配置好 Github + jsDelivr+PicGo 之后，我们就可以进行高效创作了 点击 PicGo【上传区】，将图片拖拽到上传区域，即可自动上传到 Github 仓库（支持多图片上传），注意上传区域下方可设置图床链接格式，默认为 Markdown 格式（可以直接复制到 MD 文档中使用）。 PicGo 还有相册功能，可以快速查看以及复制上传的图片链接。并且可以对已上传的图片进行删除，修改链接等快捷操作。 例如，我们选择默认的链接格式（Markdown），上传完毕后，点击相册，然后复制相应图片链接，示例： 1![](https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0/Img/hexo-picgo-setting.png) 这样的 Markdown 链接格式，可以直接插入到 MD 中使用了。 ======================== PicGo Use Error ======================== PicGo 用了一段时间，可能突然发现偶尔上传图片时报如下错误： 12# 上传失败：服务端出错，请重试# 上传失败：请检查配置和上传文件是否符合要求 解决方法（迷之方法~）： 更改文件名（任何形式的改动）即可成功上传。向服务器上传已存在图片也会上报上诉错误。 ================================================================ 自此，我们就成功搭建起了基于 “Hexo + Github·Pages + Gitee·Pages + Domain + VSCode + TinyPNG + PicGo + Image Host ” 的个人博客。 You need to know more当然了，人无完人。Gihub+jsDelivr+PicGo 图床解决方案也是有缺陷的，你应该了解当前方案的局限： Github Page 容量受限正如 Github 官方给出的说明： Github 没有设置磁盘配额。我们试图为所有 Git 仓库提供充足的存储空间。保持存储库的大小可以确保我们的服务器快速且下载速度快。 如果您经常向 GitHub 推送大型文件，可以考虑将 Git 大型文件存储（Git LFS）作为你的工作流的一部分。Git LFS 可以很好地使用 GitHub 流，并且可以与任何大文件一起使用，不管它的类型是什么。 如果您的存储库超过 1 GB，则可能会收到来自 GitHub 支持的礼貌电子邮件，要求您减少存储库的大小以使其恢复。 也就是说，对于 Github Repo 是没有磁盘配额限制的，但单个仓库存储要低于 1G。 这也就意味着，一旦仓库满额，就得需要重新配置一个新的图床仓库了… Public RepoGithub 中创建的图床仓库必须是 Public，如果是 Pravite，那么图片地址会带有一个随时刷新 Token，这样虽然 Repo 他人不可见，但是也没法作为图床用。 Github Contribution Activity图床每添加一张，就会进行一次 commit，这样会导致你的 Github 动向表部分一片绿……虽然这样显得你很活跃，但是真正点进去会发现你的代码更新并没有你真正提交 commit 的频率高。 小结: Gihub 是一个稳定快速，高效免费的图床解决方案，但绝对不适用于大流量场景，只限于个人小流量博客站点适用。 并且，我们要注意：禁止滥用！！！把 Github 当图床算滥用，那么和把微博当图床使用最终导致被锁理所应当。","link":"/2017/09/21/wen-ding-kuai-su-gao-xiao-mian-fei-de-tu-chuang-jie-jue-fang-an-github-jsdelivr-picgo/"},{"title":"Git 使用指南之初识","text":"在日常项目开发中，我们肯定会或多或少地听说或者使用过 版本管理工具。之前我刚好有幸参与过公司项目版本管理—–SVN 版本控制系统的搭建与管理，再加上项目组日常项目开发使用 SVN，也就没有花费太多精力去学习其它版本管理工具。 初次接触 Git 还是因为常常会从 GitHub clone 一些大佬们开源的深度学习项目以供学习和借鉴，但对 Git 的使用仅限于：git clone XYZ（脸红）。而随着身边越来越多的人开始使用 Git，以及学习和工作需要，才发现：这年头不会点 Git 是真不行啊… 版权说明： 本文思路以及内容主要来自廖雪峰老师的 Git 教程 （强烈推荐膜拜原文），并结合个人使用所作，只作为学习记录使用。如内容有侵权请联系删除，禁止转载！ 更多 Git 相关内容，请关注博主 Git 博文系列： 之一 &gt;&gt;&gt; Git 使用指南之初识 之二 &gt;&gt;&gt; Git 使用指南之时光穿梭机 之三 &gt;&gt;&gt; Git 使用指南之远程仓库 之四 &gt;&gt;&gt; Git 使用指南之分支管理 之五 &gt;&gt;&gt; Git 使用指南之分布式开发 Git 简介和 SVN 类似，Git 也是用于版本控制。Git 是时下最流行的分布式版本控制系统，没有之一。 何为版本控制？我们一直在说版本控制，那么究竟什么是版本控制？ 其实说到版本控制，我总会想到大学毕业写论文时的场景，你电脑上的毕业论文一定也出现过和我一样的场景： 以上就是使用最原始的方式进行版本控制，可以发现 存在着显著缺点： 当保留所有版本文件时，需要为每个版本保存一个文件… 当文档需要多人协同操作时，需要将文件打包发来发去，拿到后还需要修改整合… 容易丢失，被删除意味着永远失去… 为了解决以上版本控制存在问题，应运而生了一批版本控制系统或工具：VSS、CVS、SVN、Git 等，其中 Git 已经成为当前最流行的分布式版本控制系统。通过使用这些版本控制工具，你就结束了手动管理多个 “版本” 的史前时代，进入到版本控制的新世纪。 通过以上样例的解读，下面我们给出关于版本控制更加严格的解读： 版本控制是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理。 通俗来说 &gt;&gt;&gt; 版本控制最主要的功能就是追踪文件的变更。它将什么时候、什么人更改了文件的什么内容等信息忠实地了记录下来。每一次文件的改变，文件的版本号都将增加。 除了记录版本变更外，版本控制的另一个重要功能是并行开发。软件开发往往是多人协同作业，版本控制可以有效地解决版本的同步以及不同开发者之间的开发通信问题，提高协同开发的效率。 Example &gt;&gt;&gt; 例如使用 Git 版本控制工具我们可以清晰、便捷的管理文档的不同版本，如下图所示： Git 的诞生我们知道，Linux 是开源的代名词，Linux 的系统日益壮大是靠全世界热心的志愿者共同参与的，这么多人在世界各地为 Linux 编写代码，那 Linus（Linux 项目发起者） 的代码是如何管理整合的呢？ 事实是，起初世界各地的志愿者把源代码文件发给 Linus，然后由 Linus 本人通过手工方式合并代码！ 你也许会想，为什么 Linus 不把 Linux 代码放到现有的版本控制系统里呢？不是有 CVS、SVN 这些免费的版本控制系统吗？因为 Linus 坚定地反对 CVS 和 SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比 CVS、SVN 好用，但那是付费的，这和 Linux 的开源精神不符。 不过，随着 Linux 系统的不断发展，代码库之大让 Linus 很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是 Linus 选择了一个商业的版本控制系统 BitKeeper，BitKeeper 的东家 BitMover 公司出于人道主义精神，授权 Linux 社区免费使用这个版本控制系统。 没几年，这种安定团结的大好局面就被打破了。原因是 Linux 社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发 Samba 的 Andrew 试图破解 BitKeeper 的协议（这么干的其实也不只他一个），被 BitMover 公司发现了（监控工作做得不错！），于是 BitMover 公司怒了，要收回 Linux 社区的免费使用权。 Linus 可以向 BitMover 公司道个歉，保证以后严格管教弟兄们…… 嗯，这是不可能的。实际情况是这样的：Linus 花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！一个月之内，Linux 系统的源码已经由 Git 管理了！牛是怎么定义的呢？大家可以体会一下。 Git 迅速成为最流行的分布式版本控制系统 。尤其是 GitHub 的上线，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub。 GitHub 是一个基于 Git 的远程文件托管平台。Git 本身完全可以做到版本控制，但其所有内容以及版本记录只能保存在本机。如果想要将文件内容以及版本记录同时保存在免费远程服务器，则需要结合 GitHub 来使用。 集中式 VS 分布式Linus 一直痛恨的 CVS、SVN 都是集中式的版本控制系统，而 Git 是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？ 集中式版本控制系统先说集中式版本控制系统，都有一个单一的集中管理的中央服务器，保存所有的项目版本库。而协同工作的人们首先都需要通过客户端连到这台中央服务器取出最新的文档版本进行修改，修改完成后需要提交更新给中央服务器完成服务器上的修改。 多年以来，这已成为版本控制系统的标准做法。 集中式版本控制系统缺点在于：中央服务器的单点故障。 如果中央服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据————包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。 只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。 分布式版本控制系统那分布式版本控制系统与集中式版本控制系统有何不同呢？ 首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库。这也导致和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。 既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？当然可以相互之间进行推送，但在实际使用分布式版本控制系统时通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便 “交换” 大家的修改，没有它大家也一样干活，只是交换修改不方便而已。 当然，Git 的优势不单是分布式这么简单，后面我们还会看到 Git 极其强大的分支管理，把 SVN 等远远抛在了后面。 Git Setup最早 Git 是在 Linux 上开发的，很长一段时间内，Git 也只能在 Linux 和 Unix 系统上跑。 目前，Git 已经为 Linux、Unix、Mac 和 Windows 等多平台提供了支持。这一部分我们来看如何在不同平台下完成 Git 的安装： Setup For LinuxLinux 平台下，Centos &amp;&amp; Ubuntu OS 中 Git 的安装过程。 Centos Ubuntu Others Linux OS Centos Setup MethodsCentos 中提供了两种 Git 的安装方法： YUM Method Source Code Method（Recommended） YUM Method For Centos Git Setup Cnetos 中采用 yum 的方法进行 Git 安装的详细过程如下： 推荐使用源码方式进行 Centos 下 Git 的安装，可直接跳至下一部分。 1 -&gt; 检测系统是否安装有 Git 123$ gitThe program 'git' is currently not installed. You can install it by typing:sudo yum install git 如果系统已安装 Git，你可以使用 git --version 查看相应的安装版本，确定是否需要重新安装 Git（一般 Centos 系统 Git 版本较低，以 Centos7 为例为：git version 1.8.3.1）。这里我们给出 GitHub 上的 Git 版本发布界面，你可以查看最新的 Git 版本。 如果未安装有合适版本 Git，则继续执行下面步骤： 2 -&gt; Git 安装 登陆待安装服务器，输入如下命令进行下载安装： 1234567891011121314151617181920212223242526272829303132333435363738$ yum install git##### 日志信息如下：已加载插件：fastestmirror, langpacksgitlab_gitlab-ee/x86_64/signature | 836 B 00:00:00 gitlab_gitlab-ee/x86_64/signature | 1.0 kB 00:00:00 !!! gitlab_gitlab-ee-source/signature | 836 B 00:00:00 gitlab_gitlab-ee-source/signature | 951 B 00:00:00 !!! Loading mirror speeds from cached hostfile * base: centos.ustc.edu.cn * extras: centos.ustc.edu.cn * updates: centos-mirror.rbc.ru正在解决依赖关系--&gt; 正在检查事务---&gt; 软件包 git.x86_64.0.1.8.3.1-14.el7_5 将被 升级--&gt; 正在处理依赖关系 git = 1.8.3.1-14.el7_5，它被软件包 perl-Git-1.8.3.1-14.el7_5.noarch 需要---&gt; 软件包 git.x86_64.0.1.8.3.1-20.el7 将被 更新--&gt; 正在检查事务---&gt; 软件包 perl-Git.noarch.0.1.8.3.1-14.el7_5 将被 升级---&gt; 软件包 perl-Git.noarch.0.1.8.3.1-20.el7 将被 更新--&gt; 解决依赖关系完成依赖关系解决========================================================================================================================================================================================================== Package 架构 版本 源 大小==========================================================================================================================================================================================================正在更新: git x86_64 1.8.3.1-20.el7 updates 4.4 M为依赖而更新: perl-Git noarch 1.8.3.1-20.el7 updates 55 k事务概要==========================================================================================================================================================================================================升级 1 软件包 (+1 依赖软件包)总下载量：4.4 M 接着服务器会询问是否进行安装，输入 y，然后等待安装完成即可（接上）： 1234567891011121314151617181920212223242526272829303132## 日志信息如下：总下载量：4.4 MIs this ok [y/d/N]: yDownloading packages:updates/7/x86_64/prestodelta | 182 kB 00:00:04 Delta RPMs reduced 4.4 M of updates to 2.6 M (41% saved)(1/2): perl-Git-1.8.3.1-14.el7_5_1.8.3.1-20.el7.noarch.drpm | 28 kB 00:00:02 (2/2): git-1.8.3.1-14.el7_5_1.8.3.1-20.el7.x86_64.drpm | 2.6 MB 00:00:18 Finishing delta rebuilds of 1 package(s) (4.4 M)----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------总计 126 kB/s | 2.6 MB 00:00:21 Running transaction checkRunning transaction testTransaction test succeededRunning transaction 正在更新 : git-1.8.3.1-20.el7.x86_64 1/4 正在更新 : perl-Git-1.8.3.1-20.el7.noarch 2/4 清理 : git-1.8.3.1-14.el7_5.x86_64 3/4 清理 : perl-Git-1.8.3.1-14.el7_5.noarch 4/4 验证中 : perl-Git-1.8.3.1-20.el7.noarch 1/4 验证中 : git-1.8.3.1-20.el7.x86_64 2/4 验证中 : git-1.8.3.1-14.el7_5.x86_64 3/4 验证中 : perl-Git-1.8.3.1-14.el7_5.noarch 4/4 更新完毕: git.x86_64 0:1.8.3.1-20.el7 作为依赖被升级: perl-Git.noarch 0:1.8.3.1-20.el7 完毕！ 3 -&gt; 验证安装是否成功 输入命令： git --version，查看安装好的 Git 版本，验证是否安装成功： 12[root@node3 ~]# git --versiongit version 1.8.3.1 接下来来看，Centos 中采用 源码包 的方法进行 Git 安装的详细过程： Source Code Method For Centos Git Setup（Recommended） 我们会发现，使用 yum 安装之后 Git 版本和当前最新版本之间仍然差很多版本号（Git 版本号不太好控制，取决于系统中 yum 源中最新 Git 版本），那么如何解决这个问题？ 除了使用 yum 安装，还可以使用 Git 源码进行编译安装，我们可以根据需要下载相应版本的 Git 源码包进行安装（源码下载请前往：Git 版本发布界面）。下面我将给出 Centos7 下如何通过源码安装 Git v2.20.0： 安装前我们首先需要移除系统原有 Git： 1[root@node3 Download]# yum remove git 1 -&gt; 在目录 Download 中下载相应 Git 版本源码包： 1[root@node3 Download]# wget https://github.com/git/git/archive/v2.20.0.tar.gz 2 -&gt; 解压 v2.20.0.tar.gz 安装包： 12345[root@node3 Download]# tar -zxvf v2.20.0.tar.gz# 查看当前目录，可看到解压文件：[root@node3 Download]# lsgit-2.20.0 v2.20.0.tar.gz 3 -&gt; 准备编译环境，否则后续安装可能发生 Error： 123[root@node3 Download]# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker# 等待安装或更新完成即可... 4 -&gt; 进入解压文件目录 git-2.20.0，然后进行 Git 源码的配置、编译以及安装命令，耐心等待即可： 12345678910111213141516171819[root@node3 Download]# cd git-2.20.0# 配置 Git 的安装路径：[root@node3 Download]# ./configure prefix=/usr/local/git/|--------------------------------------------------------------|### 注意此处可能报错：'-bash: ./configure: 没有那个文件或目录'。# 按照如下步骤解决：# 生成 configure：$ make configure $ ./configure prefix=/usr/local/git/# 如果 make configure 的时候报错：/bin/sh: autoconf: command not found$ yum install install autoconf automake libtool|--------------------------------------------------------------|# 编译以及安装 Git 源码：[root@node3 Download]# make &amp;&amp; make install 5 -&gt; 配置环境变量： 1234567# 打开系统配置文件：/etc/profile[root@node3 Download]# vim /etc/profile# 添加如下环境变量：export PATH=$PATH:/usr/local/git/bin# 激活环境变量：$ source /etc/profile 6 -&gt; 验证安装是否成功: 12[root@node3 Download]# git --versiongit version 2.20.0 Ubuntu Setup Methods较新版本的 Debian 或 Ubuntu Linux 系统一般都自带较高版本的 Git。如果没有，直接可通过下列命令就可以完成 Git 的安装: 1$ sudo apt-get install git 老一点的 Debian 或 Ubuntu Linux，要把命令改为: 1$ sudo apt-get install git-core 这是由于：有个软件也叫 GIT（GNU Interactive Tools），结果 Git 就只能叫 git-core 了。由于 Git 名气实在太大，后来就把 GNU Interactive Tools 改成 gnuit，git-core 正式改为 git。 Other Linux OS Setup Methods其它版本 Linux 可以统一采用源码安装，具体安装方法不一一列出，使用时请自行百度。 Setup For Windows这一部分我们来看 Win 平台下如何安装和配置 Git（未提到安装页面选择默认即可）： Setup Tips1 -&gt; 从 Git 官网下载一个 Git For Windows 安装包（官网下载地址，这里我们再提供一个 国内下载站点）： 2 -&gt; 双击安装程序，进入欢迎界面阅读协议，然后点击 【 Next 】： 3 -&gt; 选择 Git 安装位置，点击 【 Next 】： 4 -&gt; 选择安装组件：推荐使用默认选项，然后点击 【 Next 】： 图标组件（Additional icons）：选择是否创建快速启动图标和桌面快捷方式 桌面浏览（Windows Explorer integration）使用 Git Bash 方式、Shell 方式 是否关联 Git 配置文件：该配置文件主要显示文本编辑器样式 是否关联 Shell 脚本文件：是否关联 Bash 命令执行脚本文件 使用 TrueType 编码：在命令行中是否使用 TrueType 编码，该编码是微软和苹果公司制定的通用编码 5 -&gt; 在开始菜单创建快捷方式，然后点击 【 Next 】： 6 -&gt; 选择默认的 Git 编辑器（默认 VIM），然后点击 【 Next 】： 7 -&gt; 设置环境，设置命令行工具（默认配置即可），然后点击 【 Next 】： Git自带：使用 Git 自带的 Git Bash 命令行工具； 系统自带以及第三方软件：使用 windows 系统以及第三方软件命令行工具； Git 自带和 Unix Tools：注意，这样会将 windows 中的 find.exe 和 sort.exe 工具覆盖，如果不懂这些尽量不要选择。 8 -&gt; 选择换行格式，然后点击 【 Next 】： 检查出 Windows 格式转换为 Unix 格式：将 Windows 格式的换行转为 Unix 格式的换行再进行提交; 检查出原来格式转换为 Unix 格式：不管什么格式的，一律转换为 Unix 格式的换行再进行提交； 不进行格式转换：不进行转换，检查出什么格式就提交什么格式。 9 -&gt; 配置 Git bash 终端仿真器（默认即可），然后点击 【 Next 】： 使用 MinTTY 终端 使用 Windows 默认的命令行 10 -&gt; 性能配置，是否启用文件系统缓存（默认即可），然后点击 【 install 】 等待安装完成即可： Git EnvsVar Config有时安装完成以后可能在 Windows CMD 中无法正常使用 Git，可以将 GIT_HOME/bin 添加到系统环境变量 path 中，就可以在 CMD 中正常使用 Git了。 Git Bash Here上面我们已经完成了 Git 的安装以及配置过程，这里我们可以尝试在 Windows 下打开 Git Bash 来看一下： 是不是不同于我们熟悉的 Linux shell 或者 Windows CMD？！！下面给出一种 Git 控制台美化方法： Git 控制台格式以及字体美化，详细优化过程如下： 1 -&gt; 下载必要的配置文件： 123456789### Git 控制台中 clone 美化配置仓库：$ git clone https://github.com/shaonianruntu/Git-setting.git# 查看项目可以发现有 3 个文件：$ ls Git-settingbash_profile_course git-completion.bash git-prompt.sh### Git 控制台中 clone 字体文件仓库：$ git clone https://github.com/shaonianruntu/YaHei-Consolas-Hybrid-1.12.git 2 -&gt; 配置格式以及字体 1234# 将 git-completion.bash 配置文件 copy 当前用户主目录；# 将 git-prompt.sh 配置文件 copy 当前用户主目录；# 将 bash_profile_course 配置文件 copy 当前用户主目录，如果当前用户主目录中已存在名为 .bash_profile 的文件，则将 bash_profile_course 中的内容复制并粘贴到 .bash_profile 的尾部。如果不存在，通过 mv 命令将 bash_profile_course 重命名为 .bash_profile。 自此，关闭 Git Bash 再重新打开，你会发现其格式已经变为我们熟悉的 Linux Shell 样式： 有一个 Yahei 和 Consolas 的混合字体，相当漂亮，很适合在 Windows 平台下编程使用，我们之前已经从 GitHub 上 clone 了下来。下面我们通过 注册表配置 来将其应用于控制台： 12345# Win+R 输入 regedit 命令打开注册表。# 在 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont] 设置：“936” = ”YaHei Consolas Hybrid”","link":"/2017/07/01/git-shi-yong-zhi-nan-zhi-chu-shi/"},{"title":"Hexo 博客多设备协同管理问题【持续更新】","text":"优秀的 Hexo 博客多环境、多设备协同管理方案。 前面我们已经成功搭建了基于 Hexo + Github·Page + Coding·Page + Domain + VSCode + TinyPNG + PicGo + Image Host 的个人博客环境。系列博文中给出了 Hexo 新手小白如何快速搭建基于 Hexo 的个人博客进行产出。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 前面我们提到过，hexo d 仅仅是将 Hexo 博文静态页面（public）推送到了远程仓库（Github·Page 或 Coding·Page）上以实现公共访问，而 Hexo 个人博客框架相关配置信息都存放在本地终端。如果未进行其它备份或同步处理，一旦存放 Hexo 配置信息的本地终端出现问题（如系统崩溃），那么我们便无法再维护我们的的博客了，Game Over… 所有当我们更换工作环境（公司、个人）或者原来用于搭建 Hexo 博客环境的设备需要重新更换系统，出于安全性以及灵活性考虑，我们不得不面对的一个问题就是： 如何将本地终端中的 Hexo 博客相关配置信息完美移植到新环境或保持不同创作环境同步是至关重要的。 使用 Git 解决 Hexo 个人博客多平台同步管理关于 Hexo 博客多平台（多设备）协同管理以及更新教程网络上有很多，但对于刚刚接触 Hexo 、Git 的小白们不太友好，配置过程中容易出现各种问题，本文提到的所有配置方案均通过实际测试给出。 本文所作的主要目的：一方面作为学习记录回顾使用；另一方面适用于类似我这样的 Git 新手以供参考分享，可以快速对应以及解决问题。所以文中有些地方可能表达有误，欢迎各位大佬指正。 模拟场景公司和家里两台 PC： 公司 PC_A：最初用于搭建 Hexo 个人博客的终端； 个人 PC_B：移植 Hexo 个人博客项目的终端。 为了可以随时随地创作更新个人 Blog，两台 PC 中都必须搭建有相同的 Hexo 博客环境，并这必然要求我们的 Hexo 博客本地配置项目要保持同步（即实现版本控制）。 对于 同步 问题： 由于除了静态页面 以外，其它全部文件都在本地生成，所以如果在公司终端上推送了 articleA 文章后回家又写了篇 articleB 文章，在家里推送后我们会发现只有 articleB 文章而 articleA 文章没了（因为家里的 PC 上没有 articleA 文章的 md 文件），故及时同步两台 PC 终端中的 Hexo 博客项目相当重要。 也就是说，对我们的 Hexo 个人博客本地项目实现版本控制是必要的。 — important split line — 这里，我们首先给出新设备环境，解决 Hexo 个人博客多平台同步管理的通用步骤： 搭建 Hexo 个人博客环境，包括： Node.js、Git 以及 hexo 的安装，具体安装方式可见前面提到的搭建教程。 对 Hexo 个人博客本地配置信息项目实现同步，也就是版本控制。 实施方案分析介于模拟场景提到的解决方法，搭建 Hexo 个人博客环境本文不在做细致说明，参考前面教程即可。针对同步（备份），这里我们给出三种具体的版本控制（同步、备份）的实施方案分析： 存储设备备份使用存储设备备份，是指我们使用存储设备对 Hexo 个人博客项目本地文档进行备份。例如，我们可以直接对 PC_A 中最新的本地 Hexo 博客目录进行打包存储到硬盘、U盘或者云盘（大多数使用）中，然后将其移植 PC_B 中进行直接使用。 下面我们来分析其优略： 1）优点： 免费且操作简单快捷。 在某些场景下可以很快完成移植，而不需要进行额外的同步设置。例如，当我们的电脑需要重装系统时，我们可以直接将最新的 Hexo 博客项目进行打包，新系统中搭建好 Hexo 个人博客环境后，直接解压几乎就可以使用了。 2）缺点： 对于硬盘、U盘等设备，备份后的同步十分麻烦，每次其它终端都需要手动下载备份最新的 Hexo 博客文件夹，进行手动覆盖。 目前大多数云盘，可以开启云端自动备份功能，写完 Blog 后可以自动备份（同步）到云端。但是很容易产生一些云盘内部文件，影响 Hexo 解析产生一些不可预期的错误。 因此，使用存储设备备份使用的很少。 第三方代码仓库备份鉴于之前我们将 Hexo 个人博客产生的静态页面托管到了一些第三方 Git 服务平台，以实现远程访问。同样，类似于代码托管，我们可以将我们的 Hexo 个人博客项目本地配置信息文档托管到远程仓库进行版本控制，以实现多设备的同步管理。这是 目前最合理，并且使用最多 的解决方案。 使用第三方代码仓库进行备份是目前普遍使用的对 Hexo 个人博客进行备份同步的方法。 国内外现在知名的 Git 服务提供商主要有： Github、Coding 以及 Gitee（码云）等等，使用上没有比较大的差异，但国内站点访问较快。 下面我们来分析其优略： 1）优点： 部署完成后同步非常方便，Hexo 更新完后只需要再更新（push）全站到 Git 远程仓库即可。 2）缺点： 部署过程相对比较麻烦，对 Git 新手不友好，但这仅仅是 Git 使用上的问题，不是难点。 对于使用第三方代码仓库（以 Github 为例）进行备份的方法，目前主流的有两种方法： 分支备份法：我们知道，Hexo生成的静态博客文件都是上传到 GitHub 上的, 且默认放在 master 分支上。分支备份法是将本地的 Hexo 相关环境配置文件都推送到对应仓库新创建的分支上（如 hexo 分支），以实现备份。 将本地整个 Hexo Blog 项目进行备份：创建一个新的仓库用来对本地环境配置文件进行版本管理以及备份。 实施方案细则下面我们将以前面提到的实施方案给出其具体的操作指南，你可以根据需要选择不同的实施方案： 方案一：Hexo Envs + Cloud Service–&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：一文学会 Hexo 轻量级框架的博客搭建【持续更新】 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo –&gt; 步骤二：yunpan1）将 PC_A 终端中 Hexo 个人博客项目目录进行打包（打包格式任选，在 PC_B 中可以实现快速解压即可），备份到云盘。 2）然后在 PC_B 中从云盘下载已经上传好的 Hexo 个人博客项目压缩文件，然后进行解压。 3）PC_B 中开启 Hexo 服务，然后打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 4）Hexo 个人博客本地测试通过后，由于更换设备，我们需要为Hexo Github·Page（Coding·Page）仓库配置新设备的 SSH Key。此时只需要将新设备（PC_B ）的 SSH Key 添加到 Github（Coding）中即可。如果不进行设置，当使用 hexo d 进行推送时无法成功，原因在于 Hexo 无法连接到 Github·Page（Coding·Page）。 关于新设备创建 SSH Key 方法以及为 Github 配置 SSH Key 可参加：Git 使用指南之远程仓库。 除了上述添加方式外，还有一种更简单的方式，我们可以将 PC_A 生成的 .ssh 文件直接放到 PC_B 设备当前用户目录下即可。 自此，设置完成。这种方法缺点很明显，操作太繁琐，对于同步很不友好！！！ 方案二：Hexo envs + hexo 备份（Recommended）这一小节，我们来看如何将本地整个 Hexo Blog 项目进行备份。即创建一个新的仓库用来对本地环境配置文件进行版本管理以及备份。 关于 Git 远程仓库的选择，Github or Coding or Gitee 三选其一即可，这里以 Github 为例，推荐使用 Coding or Gitee。这也就意味着： Hexo 博客静态页面托管到一个仓库，Hexo 博客配置托管到另一个远程仓库。 –&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：一文学会 Hexo 轻量级框架的博客搭建【持续更新】 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo 步骤一和方案一种中完全一样，实现 PC_B 上 Hexo 环境的部署。 –&gt; 步骤二：hexo 项目备份注意，这一部分操作全部在 PC_A（保存了 Hexo Blog 最新进度）上进行，用于将本地整个 Hexo Blog 项目托管到 Github 上的一个全新仓库（以创建 HexoBackups 为例）。 首先，添加设备 SSH Key 到 Github 以提供访问权限（在搭建 Hexo 环境时已经添加过），并且在 Github 中创建 HexoBackups 仓库（操作方法可见：Git 使用指南之远程仓库）。 1）删除 Hexo 站点目录主题路径（Hexo站点目录\\themes）下原有的 .git* 缓存文件夹，并编辑站点目录中的 .gitignore 文件。 有些插件或者主题是从 Github 上 clone 过来安装的，每个文件夹下都会有对应的 .git 文件夹，记得先删掉，否则会和 Blog 仓库冲突。（.git 默认是隐藏文件夹，需要先开启显示隐藏文件夹。.git 文件夹被删除后整个文件对应的 Git 仓库状态也会被清空，避免冲突） 编辑 .gitignore 文件的作用是声明不被 Git 记录的非必要文件（我们希望将必要的 Hexo 配置文件进行版本控制，而不是所有文件）。Blog 站点目录下的 .gitignore 是 Hexo 初始化时生成的，可以先删除或者直接编辑，对 Hexo 不会有影响。我的 Hexo 默认 .gitignore 文件内容如下： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ .deploy_git 是 Hexo 默认的 .git 配置文件夹，不需要同步； public 内文件是根据 source 文件夹内容自动生成，不需要备份，不然版本仓库每次修改内容太多； node_modules 目录中存放了 Hexo 个人博客所需的所有插件，太大，使用时通过 npm install 安装即可。 .DS_Store、Thumbs.db、*.log 、db.json 等均属于非必要文件。 2）初始化本地仓库 Hexo Blog 站点目录下执行以下代码： 123# &lt;server&gt; 是指远程备份仓库的地址（HexoBackups）；origin 是本地分支；remote add 操作会将本地仓库映射到云端 git initgit remote add origin &quot;Repository Addr&quot; “Repository Addr” 即上面创建的用于备份的仓库：HexoBackups 的仓库地址。 3）添加本地文件到本地仓库并同步到远程 Github 上 123456# 添加 Hexo Blog 站点目录下所有文件（.gitignore 声明过的文件不包含在内)git add .# 添加更新操作说明git commit -m &quot;Hexo Blog Backups&quot;# 推送更新到云端服务器git push -u origin master 在执行这步之前一定要注意检查下 .gitignore 文件的内容，看看是否正确的把一些文件夹忽略掉了。如果加错了的话可以用： 1git rm -r --cached . 自此，我们已经成功将本地 Hexo 博客配置文件推送到了 Github 远程仓库 HexoBackups 中实现版本控制。 –&gt; 步骤三：其它设备终端克隆测试1）添加 SSH Key 到 GitHub 首先，我们需要将设备 PC_B 的 SSH Key 添加到 GitHub 以提供访问权限。 2）将 Hexo Github 仓库内容同步到本地 之前我们已经成功将 PC_A 电脑里的 Hexo 配置信息备份到 Github HexoBackups 仓库了。 现在在 PC_B 电脑准备通过为本地仓库配远程 Hexo Github 版本仓库以实现 Hexo 配置信息同步。 123456789# 创建本地博客目录mkdir HexoBlogProjectcd HexoBlogProjectgit init# 将本地文件和云端仓库映射起来。这步不可以跳过git remote add origin &quot;Repository Addr&quot;git fetch --allgit reset --hard origin/master 当然我们还可以直接 git clone 将 HexoBackups 仓库中的 Hexo 博客配置文件拉取下来： 1git clone &quot;Repository Addr&quot; 3）安装依赖插件 同步后需要安装相应的 Hexo 插件（这是由于我们之前备份时未备份 node_modules 插件目录），否则无法正常使用 Hexo： 1npm install 4）localhost 测试 PC_B 中打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 方案三：Hexo envs + hexo 分支备份和方案二中备份整个 Hexo 本地配置信息文件到一个新仓库不同的是，分支备份是在原 Hexo 静态页面托管仓库（username.github.io）重新创建一个分支（以 hexo 分支为例）来备份 Hexo 本地配置信息文件。 最终，username.github.io 仓库的 master 分支和 hexo 分支各自保存着一个版本： master 分支用于保存 Hexo 博客静态资源，提供博客页面以供人访问；hexo 分支用于备份博客部署文件，供自己维护更新，两者在一个 username.github.io 仓库内也不会有任何冲突。 -&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo 步骤一和方案一种中完全一样，实现 PC_B 上 Hexo 环境的部署。 –&gt; 步骤二：hexo 分支备份注意，这一部分操作全部在 PC_A（保存了 Hexo Blog 最新进度）上进行。 和 方案二 中备份过程类似，这一部分给出 Hexo 分支备份通用流程，关于操作解读可对应 方案二 中的步骤二。 12345678910111213141516171819# 消除 Git 仓库冲突rm -rf Hexo站点目录\\themes\\主题目录、.git*# 即 Hexo 博客根目录cd Hexo站点目录# 初始化本地仓库git init# 将本地与 Github 远程仓库进行对接git remote add origin git@github.com:user/user.github.io.git# 添加 Hexo Blog 站点目录下所有文件（.gitignore 声明过的文件不包含在内)git add .# 添加更新操作说明git commit -m &quot;Hexo Blog Backups&quot;# 创建名为 hexo 的分支git checkout -b hexo# 推送分支到 GitHubgit push origin hexo –&gt; 步骤三：其它终端克隆测试1）添加 SSH Key 到 GitHub 首先，我们需要将设备 PC_B 的 SSH Key 添加到 GitHub 以提供访问权限。 2）克隆 Hexo 博客环境 123# 将 Github 中 hexo 分支 clone 到本地git clone -b hexo git@github.com:username/username.github.io.gitcd user.github.io 3）安装依赖插件 12# 安装 Hexo 博客中使用到的插件npm install 4）localhost 测试 PC_B 中打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 Git + Hexo 管理博文这一部分我们来看加入版本控制后，如何进行 Hexo Blog 的多平台协同创作 （Git + Hexo）？ –&gt; 步骤一：发布静态页面 假设在 PC_B 电脑上写完了文章，然后进行发布： 1$ hexo d -g –&gt; 步骤一：同步 Hexo 最新配置 接下来，我们还需要将新文章的 .md 文件推送到备份仓库。（其实就是提交更新给 Hexo Github 备份仓库）： 1$ git add . 这时候可以用 git status 查看状态，一般会显示刚刚更改过的文件状态。如： 123456On branch masterChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) modified: db.json new file: source/_posts/test.md 上面的输出状态即说明 db.json 文件做了更改，source/_posts 目录下新增了 test.md 文件。 然后对更改添加说明并推送到远程仓库： 123456git commit -m '更新信息'# 推送git push# 或者（取决于整体备份还是分支备份）git push origin hexo 当显示类似如下提示的时候，即表示备份成功： 12To git@git.oschina.net:xxxx/HexoBackups.git + 2c77e1e...5616bc6 master -&gt; master (forced update) 再回到到 PC_A 电脑上的时候，我们需要拉取最新的 Hexo 配置信息到本地以实现本地仓库和远程仓库一致： 1234# 拉取最新版本git pull# 或者（取决于整体备份还是分支备份）git pull origin hexo 即可实现 Hexo 博客同步更新以及协同管理。 自此，基于 Hexo + Github·Page + Coding·Page + Domain + VSCode + MarkDown + TinyPNG + PicGo + Image Host + Git 框架的 Hexo 个人博客创作生态已经建立。 常见问题Hexo 博客使用过程中的 真·疑难杂症： hexo init 卡死Hexo 搭建个人博客时，调用 hexo init 命令一直卡住不动： 12$ hexo initINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.git 这就很困惑了，npm 已经使用了淘宝源，node.js &amp;&amp; npm 版本也比较新，就是 hexo init 不成功…. 此时查看 Hexo 站点路径，发现目录已经出现clone的文件目录结构： 12345678.gitscaffoldssourcethemes.gitignore_config.ymldb.jsonpackage.json 网上查找原因，应该是 Hexo 主题未能成功下载（子模块未能成功下载），可以在 .gitmodules 查看相关信息： 123submodule &quot;themes/landscape&quot; path = themes/landscape url = https://github.com/hexojs/hexo-starter.git 通过查看站点目录下的 themes 目录，发现确实没有相应主题。 –&gt; 解决方法： 为 Git 配置代理： git config –global http.proxy http://proxyuser:proxypwd@proxy.server.com:port 当然，你也可以等待网络流畅时重新进行 hexo init，说不定下一次执行就成功了。 npm install 很慢很慢安装 Hexo 博客相关依赖插件时，我们需要使用 npm install 下载进行安装。但是执行指令后一直没反应，这是由于 npm 官方资源被墙，我们可以为其更换一个国内源： 1npm config set registry https://registry.npm.taobao.org 当然，当我们的 Hexo 个人博客使用较多的插件时，npm install 可能看起来很慢（好像卡在某一个安装语句不再执行），此时我们可以通过 Hexo 站点目录下的 node_modules 目录更新时间来判断。 如果 node_modules 目录下各种插件文件更新时间长时间不发生变化，就意外着安装已停止，Ctrl + c 即可。 Git 监测不到空文件夹Git 无法监测到空文件夹，也就意外着无法将空文件夹 git add、git commit -m &quot;&quot;、git push 推送到远程仓库，这会导致 Hexo 博客项目中丢失一些空的功能文件夹。这应该算是 Git 的设计失误。 解决方法： 需要在空文件夹中添加一个占位文件。主流做法是在空文件夹里放置一个 .gitkeep 文件。加个 .gitconfig 文件在里面比较实用，也不会觉得突兀，虽然绝大多数时候这个文件不起作用。 Hexo 推送错误距离上次写博文已经有一段时间了，今天想将最近写好的博文推送到远程仓库，却发现推送不上去了，WTF？？！ 错误信息提示如下： ssh: connect to host github.com port 22: Connection timed outfatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists. 然后进行了连接测试，果然发现连接有问题： 123$ ssh -T git@github.com# 和$ ssh -T git@gitee.com 从报错信息可以看出 GitHub 连接超时，去 ping github.com 也是正常的，浏览器也可以正常访问 Github，于是认为应该不是网络的问题。 第一反应是 SSH 配置出问题了，于是删除掉 .ssh 文件，重新生成并配置 Github SSH 公钥。配置完成之后再次推送，还是上述问题！！！ 于是开始 Google 解决问题了。网络上主流思路是“上述问题是由于 22 端口被占用了，修改一下访问端口就好使了！”，这种方法想要同时解决 Github &amp; Gitee 推送是有问题的，不要尝试了！！！ 当时采用切换端口的思路，使用 ssh -T -p 443 git@ssh.github.com 进行网络测试，确实是可以连接到的。于是从端口占用角度还去查了环境中 22 端口占用情况，发现也没问题，人方了 走投无路的时候，宿舍同学电脑这时候联不上校园网了，抱怨说学校的网络太辣鸡了~，这时候才想到可能真的是网络问题，于是尝试使用手机热点进行推送，成功了！！！自此问题解决。","link":"/2017/09/22/hexo-bo-ke-duo-she-bei-xie-tong-guan-li-wen-ti-chi-xu-geng-xin/"},{"title":"Java JDK 下载与安装教程","text":"开始正式的 JAVA 语言学习之前，首要的就是完成 Java 程序所需的开发、运行环境搭建——JDK（Java Development Kit：Java 开发工具包）的安装，以及配置。 本篇博文所作目的主要是记录一下 Java 开发环境的搭建过程，即 JDK 的安装以及配置过程 安装以及配置 JDK这里，首先给出 JDK 各版本下载地址供安装选择： Download –&gt; JDK 官方最新版 Download –&gt; JDK 1.8 官方最新版 [Download –&gt; JDK 官方各历史版本 本文将以 JDK1.8 的安装配置为 Demo，其它 JDK 版本安装过程一样。 JDK Package Download根据个人的使用需要，从上面选择要访问的 JDK 下载页，选择就可以下载相应的安装包了： 注意：目前从官网下载相应版本 JDK 之前，你需要注册一个 Oracle 账号，并完成登录，才会被授权下载使用。 可以发现，JDK 官网提供了不同平台下（Linux、Mac 以及 Windows）JDK 的安装包。后文我们会给出 Linux &amp; Windows 平台下 JDK 的安装配置方法： 根据需要下载相应平台安装包 1.1 –&gt; For Windows: 对于 Windows 下的安装包，提供了 i586（32 bit） 和 x64（64 bit） 供我们下载使用。 这里我们选择安装包：jdk-8u261-windows-x64.exe 用于后续的安装。 1.2 –&gt; For Linux: 对于 Linux下的安装包，提供了 i586（32 bit） 和 x64（64 bit） 的 RPM 包以及 .tar.gz 包供下载使用。 这里我们选择安装包：jdk-8u261-linux-x64.tar.gz 用于后续的安装。 JDK Setup上面我们已经下载好了 JDK 的安装包，接下来我们来看如何在不同的平台下安装下载好的 JDK 安装包： For Windows1）检查当前系统中是否安装有 JDK Windows 命令行（Terminal ）下执行如下指令： 1$ java -version 如果原始系统中已安装有 JDK ，则会输出如下 JDK 版本等信息： 123java version &quot;1.8.0_131&quot;Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode) 否则的话，开始安装 JDK（当然，如果系统中已存在某个版本的 JDK 了，我们还可以再同时安装一个其它目标版本的 JDK），接下文。 2）安装 JDK 双击 jdk-8u261-windows-x64.exe 安装包开始进行安装…… 安装过程中没有什么难的，Next 即可。需要注意的是，我们可以自定义 JDK 安装路径，不要什么东西都往系统盘安装，这里假设我们安装在：E:\\JAVA 目录下。 等待安装完成关闭安装界面即可。 可以发现，JDK 以及被安装到了 E:\\JAVA 目录下，包含两个文件： 12jdk1.8.0_261jre1.8.0_261 自此 Windows 下 JDK 的安装就完成了，但此时仍不能使用，我们还需要为 JDK 配置环境变量，接 【1.3.1 Windows 下 JDK 环境变量配置】。 For Linux1）检查当前系统中是否安装有 JDK 1[root@localhost test]# java -version 有些 Linux 系统默认会安装有 openjdk（一种 Linux 开源 JDK），例如会输出如下信息： 123openjdk version &quot;1.8.0_102&quot;OpenJDK Runtime Environment (build 1.8.0_102-b14)OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode) 我们可以选择先将其卸载掉（当然，不用管也可以）： 1234# Centos 下可以使用 yum 进行卸载：[root@localhost test]# yum remove *openjdk*# Ubuntu 下[root@localhost test]# apt-get remove openjdk* 当然系统中还有可能装有其它版本（区别于 openjdk，例如：oracle）的 JDK，例如： 123java version &quot;1.8.0_131&quot;Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode) 否则的话，开始安装 JDK（当然，如果系统中已存在某个版本的 JDK 了，我们还可以再安装一个其它目标版本的 JDK），接下文。 2）安装 JDK 进入到 jdk-8u261-linux-x64.tar.gz` 安装包存放目录（例如：~/Downloads），并且对安装包进行解压： 12345678910# 查找安装包：[root@localhost test]$ cd Downloads[root@localhost Downloads]$ ls |grep jdk*jdk-8u131-linux-x64.tar.gz# 解压至 /usr/java 目录下：[root@localhost Downloads]$ tar -zxvf jdk-8u131-linux-x64.tar.gz -C /usr/java# 等待解压完成即可。# 解压后，我们可以在 /usr/java 目录下可以查看到解压好的 JDK 目录：jdk1.8.0_131 自此 Linux下 JDK 的安装就完成了，但此时仍不能使用，我们还需要为 JDK 配置环境变量，接 【3. 环境变量配置】。 Config EvnsFor WindowsWindows 下为 JDK 配置环境变量: 首先打开环境变量配置界面：右键我的电脑 ---&gt; 属性 ---&gt; 高级系统设置 ---&gt; 环境变量。界面如下： –&gt; 开始设置环境变量: 这里注意，我们既可以设置普通用户变量，也可以设置系统变量。区别在于设置普通用户变量的话，只有该用户下可用，其他用户想要使用的话需要重新配置环境变量。而设置系统变量后，我们可以在所有用户下都可以使用。 –&gt; 故，这里我们选择设置系统变量： 1）点击系统变量下面的新建按钮，变量名设置为：JAVA_HOME（代表 JDK 安装路径），变量值：E:\\JAVA\\jdk1.8.0_261（具体的 JDK 的安装路径）。如下： 2）继续在系统变量里面新建一个 CLASSPATH 变量， 其变量值为：.;%JAVA_HOME%\\lib\\tools.jar;%JAVA_HOME%\\lib\\dt.jar;。如下： 这里注意变量前面还有一个 .;，表示当前路径，不要漏加！！！ 3）在系统变量里面找一个变量名是 Path 的变量，找到后进行编辑，在它的变量值最后面追加一段如下的代码： 1%JAVA_HOME%\\bin; 最后点击确定，此时 Windows 下 JDK 的环境变量配置就完成了，还不圆满，需要测试一下。 4）测试 WIndows Terminal 下分别执行如下指令： –&gt; java -version 1234$ C:\\Users\\guoji&gt;java -versionjava version &quot;1.8.0_211&quot;Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode) –&gt; java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051C:\\Users\\guoji&gt;java用法: java [-options] class [args...] (执行类) 或 java [-options] -jar jarfile [args...] (执行 jar 文件)其中选项包括: -d32 使用 32 位数据模型 (如果可用) -d64 使用 64 位数据模型 (如果可用) -server 选择 &quot;server&quot; VM 默认 VM 是 server. -cp &lt;目录和 zip/jar 文件的类搜索路径&gt; -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt; 用 ; 分隔的目录, JAR 档案 和 ZIP 档案列表, 用于搜索类文件。 -D&lt;名称&gt;=&lt;值&gt; 设置系统属性 -verbose:[class|gc|jni] 启用详细输出 -version 输出产品版本并退出 -version:&lt;值&gt; 警告: 此功能已过时, 将在 未来发行版中删除。 需要指定的版本才能运行 -showversion 输出产品版本并继续 -jre-restrict-search | -no-jre-restrict-search 警告: 此功能已过时, 将在 未来发行版中删除。 在版本搜索中包括/排除用户专用 JRE -? -help 输出此帮助消息 -X 输出非标准选项的帮助 -ea[:&lt;packagename&gt;...|:&lt;classname&gt;] -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;] 按指定的粒度启用断言 -da[:&lt;packagename&gt;...|:&lt;classname&gt;] -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;] 禁用具有指定粒度的断言 -esa | -enablesystemassertions 启用系统断言 -dsa | -disablesystemassertions 禁用系统断言 -agentlib:&lt;libname&gt;[=&lt;选项&gt;] 加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof 另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help -agentpath:&lt;pathname&gt;[=&lt;选项&gt;] 按完整路径名加载本机代理库 -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;] 加载 Java 编程语言代理, 请参阅 java.lang.instrument -splash:&lt;imagepath&gt; 使用指定的图像显示启动屏幕有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。 —&gt; javac 12345678910111213141516171819202122232425262728293031323334C:\\Users\\guoji&gt;javac用法: javac &lt;options&gt; &lt;source files&gt;其中, 可能的选项包括: -g 生成所有调试信息 -g:none 不生成任何调试信息 -g:{lines,vars,source} 只生成某些调试信息 -nowarn 不生成任何警告 -verbose 输出有关编译器正在执行的操作的消息 -deprecation 输出使用已过时的 API 的源位置 -classpath &lt;路径&gt; 指定查找用户类文件和注释处理程序的位置 -cp &lt;路径&gt; 指定查找用户类文件和注释处理程序的位置 -sourcepath &lt;路径&gt; 指定查找输入源文件的位置 -bootclasspath &lt;路径&gt; 覆盖引导类文件的位置 -extdirs &lt;目录&gt; 覆盖所安装扩展的位置 -endorseddirs &lt;目录&gt; 覆盖签名的标准路径的位置 -proc:{none,only} 控制是否执行注释处理和/或编译。 -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程 -processorpath &lt;路径&gt; 指定查找注释处理程序的位置 -parameters 生成元数据以用于方法参数的反射 -d &lt;目录&gt; 指定放置生成的类文件的位置 -s &lt;目录&gt; 指定放置生成的源文件的位置 -h &lt;目录&gt; 指定放置生成的本机标头文件的位置 -implicit:{none,class} 指定是否为隐式引用文件生成类文件 -encoding &lt;编码&gt; 指定源文件使用的字符编码 -source &lt;发行版&gt; 提供与指定发行版的源兼容性 -target &lt;发行版&gt; 生成特定 VM 版本的类文件 -profile &lt;配置文件&gt; 请确保使用的 API 在指定的配置文件中可用 -version 版本信息 -help 输出标准选项的提要 -A关键字[=值] 传递给注释处理程序的选项 -X 输出非标准选项的提要 -J&lt;标记&gt; 直接将 &lt;标记&gt; 传递给运行时系统 -Werror 出现警告时终止编译 @&lt;文件名&gt; 从文件读取选项和文件名 For Linux开始设置环境变量: 这里注意，我们既可以设置普通用户变量（局部变量），也可以设置系统变量（全局变量）。区别在于设置普通用户变量的话，只有该用户下可用，其他用户想要使用的话需要重新配置环境变量。而设置系统变量后，我们可以在所有用户下都可以使用。 –&gt; 故，这里我们选择设置系统变量： 1234567# 打开系统变量配置文件：[root@localhost test]# vim /etc/profile# 追加如下内容：export JAVA_HOME=/usr/java/jdk1.8.0_131export CLASSPATH=.;%JAVA_HOME%/lib/tools.jar:%JAVA_HOME%/lib/dt.jarexport PATH=$PATH:${JAVA_HOME}/bin –&gt; 生效 /etc/profile 配置文件： 1[root@localhost test]# source /etc/profile ============================================= 再来看一下普通用户变量如何设置： 12345# 在 ~/.bashrc 用户配置文件中添加上述内容即可。[root@localhost test]$ vim ~/.bashrc# 追加完配置内容后，需要使配置生效：[root@localhost test]$ source ~/.bashrc 此时 Linux下 JDK 的环境变量配置就完成了，还不圆满，需要测试一下。 –&gt; 测试 12345$ java -version$ java$ javac 篇幅原因，输出信息释义见 Windows 中测试部分。 You Need Know MorePath 和 CLASSPATH 详解1 –&gt; Path Path，是系统用来搜索可执行文件路径的环境变量。如果所执行的文件不在当前目录下，就会依次搜索 Path 中设置的路径。 而 Java 中的可执行文件路径是存放于 bin 目录下的，所以在 Path 中设置了 JDK 的 bin 路径后，DOS/Shell 中即使不把 jdk 可执行文件的完整路径给出，系统会自动去 Path 中设置的路径查找，然后执行。 这也是很多应用配置系统环境变量（Path）后，就可以直接在 DOS/Shell 中快速调用或启动的原因！ 2 –&gt; CLASSPATH CLASSPATH，是 Java 专用的查找类的路径，用来指定 Java 程序中所用类文件所在的位置。 如 Java 程序中，“import javax.swing.JTable” 就是告诉编译器引入 “javax.swing” 这个包下面的 “JTable”，而 CLASSPATH 就是告诉编译器要去哪里找到这个包。 两套 JRE？？？Windows 下 Java 安装完成之后，你会发现有两套 JRE：一套位于 &lt;JDK安装目录&gt;\\jre 下，一套位于 C:\\Program Files\\Java\\jre1.8.0_xxx 或和 &lt;JDK安装目录&gt; 同目录下。 并且安装 JDK 可以选择是否只安装 JRE，而不是 JDK，那么只会在安装目录下安装唯一的一套 JRE。 1 –&gt; 两套 JRE 的作用？ 两套 JRE 主要体现在工作的职责上，也就是不同的JRE负责不同的工作范围： JDK 里的工具有些是用 Java 所编写，因此要使用 JDK 所附的工具来开发 Java 程序，也必须要附一套 JRE 才行（如javac.exe、jar.exe…） 例如： javac.exe 与输入 java -cp c:/jdk/lib/tools.jar com.sun.tools.javac.Main 是一样的，可以认为 javac.exe 只是一个包装器（Wrapper），目的是简写指令。 而，另外一套 JRE 就是专门用来运行开发好的 Java 程序用的。 2 –&gt; 执行谁？ 例如 Java.exe 依照顺序来查找 JRE： 自己的目录下有没有 JRE ? 父目录有没有 JRE ? 查询注册表（环境变量）：[HKEY_LOCAL_MACHINE/SOFTWARE/JavaSoft/Java Runtime Environment] ? JDK 安装目录详解JDK安装目录如下（JDK 8）： 下面来详细介绍： 1 –&gt; bin bin(binary) 目录下存放了 JDK 的各种工具的可执行文件： 12345678# 主要工具可执行文件：Javac：Java编译器，将 Java 源代码编译为字节码文件；Java：Java解释器，解释执行 Java 字节码文件；appletviewer：Java Applet小程序查看器，可以执行 HTML 文件上 Java Applet 程序；Javadoc：java文档生成器，提取 Java 源码中的注释生成 HTML 说明文档；Jdb：Java调试器，可以逐行执行程序，设置断点和检查变量；Javap：Java反编译器，显示编译成的类文件中的可访问功能和数据，同时显示字节代码含义。jar：java打包器，可将 Java 包结构压缩成以 .jar 为后缀的 JAR 文件 2 –&gt; db db 目录是从 Java 6 开始新增的一个目录，这是一个纯 Java 实现、开源的数据库管理系统（DBMS），源于 Apache 软件基金会（ASF）名下的项目 Derby。 3 –&gt; include 由于 JDK 是通过 C 和 C++ 实现的，因此在启动时需要引入一些 C 语言的头文件，所以 include目录里面是一些供 C语言使用的标题文件。 支持 Java 本地接口和 Java 虚拟机调试程序接口的本地编程技术。 4 –&gt; jre jre 目录路径下安装的就是 Java 运行时环境。 5 –&gt; lib lib(libarary)，见名知义，存放类库，存放的是开发工具使用的归档包文件。 6 –&gt; src.zip 该压缩文件里面存放的就是 Java 所有核心类库的源代码。通过该文件可以查看 Java 基础类的源代码。 7 –&gt; javafx-src.zip 存放 JavaFX 脚本，JavaFX 它是一种声明式、静态类型编程语言。(是 JDK 1.8 以上新加的)。","link":"/2017/10/09/java-jdk-xia-zai-yu-an-zhuang-jiao-cheng/"},{"title":"Java 程序设计基础之操作符","text":"关于 Java 程序设计语言的 基础语法 部分，前面我们已经详细了解过了 Java 中的字面值，变(常)量，数据类型，本文我们来看 Java 基础语法的另一个重要组成部分——操作符，Java 中提供了丰富的操作符支持。 Java 中的操作符1 –&gt; 特殊概念 –&gt; 优先级 &amp; 结合性 Java 中的操作符，等价于数学中的运算符，也是有优先级，和结合性的概念的。 这也就是说，当一个表达式中出现多种操作符时，执行的先后顺序不仅要遵守操作符优先级规定，还要受操作符结合性的约束，以便确定是自左向右进行运算？还是自右向左进行运算？ –&gt; 操作数 操作符进行运算时，所操作（依赖）的数据 –&gt; 操作符按照【操作数的数量】可以分为：单目运算符、双目运算符和三目运算符。 2 –&gt; 操作符类别 Java 中最基本的操作符可归纳为以下 6 大类： 算术操作符 赋值操作符 关系操作符 逻辑操作符 条件操作符 位操作符 详细解读上面提到的 6 种 Java 基本操作符用法： 算术操作符Java 语言中，算术操作符的功能是对数据进行算术运算。这里为了方便记忆，特将算术运算分为两类： 基本算术操作符：+（加） -（减） *（乘） /（除）％（取模/余） 基本算术赋值操作符：+=（加赋值）-=（减赋值）*=（乘赋值）/=（除赋值）%=（取模赋值） 算术单目运算符：-（负） ++（自增） –（自减） 基本算术操作符Java 算术操作符种，最基本的算术运算就是： 1+（加） -（减） *（乘） /（除）％（取模/余） 上述运算符，和我们平常接触的数学运算具有相同的含义。 隐藏运算规则： 如果表达式中有任何运算单元的长度超过 int，那么运算结果就按照最长的长度计算 如果表达式中有任何运算单元的长度都不超过 int，那么运算结果就按照 int 来计算 123456789101112public class HelloWorld { public static void main(String[] args) { int a = 5; long b = 6; int c = (int) (a+b); // a+b 的运算结果是 long 型，所以要进行强制转换 byte d = 1; byte e= 2; byte f = (byte) (d+e); //虽然 a b 都是 byte 类型，但是运算结果是 int 类型，需要进行强制转换 }} 基本算术赋值操作符算术赋值运算符只是一种简写（算术操作符 &amp;&amp; 赋值运算符的一种应用），一般用于变量自身的变化： 运 算 符 名 称 例 子 等价于 += 加赋值 a += b + 3 a = a + b + 3 -= 减赋值 a -= b a = a - b *= 乘赋值 a *= b a = a*b /= 除赋值 a /= b a = a/b %= 取余赋值 a %= b a = a%b 算术单目操作符算术操作符中的，单目运算符有 3 个，分别表示：-（负） ++（自增） –（自减）。 其中，-（负）最为简单，就是数学上的含义，不做过多说明，下面重点来看自增、自减的使用。 使用原则： 自增/自减只能作用于变量，不允许对常量、表达式等进行操作； 自增/自减运算可以用于整数类型 byte、short、int、long；浮点类型 float、double；字符串类型 char 自增/自减运算（Java V1.5 以上）可以用于基本类型对应的包装器类 Byte、Short、Integer、Long、Float、Double 和 Character 自增/自减运算作用于变量自身加/减 1，放在操作数的前面或后面都是允许的。 1 –&gt; 自增 &amp; 自减 i++（自增）i –（自减）：在变量 i 原来的基础上，增加 1 或者减少 1。 123456789public class HelloWorld { public static void main(String[] args) { int i = 4; i++; System.out.println(5); // 输出为6 }} 2 –&gt; 前后置区别 以 ++ 为例，– 同理。 123int i = 4;i++; // 先取值，再运算++i; // 先运算，再取值 具体测试例： 1234567891011public class HelloWorld { public static void main(String[] args) { int i = 5; System.out.println(i++); // 输出5 System.out.println(i); // 输出6 int j = 5; System.out.println(++j); // 输出6 System.out.println(j); // 输出6 }} 思考：下面的 j 是 多少？ 12int i = 1;int j = ++i + i++ + ++i + ++i + i++; // 2 + 2(3) + 4 + 5 + 5 = 18 赋值操作符赋值运算符是指为 变量或常量 指定数值的符号。使用很简单，其语法格式如下所示： 1变量名称 = 表达式内容 它是双目运算符，左边的操作数必须是变量，不能是常量或表达式；右侧可以为字面值，表达式。 注意：不要将赋值运算符与相等运算符 “==” 混淆。 示例： 123456public class HelloWorld { public static void main(String[] args) { /* 首先进行 5+5 的运算，得到结果 10，然后把 10 这个值，赋给变量 i */ int i = 5+5; }} 关系操作符关系操作符（relational operators）也可以称为：“比较操作符”，用来比较判断两个变量或常量的大小。 运算结果是 boolean 型。当操作符对应的逻辑关系成立时，运算结果是 true，否则是 false。 比较操作符的含义及其实例应用： 1 –&gt; 大于操作符（&gt;） 只支持左右两边操作数是数值类型。如果前面变量的值大于后面变量的值， 则返回 true。 12# false2 &gt; 3 2 –&gt; 大于等于操作符（&gt;=） 只支持左右两边操作数是数值类型。如果前面变量的值大于等于后面变量的值， 则返回 true。 12# true4 &gt;= 2 3 –&gt; 小于操作符（&lt;） 只支持左右两边操作数是数值类型。如果前面变量的值小于后面变量的值，则返回 true。 12# true2 &lt; 3 4 –&gt; 小于等于操作符（&lt;=） 只支持左右两边操作数是数值类型。如果前面变量的值小于等于后面变量的值， 则返回 true。 12# false4 &lt;= 2 5 –&gt; 相等运算符（==） 5.1 数值类型比较： 无论它们的数据类型是否相同，只要它们的值相等，也都将返回 true。 12345678# true4 == 4# true97 == 'a'# true5.0 == 5# falsetrue == false 等于操作符支持，两个 boolean 类型的值进行比较。但注意：boolean 类型的变量、值不能与其他任意类型的变量、值使用 == 进行比较。 5.2 引用类型比较： 只有当两个引用变量的类型具有父子关系时才可以比较，只要两个引用指向的不是同一个对象就会返回 true。 6 –&gt; 不相等运算符（!=） 6.1 数值类型比较： 如果进行比较的两个操作数都是数值类型，无论它们的数据类型是否相同，只要它们的值不相等，也都将返回 true。 12# true4 != 2 6.2 引用类型比较： 如果两个操作数都是引用类型，只有当两个引用变量的类型具有父子关系时才可以比较，只要两个引用指向的不是同一个对象就会返回 true。 ============================================= You Know More： == 和 != 可以应用于基本数据类型和引用类型。当用于引用类型比较时，比较的是两个引用是否指向同一个对象，但实际开发过程多数情况下，只是比较对象的内容是否相当，不需要比较是否为同一个对象。 基本类型的变量、值不能和引用类型的变量、值使用 == 进行比较；boolean 类型的变量、值不能与其他任意类型的变量、值使用 == 进行比较；如果两个引用类型之间没有父子继承关系，那么它们的变量也不能使用 == 进行比较。 逻辑操作符逻辑运算符把各个关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。 逻辑运算符的用法、含义及实例： 1 –&gt; 逻辑与（&amp;） 和 短路与（&amp;&amp;） 两边的运算单元都是布尔值，运算规则： 都为真时，才为真 有假即假 区别： 逻辑与 两侧，都会被运算 短路与 只要第一个是false，第二个就不进行运算了 1234567891011121314public class HelloWorld { public static void main(String[] args) { //长路与 无论第一个表达式的值是true或者false,第二个的值，都会被运算 int i = 2; System.out.println( i== 1 &amp; i++ ==2 ); //无论如何i++都会被执行，所以i的值变成了3 System.out.println(i); //短路与 只要第一个表达式的值是false的，第二个表达式的值，就不需要进行运算了 int j = 2; System.out.println( j== 1 &amp;&amp; j++ ==2 ); //因为j==1返回false,所以右边的j++就没有执行了，所以j的值，还是2 System.out.println(j); }} 2 –&gt; 逻辑或（|） 和 短路或（||） 两边的运算单元都是布尔值，运算规则： 有真即真 都为假时，才为假 区别： 逻辑或（|）两侧都会被运算 短路或（||） 只要第一个是 true 的，第二个就不进行运算了 1234567891011121314public class HelloWorld { public static void main(String[] args) { //长路或 无论第一个表达式的值是true或者false,第二个的值，都会被运算 int i = 2; System.out.println( i== 1 | i++ ==2 ); //无论如何i++都会被执行，所以i的值变成了3 System.out.println(i); //短路或 只要第一个表达式的值是true的，第二个表达式的值，就不需要进行运算了 int j = 2; System.out.println( j== 2 || j++ ==2 ); //因为j==2返回true,所以右边的j++就没有执行了，所以j的值，还是2 System.out.println(j); }} 3 –&gt; 取反（!） 真变为假，假变为真。 123456789public class HelloWorld { public static void main(String[] args) { boolean b = true; System.out.println(b); //输出true System.out.println(!b);//输出false }} 4 –&gt; 异或（^） 不同，返回真；相同，返回假。 12345678910public class HelloWorld { public static void main(String[] args) { boolean a = true; boolean b = false; System.out.println(a^b); //不同返回真 System.out.println(a^!b); //相同返回假 }} 注意：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先 考虑使用短路与和短路或。 条件操作符Java 中提供了一个特别的三目运算符，经常用于取代某个类型的 if-then-else 语句。 使用条件操作符的一般语法结构为： result = &lt;expression&gt; ? &lt;statement_1&gt; : &lt;statement_3&gt;; 其中，expression 是一个布尔表达式。当 expression 为真时，执行 statement_1， 否则就执行 statement_3。 12345678910111213141516171819public class HelloWorld { public static void main(String[] args) { int i = 5; int j = 6; int k = i &lt; j ? 99 : 88; // 相当于 if (i &lt; j) { k = 99; } else { k = 88; } System.out.println(k); }} 位操作符Java 中定义的位运算（bitwise operators），按位运算表示按每个二进制位（bit）进行计算。 可以直接对 整数类型 的二进制位进行操作，这些整数类型包括 long，int，short，char 和 byte。其操作数和运算结果都是整型值。 Java 语言中的位运算符分为 位逻辑操作符 、 位移操作符 以及位操作符： 位逻辑操作符：&amp;（与）、|（或）、~（非）和 ^（异或） 位移操作符：将操作数向左（&lt;&lt;）或者右（&gt;&gt;），移动指定的二进制位数 这里注意，位逻辑操作符和逻辑操作符的区别。 1 –&gt; 整数的二进制 位操作，都是对整型操作数二进制而言的。 Java 中可以通过 Integer.toBinaryString() 方法，将一个十进制整数转换为一个二进制字符串 12345678910public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub int i = 5; String string = Integer.toBinaryString(i); System.out.println(string); } } 2 –&gt; 位逻辑操作符 2.1 –&gt; 位与（&amp;） 运算规则： 参与运算的操作数，低位对齐，高位不足的补零；如果对应的二进制位同时为 1，那么计算结果才为 1，否则为 0。 例如：100&amp;0 2.2 –&gt; 位或（|） 运算规则： 参与运算的操作数，低位对齐，高位不足的补零；如果对应的二进制位只要有一个为 1，那么结果就为 1；如果对应的二进制位都为 0，结果才为 0。 例如：11|7 2.3 –&gt; 位异或（^） 运算规则： 其运算规则是：参与运算的数字，低位对齐，高位不足的补零，如果对应的二进制位相同（同时为 0 或同时为 1）时，结果为 0；如果对应的二进制位不相同，结果则为 1。 例如：11^7 2.4 –&gt; 位取反（~） 运算规则： 只对一个操作数进行运算，将操作数二进制中的 1 改为 0，0 改为 1。 例如：~10 注意：位操作符的操作数只能是整型或者字符型数据以及它们的变体，不用于 float、double 或者 long 等复杂的数据类型。 3 –&gt; 位移操作符 位移运算符用来将操作数向某个方向（向左或者右）移动指定的二进制位数。 位移操作符说明： 运算符 含义 实例 结果 » 右移位运算符 8»1 4 « 左移位运算符 9«2 36 3.1 –&gt; 左位移（&lt;&lt;） 运算规则： 按二进制形式把所有的数字向左移动对应的位数，高位移出（舍弃），低位的空位补零。 例如：11 –&gt; 22 3.2 –&gt; 右位移（&gt;&gt;） 运算规则： 按二进制形式把所有的数字向右移动对应的位数，低位移出（舍弃），高位的空位补零。 例如：11 –&gt; 5 ======================================================= 带符号右移与无符号右移： 1 –&gt; 带符号右移：&gt;&gt; 对于正数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补0对于负数， 带符号右移 &gt;&gt; 会把所有的位右移，并在最前面补1 2 –&gt; 无符号右移：&gt;&gt;&gt; 如果是一个负数，那么对应的二进制的第一位是1。无符号右移&gt;&gt;&gt;会把第一位的1也向右移动，导致移动后，第一位变成0，这样就会使得负数在无符号右移后，得到一个正数。 4 –&gt; 位赋值操作符 所有的二进制位运算符都有一种将赋值与位运算组合在一起的简写形式： 运算符 含义 实例 结果 &amp;= 按位与赋值 num1 &amp;= num2 等价于 num 1=num 1 &amp; num2 |= 按位或赋值 num1 |= num2 等价于 num 1=num 1 ^= 按位异或赋值 num1 ^= num2 等价于 num 1=num 1 ^ num2 «= 按位左移赋值 num1 «= num2 等价于 num 1=num 1 « num2 »= 按位右移赋值 num1 »= num2 等价于 num 1=num 1 » num2 ============================================ 位赋值实例： 1234567891011121314151617181920212223public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub int a = 1; int b = 2; int c = 3; a &amp;= 4; System.out.println(a); a |= 4; System.out.println(a); a ^= c; System.out.println(a); a -= 6; System.out.println(a); b &gt;&gt;= 1; System.out.println(b); c &lt;&lt;= 1; System.out.println(c); } } 输出： 123456047116 操作符优先级Java 中操作符优先级助记口诀： 单目乘除为关系，逻辑三目后赋值 口诀解释： 单目：单目操作符 –&gt; !（取反）+（正） –（负数） ++/ –（自增自减） ~ 乘除：算数操作符中的 *（乘） /（除） %（取模）–&gt; 后 +（加）-（减） 为：位移操作符 &lt;&lt; （左移）&gt;&gt;（右移） 关系：关系运算符&gt; （大于）&lt;（小于） &gt;=（大于等于） &lt;=（小于等于）==（等于） !=（不等于） 逻辑：逻辑操作符 &amp;&amp;（短路与） ||（短路或） &amp;（逻辑与） |（逻辑或） ^ （异或） 三目：三目操作符 A &gt; B ? X : Y 后：无意义，仅仅为了凑字数 赋值：=（赋值）+=/-+/*=//=/%=（算术赋值）&amp;=/|=/^=/~=（位逻辑赋值）&lt;&lt;=/&gt;&gt;=（位移赋值） 操作符优先级： 优先级 运算符 结合性 1 ()、[]、{} 从左向右 2 !、+、-、~、++、– 从右向左 3 *、/、% 从左向右 4 +、- 从左向右 5 «、»、&gt;&gt;&gt; 从左向右 6 &lt;、&lt;=、&gt;、&gt;=、instanceof 从左向右 7 ==、!= 从左向右 8 &amp; 从左向右 9 ^ 从左向右 10 | 从左向右 11 &amp;&amp; 从左向右 12 || 从左向右 13 ?: 从右向左 14 =、+=、-=、*=、/=、&amp;=、|=、^=、~=、«=、»=、&gt;&gt;&gt;= 从右向左 实际的开发中，需要去记忆运算符的优先级别，也不要刻意的使用运算符的优先级别，对于不清楚优先级的地方使用小括号去进行替代。 Scanner截至目前为止，学习了使用 System.out.println(“”) 向控制台输出数据。 那么，如何从控制台输入数据？ 使用Scanner类，需要在最前面加上 import java.util.Scanner; 表示导入这个类，才能够正常使用。 Scanner 读取整数1234567891011import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { Scanner s = new Scanner(System.in); int a = s.nextInt(); System.out.println(&quot;第一个整数：&quot;+a); int b = s.nextInt(); System.out.println(&quot;第二个整数：&quot;+b); }} Scanner 读取浮点数12345678910import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { Scanner s = new Scanner(System.in); float a = s.nextFloat(); System.out.println(&quot;读取的浮点数的值是：&quot;+a); }} Scanner 读取字符串123456789import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { Scanner s = new Scanner(System.in); String a = s.nextLine(); System.out.println(&quot;读取的字符串是：&quot;+a); }} 读取了整数后，接着读取字符串: 如果在通过nextInt()读取了整数后，再接着读取字符串，读出来的是回车换行:”\\r\\n”,因为nextInt仅仅读取数字信息，而不会读取回车换行”\\r\\n”。 所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该连续执行两次nextLine()，第一次是取走回车换行，第二次才是读取真正的字符串。 123456789101112import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { Scanner s = new Scanner(System.in); int i = s.nextInt(); System.out.println(&quot;读取的整数是&quot;+ i); String rn = s.nextLine(); String a = s.nextLine(); System.out.println(&quot;读取的字符串是：&quot;+a); }} Scanner Close使用之后记得关闭 Scanner，防止消耗资源 scan.close();","link":"/2017/10/14/java-cheng-xu-she-ji-ji-chu-zhi-cao-zuo-fu/"},{"title":"Java 程序设计基础之流程控制","text":"关于 Java 程序设计语言的 基础语法 部分，前面我们已经详细了解过了 Java 中的字面值，变(常)量，数据类型以及操作符，这里我们来看 Java 基础语法的另一个重要组成部分——Java 中的流程控制语句，它决定程序要进入什么流程，即“做什么”以及“怎么做等。 流程控制结构从结构化程序设计角度出发，编程语言一般会有 3 种结构： 顺序结构 分支结构 循环结构 若是在程序中没有给出特别的执行流程控制，系统则默认自上而下一行一行地执行该程序，这类程序的结构就称为顺序结构。 但事实上，现实事物的发展往往不会遵循早就设想好的轨迹进行，此时需要引入：分支结构，循环结构。 分支结构Java 支持两种选择语句： if 语句：使用 布尔表达式或布尔值 作为分支条件，来进行程序执行分支控制 switch 语句：用于对多个 整型值、字符串值 进行匹配，从而实现程序执行分支控制。 下面会分别对上述的两种选择（分支）语句进行解读： if 语句1 –&gt; if 结构 if 语句的最简语法格式如下，表示：“如果条件表达式为 true，就执行语句块”。 123if (条件表达式) { 语句块;} if 条件语句的运行流程如下： 实例： 12345678910public class HelloWorld { public static void main(String[] args) { boolean b = true; if(b){ // 如果成立就打印：yes System.out.println(&quot;yes&quot;); } }} –&gt; 多表达式与一个表达式 123456789101112131415161718192021222324252627public class HelloWorld { public static void main(String[] args) { boolean b = false; // 如果有多个表达式，必须用大括弧包括起来 if(b){ System.out.println(&quot;yes1&quot;); System.out.println(&quot;yes2&quot;); System.out.println(&quot;yes3&quot;); } // 否则表达式2 3, 无论 b 是否为 true 都会执行 if(b) System.out.println(&quot;yes1&quot;); System.out.println(&quot;yes2&quot;); System.out.println(&quot;yes3&quot;); // 如果只有一个表达式可以不用写括弧，看上去会简约一些（但语法规范不推荐） if(b){ System.out.println(&quot;yes1&quot;); } if(b) System.out.println(&quot;yes1&quot;); }} 2 –&gt; if-else 结构 if-else 结构语法格式如下，表示：“如果条件（表达式）正确则执行 –&gt; 语句块1，否则执行 –&gt; 语句块2”。 12345if (表达式) { 语句块1;} else { 语句块2;} if-else 结构的运行流程如下： 实例： 12345678910111213public class HelloWorld { public static void main(String[] args) { boolean b = false; if (b){ System.out.println(&quot;yes&quot;); } else{ System.out.println(&quot;no&quot;); } }} 3 –&gt; 多条件 if-else-if 结构 if-else-if 结构是多条件判断，语法格式如下： 12345678910if(表达式1) { 语句块1;} else if(表达式2) { 语句块2;...} else if(表达式n) { 语句块n;} else { 语句块n+1;} 表现为：依次判断表达式的值，当某个分支的条件表达式的值为 true 时，则执行该分支对应的语句块，然后跳到整个 if 语句之外继续执行程序。如果所有的表达式均为 false，则执行语句块 n+1，然后继续执行后续程序。 if-else-if 结构的运行流程如下： 实例： 1234567891011121314151617181920212223242526public class HelloWorld { public static void main(String[] args) { // 如果只使用 if,会执行 4 次判断 int i = 2; if (i==1) System.out.println(1); if (i==2) System.out.println(2); if (i==3) System.out.println(3); if (i==4) System.out.println(4); // 如果 i == 2 时成立，则后续判断均不再执行 if (i==1) System.out.println(1); else if (i==2) System.out.println(2); else if (i==3) System.out.println(3); else if (i==4) System.out.println(4); }} 4 –&gt; if 嵌套结构 if 条件结构里嵌套另一个 if 结构。同样，if…else 结构语句和 if…else if 结构语句中也可以嵌套另一个 if 结构的语句，以完成更深层次的判断（一般不要超过 3 层）。 嵌套 if 的语法格式如下： 12345678910111213141516171819if(表达式1) { if(表达式2) { 语句块1; } else { 语句块2; }} else { if(表达式3) { 语句块3; } else if(表达式4) { 语句块4; } else { if(表达式n) { 语句块n; } else { 语句块n+1; } }} switch 语句switch 语句是 Java 中的多路分支语句，提供了一种基于一个表达式的值来使程序执行不同部分的简单方法。 switch 提供了一个比一系列 if-else-if 语句更好的选择。 switch 语句的基本语法形式如下所示： 123456789101112131415switch(表达式) { case 值1: 语句块1; break; case 值2: 语句块2; break; … case 值n: 语句块n; break; default: 语句块n+1; break;} switch 语句的执行过程如下：表达式的值与每个 case 语句中的常量作比较。如果发现了一个与之相匹配的，则执行该 case 语句后的代码。如果没有一个 case 常量与表达式的值相匹配，则执行 default 语句。 default 语句是可选的。 如果没有相匹配的 case 语句，也没有 default 语句，则什么也不执行。 注意：重复的 case 值是不允许的。 ================================================= 使用注意： switch 关键字后面小括号里的值：要放一个整型变量或字符型变量；表达式必须为 byte，short，int，char类型； case 关键字后的值，可以是：类型为 char、byte、 short 或 int 的常量表达式；enum 常量；或字符串字面量； break：一般语句块后均需要加 break；如果在 case 分支语句的末尾没有 break 语句，那么就会接着执行下一个 case 分支语句。这种情况相当危险，常常会引发错误。 default：表示“默认”，即其他情况都不满足；default 块和 case 块的先后顺序可以变动，不会影响程序执行结果。通常，default 块放在末尾，也可以省略不写。 switch 语句中也支持嵌套，但一般不这么用 if 语句可计算任何类型的布尔表达式。也就是 switch 语句只能寻找 case 常量间某个值与表达式的值相匹配。 循环结构所有流行的编程语言中都有循环语句。Java 中采用的循环语句与C语言中的循环语句相似，主要有： while do-while for Java 5 之后，还推出了 for-each 循环语句。它是专门为数组、集合遍历而设计的。但 for-each 并不是一个关键字。 while 语句while 语句是 Java 最基本的循环语句，是一种先判断的循环结构。while 循环语句的语法结构如下： 123while(条件表达式) { 语句块;} 其中语句块中的代码可以是一条或者多条语句，而条件表达式是一个有效的 boolean 表达式，它决定了是否执行循环体。当条件表达式的值为 true 时，就执行大括号中的语句块。 循环语句的执行流程如下: 实例： 1234567891011public class HelloWorld { public static void main(String[] args) { // 打印 0~4 int i = 0; while(i&lt;5){ System.out.println(i); i++; // 控制循环结束 } }} do…while语句如果 while 循环一开始条件表达式就是假的，那么循环体就根本不被执行。然而，有时需要在开始时条件表达式即使是假的情况下，while 循环至少也要执行一次。 do-while 循环语句的特点是先执行循环体（循环至少也要执行一次），然后判断循环条件是否成立，成立后继续执行。 do-while 语句的语法格式如下： 123do { 语句块;}while(条件表达式); do-while 循环语句执行流程如下： 实例（图书列表中保存了 50 条信息，现在需要让它每行显示 10 条，分 5 行进行显示）： 12345678910public static void main(String[] args) { int bookIndex = 1; do { System.out.print(bookIndex+&quot;\\t&quot;); if(bookIndex%10 == 0) { System.out.println(); } bookIndex++; }while(bookIndex&lt;51);} for 语句for 循环，和 while 循环一样，只是表达方式不一样。 for 语句语法格式如下所示： 123for(条件表达式1;条件表达式2;条件表达式3) { 语句块;} for 关键字后面括号中的 3 个条件表达式必须用 “;” 隔开。 for 循环中 3 个表达式的含义: 表达式 形式 功能 举例 条件表达式 1 赋值语句 循环结构的初始部分，为循环变量赋初值 int i=1 条件表达式 2 条件语句 循环结构的循环条件 i&gt;40 条件表达式 3 迭代语句，通常使用 ++ 或 – 运算符 循环结构的迭代部分，通常用来修改循环 变量的值 i++ 123456789public static void main(String[] args) { for (int bookIndex = 1;bookIndex&lt;51;bookIndex++){ System.out.print(bookIndex+&quot;\\t&quot;); if(bookIndex%10 == 0) { System.out.println(); } }} ================================================== 特别： for 语句中初始化、循环条件以及迭代部分都可以为空语句（但分号不能省略），三者均为空的时候，相当于一个无限循环。但无论缺少哪部分条件表达式，都可以在程序的其他位置补充，从而保持 for 循环语句的完整性，使循环正常进行。 1 –&gt; 条件表达式 1 为空 例如，使用 for 语句的这种形式计算 1~100 所有奇数的和。 123456789public static void main(String[] args) { int result = 0; int number = 1; // 相当于for语句的第1个表达式 for (; number &lt; 101; number++) { if (number % 2 != 0) // 如果不能整除2，说明是奇数，则进行累加 result += number; } System.out.print(&quot;100 以内所有奇数和为：&quot; + result);} 2 –&gt; 条件表达式 2 为空 当 for 语句中条件表达式 2 为空时，将没有循环的终止条件。为了使循环达到某种条件时退出，需要在语句块中进行逻辑判断，并使用 break 语句来跳出循环，否则将产生死循环。 同样是计算 1~100 所有奇数的和，使用这种方式的代码如下。 12345678910public static void main(String[] args) { int result = 0; for (int number = 1;; number++) { if (number &gt; 100) break; // 相当于for语句的表达式2，满足时就退出for循环 if (number % 2 != 0) // 如果不能整除2，说明是奇数，则进行累加 result += number; } System.out.print(&quot;100 以内所有奇数和为：&quot; + result);} 3 –&gt; 条件表达式 3 为空 当 for 语言中条件表达式 3 为空时，也就没有设置控制变量的表达式，即每次循环之后无法改变变量的值，此时也无法保证循环正常结束。 同样是计算1~100 所有奇数的和，使用这种方式的代码如下： 123456789public static void main(String[] args) { int result = 0; for (int number = 1; number &lt; 101;) { if (number % 2 != 0) // 如果不能整除2，说明是奇数，则进行累加 result += number; number++; // 相当于for语句的条件表达式3，每次递增1 } System.out.print(&quot;100 以内所有奇数和为：&quot; + result);} 4 –&gt; 3 个条件表达式都为空 事实上，在 for 循环语句中，无论缺少哪部分条件表达式，都可以在程序的其他位置补充，从而保持 for 循环语句的完整性，使循环正常进行。 但是，对于这种情况，读者在使用时应该尽量避免。 例如，计算 1~100 所有奇数的和，使用这种方式的代码如下： 123456789101112public static void main(String[] args) { int result = 0; int number = 1; // 相当于for语句的条件表达式1 for (;;) { if (number &gt; 100) break; // 相当于for语句的条件表达式2 if (number % 2 != 0) // 如果不能整除2，说明是奇数，则进行累加 result += number; number++; // 相当于for语句的条件表达式3 } System.out.print(&quot;100 以内所有奇数和为： &quot; + result);} 循环嵌套和其他编程语言一样，Java 允许循环嵌套。如果把一个循环放在另一个循环体内，那么就可以形成嵌套循环。 嵌套循环既可以是 for循环嵌套 while 循环，也可以是 while 循环嵌套 do-while 循环 …… 即各种类型的循环都可以作为外层循环，也可以作为内层循环。 假设外层循环的循环次数为 n 次，内层循环的循环次数为 m 次，那么内层循环的循环体实际上需要执行 n×m 次。 for、do-while 和 while 的区别： 名称 概念 适用场景 for 根据循环次数限制做多少次重复操作 适合循环次数是已知的操作 while 当满足什么条件的时候，才做某种操作 适合循环次数是未知的操作 do-while 先执行一次，在判断是否满足条件 适合至少执行一次的循环操作 foreach 语句foreach 循环语句是 Java 1.5 的新特征之一，在 遍历数组、集合 方面，foreach 为开发者提供了极大的方便。 foreach 循环语句的语法格式如下： 123for(类型 变量名:集合) { 语句块;} 其中，“类型”为集合或数组中 元素的类型，“变量名”表示集合或数组中的每一个元素，“集合”是被遍历的集合对象或数组。 样例，假设有一个数组，采用 for 语句遍历数组的方式如下： 1234567// 声明并初始化数组int[] numbers = { 43, 32, 53, 54, 75, 7, 10 };System.out.println(&quot;----for----&quot;);// for语句for (int i = 0; i &lt; numbers.length; i++) { System.out.println(&quot;Count is:&quot; + numbers[i]);} 关于数组集合会在教程后面详细介绍，这里我们只需要大概了解就可以。numbers.length 是获得数组的长度，length 是数组的属性，numbers[i] 是通过数组下标访问数组元素。 那么采用 for-each 循环语句遍历数组的方式如下： 1234567// 声明并初始化int数组int[] numbers = { 43, 32, 53, 54, 75, 7, 10 };System.out.println(&quot;----for each----&quot;);// for-each语句for (int item : numbers) { System.out.println(&quot;Count is:&quot; + item);} 从示例中可以发现，item 不是循环变量，它保存了集合中的元素，for-each 语句将集合中的元素一一取出来，并保存到 item 中，这个过程中不需要使用循环变量，通过数组下标访问数组中的元素。可见 for-each 语句在遍历集合的时候要简单方便得多。 –&gt; 注意：foreach 循环迭代数组（集合）元素时，并不能改变数组（集合）元素的值 当使用 foreach 循环来迭代输出数组元素或集合元素时，通常不要对循环变量进行赋值，虽然这种赋值在语法上是允许的，但没有太大的实际意义，而且极容易引起错误。例如下面程序。 1234567891011public static void main(String[] args) { String[] languages={&quot;Java&quot;,&quot;ASP.NET&quot;,&quot;Python&quot;,&quot;C#&quot;,&quot;PHP&quot;}; System.out.println(&quot;时下流行的编程语言：&quot;); // 使用 foreach 循环语句遍历数组 for(String lang:languages) { lang = &quot;Google&quot;; System.out.println(lang); } System.out.println(languages[0]);} 运行上边程序，将看到如下结果： 1234567时下流行的编程语言：GoogleGoogleGoogleGoogleGoogleJava 可以发现，由于在 foreach 循环中对数组元素进行赋值，结果导致不能正确遍历数组元素，不能正确地取出每个数组元素的值。而且当再次访问第一个数组元素时，发现数组元素的值依然没有改变。 =================================================== 原理解析： 当使用 foreach 来迭代访问数组元素时，foreach 中的循环变量相当于一个临时变量，系统会把数组元素依次赋给这个临时变量，而这个临时变量并不是数组元素，它只是保存了数组元素的值。因此，如果希望改变数组元素的值，则不能使用这种 foreach 循环。 break 语句某些时候需要在某种条件出现时强行终止循环，而不是等到循环条件为 false 时才退出循环。此时，可以使用 break 来完成这个功能。 Java 中，break 语句有 3 种作用： break，可用于直接结束当前循环 在 switch 语句中终止一个语句序列 实现 goto 的功能 直接结束当前循环使用 break 语句直接强行退出循环的示例如下： 123456789101112public class HelloWorld { public static void main(String[] args) { // 打印单数 for (int j = 1; j &lt; 10; j++) { if(0==j%2) break; // 如果是双数，直接结束循环 System.out.println(j); } }} 输出如下： 11 break 语句能用于任何 Java 循环中，包括人们有意设置的无限循环。 在一系列嵌套循环中使用 break 语句时，它将仅仅终止最里面的循环 123456789101112131415public static void main(String[] args) { // 外循环，循环5次 for (int i = 0; i &lt; 5; i++) { System.out.print(&quot;第&quot; + (i + 1) + &quot;次循环：&quot;); // 内循环，设计为循环10次 for (int j = 0; j &lt; 10; j++) { // 判断j是否等于3，如果是，则终止循环 if (j == 3) { break; } System.out.print(&quot;内循环的第&quot; + (j + 1) + &quot;次循环\\t&quot;); } System.out.println(); }} break 带标签实现 goto 功能Java 提供了一种带标签的 break 语句，用于跳出多重嵌套的循环语句，可以实现 goto 的功能。 通过使用扩展的 break 语句，可以终止执行一个或者几个任意代码块，这些代码块不必是一个循环或一个 switch 语句的一部分。同时这种扩展的 break 语句带有标签，可以明确指定从何处重新开始执行。 标签 break 语句的通用格式如下： break label; label 是标识代码块的标签。被加标签的代码块必须包围 break 语句，但是它不需要直接包围 break 的块。也就是说，可以使用一个加标签的 break 语句来退出一系列的嵌套块，但是不能使用 break 语句将控制权传递到不包含 break 语句的代码块。 用标签（label）可以指定一个代码块，标签可以是任何合法有效的 Java 标识符，后跟一个冒号。 下面是使用带标签的break 语句的示例。 123456789101112public class GotoDemo { public static void main(String[] args) { label: for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 8; j++) { System.out.println(j); if (j % 2 != 0) { break label; } } } }} 程序执行结果： 1201 可以发现，加上标签的代码块可以作为 break 语句的对象，使程序在加标签的块的结尾继续执行。 标签语句必须和循环匹配使用，使用时书写在对应的循环语句的上面，标签语句以冒号结束。如果需要中断标签语句对应的循环，可以采用 break 后面跟标签名的方式。 但注意，标签语句可以独立使用， Java 不会报错 switch 语句中终止一个语句序列break 在 switch 语句中可终止一个语句序列，就是在每个 case 子句块的最后添加语句 “break;”，具体使用可见分支结构中的 switch 语句。 continue 语句与 break 语句一样， 它将中断正常的控制流程。与 break 语句的区别在于：continue 并不是中断循环语句，而是中止当前迭代的循环，进入下一次的迭代。 简单来讲，continue 是忽略循环语句的当次迭代。 123456789101112public class HelloWorld { public static void main(String[] args) { //打印单数 for (int j = 0; j &lt; 10; j++) { if(0==j%2) continue; //如果是双数，后面的代码不执行，直接进行下一次循环 System.out.println(j); } }} 程序输出： 1234513579 –&gt; continue label 同 break 语句一样，continue 语句同样可以配合 label 使用。 带标签的 continue 语句示例代码如下： 123456789101112public class GotoDemo { public static void main(String[] args) { label: for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 8; j++) { System.out.println(j); if (j % 2 != 0) { continue label; } } } }} 注意，与 break label 使用时的区别。 输出如下: 12345678910110101010101...","link":"/2017/10/16/java-cheng-xu-she-ji-ji-chu-zhi-liu-cheng-kong-zhi/"},{"title":"Python 简介与开发环境搭建","text":"Foreword 不管是由于工作需要必须掌握 Python，或是抱着极其浓厚的兴趣想要学习 Python 程序设计语言，亦或是不甘落于人后（身边越来越多的人开始使用 Python）…… 不要困惑，我们已经站在 Python 花园秘境的入口，即将一睹大门背后绮丽的风景。 那句话怎么说来着？人生苦短，快来使用 Python 吧 …… 这一章节我们通过对以下两部分内容的解读，正式开启 Python 的学习之旅的第一站（叩门）： Python Introduction Python Development Envs Setup Python Introduction这一小节我们来简要介绍 Python 的背景知识，你可以将其作为 Python 学习入门需知。 注意，相关介绍没必要深究，在后续正式进入 Python 学习生态环境之后，你会越来越深入理解相关的内容。 Python 发展历史Python 的创始人为荷兰人 Guido van Rossum（吉多·范罗苏姆）。1989年圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间， 决心开发一个新的脚本解释程序。之所以选中 Python（蟒蛇）作为程序的名字，是因为他是一个叫 Monty Python 戏剧团的忠实粉丝。 大佬不愧为大佬啊….. 1991年，第一个 Python 解释器诞生，它是用 C 语言实现的，并能够调用 C 语言的库文件。 Python 2.0 于 2000 年 10 月发布，增加了完整的垃圾回收，并且支持 Unicode。 Python 3.0 于 2008 年 12 月发布，此版不完全兼容之前的 Python 源代码。不过，很多新特性也被移植到旧版本。 2019 年 12 月份世界编程语言排行榜中，Python 排名第三，成为了仅次于 Java 和 C 语言的黑马。 Python 能干什么？ 基础编程开发 Web 开发 网络爬虫 自动化运维 / 运维开发 自动化测试 / 测试开发 游戏开发 科学计算 大数据 / 数据分析 / 数据挖掘 机器学习 / 人工智能 &amp; 深度学习 …… 看到这里是不是了解了为什么 Python 经常被和 大数据、人工智能 捆绑到一起作为 AI 关键词的原因了。 事实上，像 Google，Facebook，Yahoo，YouTube 以及著名的开源云计算平台 openstack，还有国内的豆瓣都是用 Python 写的 !!! Python 究竟是什么？相较于其它高级编程语言，Python 是一个高层次的 解释型的面向对象的交互式脚本语言。 Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节，类似于 PHP 和 Perl 语言。 Python 是一种交互式语言：这意味着，你可以在一个 Python 提示符（Shell），直接互动执行你编写的程序。 Python 是一种面向对象语言：这意味着 Python 支持面向对象的风格或代码封装于对象的编程技术。 Python 是一种初学者的语言：Python 对初级程序员而言，作为学习编程的入门语言再合适不过。它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。 Python 特点相较于其它高级程序设计语言，Python 有如下特点： 易于阅读、学习：Python有相对较少的关键字，和明确定义的语法，代码结构清晰易读，学习起来更加简单。 互动模式：互动模式的支持，你可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。 跨平台：作为开源、免费的解释型语言，Python 已经被移植（跨平台）到许多平台。 广泛的类库支持：Python 的最大的优势之一是丰富的类库支持，在 UNIX，Windows 和Macintosh 兼容很好。 可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用 C 或 C++ 完成那部分程序，然后从你的 Python 程序中调用。 可嵌入: 你可以将 Python 嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。 数据库：Python 提供所有主要的商业数据库的接口。 GUI 编程：Python 支持 GUI 可以创建和移植到许多系统调用。 Python 有缺点么 ？？？一味鼓吹 Python 没有缺陷是伪命题，任何编程语言都有缺点，Python 也不例外。 第一个缺点：运行速度慢 和 C 程序相比非常慢，因为 Python 是解释型语言，代码在被执行时会一行一行地翻译成 CPU 能理解的机器码，这个翻译过程非常耗时，所以很慢。而 C 程序是运行前直接被编译成 CPU 能执行的机器码，所以非常快。 但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个网络应用程序，C 程序的运行时间需要 0.001 秒，而 Python 程序的运行时间需要 0.1 秒，慢了 100 倍，但由于网络更慢，需要等待 1 秒，你想，用户能感觉到 1.001 秒和 1.1 秒的区别吗？这就好比 F1 赛车和普通的出租车在北京三环路上行驶的道理一样，虽然 F1 赛车理论时速高达 400 公里，但由于三环路堵车的时速只有 20 公里，因此，作为乘客，你感觉的时速永远是 20 公里。 甚至我们可以将需要快速执行的 Python 代码段转成 C 内置于 Python 中以提升性能。 第二个缺点：代码不能加密 由于 Python 的开源、免费特性，如果要发布你的 Python 程序，实际上就是发布源代码，这一点跟 C 语言不同，C语言不用发布源代码，只需要把编译后的机器码（也就是你在 Windows 上常见的 xxx.exe 文件）发布出去。要从机器码反推出 C 代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。 当然，想要加密 Python 代码，也并非无解，网络上也给出了一些 Python 加密方法用以提高其源码保密性。 然而，开源是软件产业的大趋势，传统程序员需要转变观念。 Python 彩蛋最后一部分，我们给出一个 Python 彩蛋：“Python 之歌”，它概要地解读了 Python 语言设计的特点。在后续我们介绍完 Python 开发环境搭建，你可以执行 Python 指令之后，重新返回到这一部分“敲开”彩蛋： 1234567891011121314151617181920212223242526# Python 解释器执行如下命令：import this# 获取到如下信息：The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those! Python Development Envs Setup工欲善其事，必先利其器。这一小节将向大家介绍如何搭建本地 Python 语言学习、开发环境。 前面我已经提到过 Python 具有良好的移植性，可应用于多平台包括：Windows、Linux 和 Mac OS X 等等，Python 官网 确实也提供了不同平台的 Python 安装包以提供下载安装。 关于 Python 安装版本选择，个人建议选择 Python3.x（越来越多的开发者转战到 Python3，已成为主流使用版本）。 安装后，你会得到 Python 解释器（负责解释运行 Python 程序），一个 命令行交互环境，还有一个简单的 集成开发环境（IDLE）。 下面我们来开始本地 Python 语言开发环境的搭建 –&gt; 环境检查在开始正式安装之前，你可以通过在 终端窗口（Terminal）输入 “python -V” 命令来查看本地是否已经安装 Python 以及 Python 的安装版本。 如果输出如下信息表示当前系统中已安装有 Python，你已经可以直接跳过安装环节开始 Python 语言的学习了： 1234Python 3.5.0 (default, Dec 1 2018, 17:15:02) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; 这里一定要注意 Python 的版本信息，如上，当前系统中已安装 Python 版本为：3.5.0 如果当前系统中的 Python 版本不符合你的期望（不需要卸载），或者系统中没有找到 Python 信息，接下文 –&gt; Python DownloadPython 最新源码，二进制文档，相关新闻资讯等可以在 Python 的官网查看到： Python 官网：https://www.python.org/ ，以下给出各个平台 Python 安装包的下载地址： 并且，你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等多种格式的文档。 Python 文档下载地址：https://www.python.org/doc/ Python Setup我们知道 Python 已经被移植在许多平台上（使它能够工作在不同平台上），类似于 Java，“一次编写，多次运行”。而 不同平台的安装步骤视使用的操作系统和安装方式而异。 安装 Python 的 两种主流方式：我们既可以从 源码 安装，同时也可以下载使用已经编译并且打包好的 二进制版本 安装包进行安装。 如果你选择的平台（例如：Unix/Linux）的二进制代码不可用，你可以使用手动编译源代码进行安装。编译的源代码，功能上有更多的选择性， 为 Python 安装提供了更多的灵活性。 以下给出不同平台（Unix/Linux、Windows）上安装 Python 的方法： Source Code For Unix &amp; Linux Platform Binary Package For Windows Platform For Unix &amp; Linux Platform由于 Unix &amp; Linux 平台一般自带相应版本的 Python（Python2/Python3），如果你选择在 Unix &amp; Linux 平台学习 Python，那么你可以直接跳过后续教程（你已经可以开始使用 Python 了！）。 当然，有些同学就是想尝试一下 Python 的编译过程（或者 系统原生 Python 版本不是你学习使用所需要版本），下面给出在 Unix &amp; Linux 平台上安装 Python 的通用步骤: 注意多个 Python 版本是可以共存的！！！前提是你需要注意新安装的 Python 环境对原有环境的影响，严格遵循下文安装过程不会对系统原生环境产生影响，你可以放心安装。这也就意味着：你可以使用下面的方法在系统中安装多个 Python 版本而不影响系统原生环境。 源码编译安装 –&gt; 打开 WEB 浏览器访问：https://www.python.org/downloads/source/ 选择适用于 Unix/Linux 的源码压缩包。 cd 到安装目录：/usr/local，下载及解压压缩包。 如果你需要自定义一些选项，可以修改 Modules/Setup 执行 ./configure （配置） make make install 执行以上操作后，Python 相关的可执行文件默认会被存放到：/usr/local/bin 中，库文件默认会被安装到：/usr/local/lib/pythonXX，XX 为你使用的 Python 的版本号。 这样显得有点杂乱… 来认识一下：“linux, configure –prefix=/”的作用是 –&gt; 编译的时候用来指定程序存放路径。 |&gt;&gt;&gt;=============== prefix 选项用于配置安装的路 ================| 如果不配置该选项，安装后可执行文件默认放在 /usr/local/bin，库文件默认放在 /usr/local/lib，配置文件默认放在 /usr/local/etc，其它的资源文件放在 /usr/local/share 如果配置 prefix，如：”./configure –prefix=/usr/local/test”，可以把所有资源文件放在 /usr/local/test 的路径 |=======================================================&lt;&lt;&lt;| Begin to Setup –&gt; 以 “Python-3.5.0 安装” 为样例演示上述安装过程： 1 –&gt; 准备编译环境（系统环境中可能缺失编译环境，导致遇到各种问题，比如：wget 无法下载 https 链接文件，缺少了zlib的解压缩类库等） 12345# Centos[root@node1 ~]# yum install wget zlib-devel bzip2-devel openssl-devel ncurses-devel# Ubuntu[root@node1 ~]# apt-get install zlib* 2 –&gt; 下载及解压 Python3.5.0 源代码包 1234567891011[root@node1 ~]# cd /usr/local/[root@node1 ~]# wget https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tar.xz# 下载完成后进行减压：[root@node1 ~]# tar Jxvf Python-3.5.0.tar.xz# 减压后进入到相应目录，可以看到一个 README 文档。说明了如何进行安装：[root@node1 ~]# cd Python-3.5.0# 查看安装方法：[root@node1 Python-3.5.0]# cat README 3 –&gt; 编译安装 123456789101112# 编译后你会在目录 [/usr/local] 下发现新产生的：[python3.5] 目录[root@node1 Python-3.5.0]# ./configure --prefix=/usr/local/python3.5[root@node1 Python-3.5.0]# make &amp;&amp; make install### 日志信息如下：Ignoring indexes: https://pypi.python.org/simpleCollecting setuptoolsCollecting pipInstalling collected packages: setuptools, pipSuccessfully installed pip-7.1.2 setuptools-18.2# 同时提示成功安装 pip-7.12 与 setuptools！之后你就可以使用 pip 包管理器进行安装 Python 扩展包。{关于 pip，当前你知道它是用来解决 Python 库包依赖（一个扩展包的安装需要其它扩展包的安装支持）的工具即可。} 至此 Unix &amp; Linux 平台下 Python 的安装已完成！请跳转至【Python 环境变量配置】章节完成最后的配置即可开始 Unix &amp; Linux 平台下 Python 的学习之旅。 For Windows Platform以下为在 Windows 平台上安装 Python 的简单步骤： 二进制包安装 1）Python 2.X 版本安装： 以最新的 “Python 2.7 版本安装” 为样例： 打开 WEB 浏览器访问 https://www.python.org/downloads/windows/ 在下载列表中选择 Windows 平台安装包，包格式为：【python-XYZ.msi】 文件 ， XYZ 为你要安装的版本号。 要使用安装程序 【python-XYZ.msi】, Windows 系统必须支持 Microsoft Installer 2.0 搭配使用。需要看看你的机器是否支持 MSI，Windows XP 和更高版本已经有 MSI，很多老机器也可以安装 MSI。 只要保存安装文件到本地计算机，然后运行它即可（安装时，根据提示 Next 即可）。注意！！！为防止对系统原生环境的影响，不要勾选有关自动添加环境变量的选项（默认不勾选），随后我们会手动设置 Python 环境变量。 2）Python 3.X 版本安装： 以 “Python 3.5.1 版本安装” 为样例： 打开 WEB 浏览器访问 https:////www.python.org/ ，点击 Downloads，进入选择下载界面： 这里我选择的是：python3.5.1，会看到如下界面： 这里，我们需要安装的是 Windows 下的 Python 版本，所以在 Operating System 中可以选择对应的 Windows 版本。另外需要注意的是要根据系统位数选择相应位数（64-bit 或 32-bit） Python 安装二进制版本，现在主流的都是 64-bit的。 其中，executable 表示可执行版，需要安装后使用，embeddable 表示嵌入版，就是解压以后就可以使用的版本（免安装版本）。 Begin to Setup –&gt; 1 –&gt; executable setup 这里，我们选择安装可执行版本（executable），可执行版安装比较简单，step by step，then ok。注意！！！为防止对系统原生环境的影响，不要勾选有关自动添加环境变量的选项（默认不勾选），随后我们会手动设置 Python 环境变量。 2 –&gt; embeddable setup embeddable 版本 Python 安装好后一定需要配置环境变量。 Python 环境变量配置Python 默认安装完成后并不可以直接使用，即通过终端窗口输入 “python” 命令无法查看到 Python 版本信息（系统无法访问到安装好的 Python 可执行程序）如下，说明我们还需要为其配置系统环境变量。 123C:\\Users\\guoxx&gt;python'python' 不是内部或外部命令，也不是可运行的程序或批处理文件。 为什么需要配置环境变量？我们想要运行的程序或可执行文件（python.exe）可能位于系统中的许多目录，而这些路径很可能 不在操作系统提供可执行文件的搜索路径中。故，不可以直接执行这些程序或可执行文件。 而路径（PATH）可以存储到系统环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含系统中可用的命令行解释器（Python 解释器）和其他程序的位置信息。想要操作系统能够搜索到程序或可执行文件，我们需要将其相应的路径添加到系统环境变量中（注意在添加时，要加上环境变量中原有的路径 :$PATH，否则会覆盖原始路径，导致系统出错）。 因此，我们需要将 Python 相关的可执行文件或程序路径添加到系统环境变量 $PATH 中。 下面我们来看不同平台如何配置其环境变量： For Unix/Linux Platform1）export PATH 方法 在 csh shell: 输入 setenv PATH “$PATH:/usr/local/python” 在 bash shell (Linux): 输入 export PATH=”$PATH:/usr/local/python” 在 sh 或者 ksh shell: 输入 PATH=”$PATH:/usr/local/python” 注意: 【/usr/local/python】 是 Python 的安装目录。 2）构建 Python 使用软链接（推荐） 以上面 “Python-3.5.0 安装 样例为示例： 123# 产生软连接时要注意系统中已存在的 Python 软链接，防止原生 Python 调用被覆盖掉：# 覆盖掉后只能访问最新版本 python。[root@node1 Python-3.5.0]# ln -s /usr/local/python3.5/bin/python3.5 /usr/local/bin/python3.5 这里由于【/usr/local/bin/】 路径已在 PATH 中，故可以将 Python 解释器路径放于 /usr/local/bin 下。 For Windows Platform在环境变量中添加 Python 目录： 1）cmd 方法 在命令提示框中(cmd) : 输入 1path=%path%;C:\\Python;C:\\Python\\Scripts; 注意: C:\\Python 是 Python 的实际安装目录。 GUI 方法 右键点击”计算机”，然后点击”属性” 然后点击”高级系统设置” 选择 “系统变量” 窗口下面的 “Path”,双击即可！ 然后在 “Path” 行，添加 python 安装路径即可(C:\\Python)，所以在后面，添加该路径即可。 ps：记住，路径直接用分号 “；” 隔开！ 检测是否配置成功？在 命令行（终端） 中输入： 1python 或 python -V 如果配置成功的话，会有 Python 版本信息输出，并进入 Python 交互式环境（可执行 Python 语句）。如下： 1234Python 3.5.0 (default, Dec 1 2018, 17:15:02) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; 至此，我们已经完成了 Python 本地环境的安装以及配置，下面我们给出一个 “Python Hello World” 来验证本地环境已经搭建成功： Python Hello World首先，在 命令行终端 中输入：“python”，会进入 Python 交互式解释器环境： 12345[root@node1 ~]# pythonPython 3.5.0 (default, Dec 1 2018, 17:15:02) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; 然后在命令提示符 &gt;&gt;&gt; 之后输入命令： 1234# python 3 输入:print (&quot;Welcome to Python World&quot;)# python 2 输入:print &quot;Welcome to Python World&quot; 语句执行成功后会输出以下语句，表示 Python 本地环境搭建成功： 1Welcome to Python World Python 运行方式Python 本地环境搭建成功之后，我们来看如何使用搭建好的 Python 环境编写、运行 Python 程序。通常有三种方式： 交互式解释器你可以通过命令行窗口（Command Terminal）进入 Python 交互式解释器中开始编写 Python 代码。你可以在 Unix，DOS 或任何其他提供了命令行或者 shell 的系统进行 python 编码工作。如下： 12345# Unix/Linux &amp; Windows/DOS：Python 3.5.0 (default, Dec 1 2018, 17:15:02) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;print (&quot;Hello Python World&quot;) Python 交互模式的代码是输入一行，解释执行一行。 退出交互式环境： 12345# Unix/Linux &amp; Windows/DOS：Python 3.5.0 (default, Dec 1 2018, 17:15:02) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;exit() 可见，Python 交互模式主要是为了调试 Python 代码用的，也便于初学者学习，它不是正式运行 Python 代码的环境！ 命令行脚本在你的应用程序中通过 引入解释器 可以在命令行中执行 Python 脚本 【 HelloWorld.py 】，如下所示： 1234567# Unix/Linux：[root@node1 ~]# python HelloWorld.py # 或者# Windows/DOSC:&gt; python HelloWorld.py 注意：在执行脚本时，系统会检查脚本是否有可执行权限。命令行模式下直接运行 .py 文件是一次性执行该文件内的所有代码。 集成开发环境（IDE：Integrated Development Environment）和大多数程序设计语言一样，一个体验良好的集成开发环境对于 Python 程序开发是必不可缺的。这里推荐使用 PyCharm（大多数 Python 开发人员的首选）。 以 “PyCharm IDE” 为例： PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。 PyCharm 功能 : 支持调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制…… PyCharm 下载地址 : https://www.jetbrains.com/pycharm/download/ 以下展示的是 PyCharm 工作界面样例图（是不看起来相当美观）： ================================================================= 至此，这一章节的主要内容已经解读完成，基于上述内容的介绍你已经可以对照 Python 参考书开始 Python 语言的学习了。但我强烈建议你阅读下面的内容，它可以帮助你快速在 Python 学习中走的更远…… You Need Know MorePython 解释器详解前面我们一直提到 Python 解释器，当我们编写 Python 代码时，我们得到的是一个包含 Python 代码的以.py为扩展名的文本文件。要运行代码，就需要 Python 解释器去执行.py文件。 由于整个 Python 语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写 Python 解释器来执行 Python 代码（当然难度很大）。事实上，确实存在多种 Python 解释器。 1 –&gt; CPython 当我们从 Python 官方网站下载并安装好 Python 3.x 后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用 C 语言开发的，所以叫 CPython。在命令行下运行 python 就是启动 CPython 解释器。所以 CPython 是使用最广的 Python 解释器。 2 –&gt; IPython IPython 是基于 CPython 之上的一个交互式解释器，也就是说，IPython 只是在交互方式上有所增强，但是执行Python 代码的功能和 CPython 是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了 IE。 CPython 用 &gt;&gt;&gt; 作为提示符，而 IPython 用 In [序号]: 作为提示符。 3 –&gt; Jython Jython 是运行在 Java 平台上的 Python 解释器，可以直接把 Python 代码编译成 Java 字节码执行。 4 –&gt; PyPy PyPy 是另一个 Python 解释器，它的目标是执行速度。PyPy 采用 JIT 技术，对 Python 代码进行动态编译（注意不是解释），所以可以显著提高 Python 代码的执行速度。 绝大部分 Python 代码都可以在 PyPy 下运行，但是 PyPy 和 CPython 有一些是不同的，这就导致相同的 Python 代码在两种解释器下执行可能会有不同的结果。 5 –&gt; IronPython IronPython 和 Jython 类似，只不过 IronPython 是运行在微软 .Net 平台上的 Python 解释器，可以直接把 Python 代码编译成 .Net 的字节码。 注意：Python 的解释器很多，这里我们简单介绍了常见的几种，但使用最广泛的还是 CPython。如果要和 Java 或 .Net 平台交互，最好的办法不是用 Jython 或 IronPython，而是 通过网络调用来交互，确保各程序之间的独立性。 这一小节内容你可以先跳过，等后续对 Python 多版本使用有了较深的了解之后再来学习当前内容，这可以帮助你更深入、灵活地掌握 Python 环境的使用。 Python Versions Management设想这样的情景 –&gt; 场景一：A 项目是一个爬虫项目，需要用到 requests、pyspider、scrapy 等包或框架；B 项目是一个 GUI 界面项目，需要用到 GUI 相关的包或库；这需要把所有用到的包安装到原生 Python 环境中，开发环境越来越臃肿。 场景二：C 项目是一个 Python2.x 项目；D 项目是一个 Python3.x；两项目要求的 Python 版本不兼容。怎么办？！！ 解决思路 –&gt; 前面提到过一个系统中是可以同时存在多个 Python 版本，但是你需要注意新添加的 Python 环境对系统既有环境的影响，这就涉及到系统中多个 Python 版本的管理 问题。 篇幅原因，方案的详细说明请见同系列博文：Python-Vers Management 。","link":"/2018/01/01/python-jian-jie-yu-kai-fa-huan-jing-da-jian/"},{"title":"Pythoner 神器之 virtualenv","text":"Foreword 实际 Python 学习、开发过程中，往往由于各种原因，多 Python 版本解释器环境 &amp;&amp; 多版本的 Python 库（模块）需求是我们必然要面对的问题，这使得很多人在 Python 的环境管理上产生极大的混乱。甚至，不同的项目，或同一项目的不同阶段需要不同的 Python 解释器和依赖库。 那么，为每个 Python 项目，甚至每个脚本各自建立一套 “独立、隔离” 的 Python 环境（环境中可以自定义特定的 Python 版本以及特定的依赖库） 是必要的。 virtualenvvirtualenv 就是用来给每个 Python 项目，甚至每个脚本各自建立一套 “独立、隔离” 的 Python 运行环境的工具。 用 virtualenv 来保持一个干净、无污染的 Python 运行环境是非常有用的。 和主流的虚拟隔离环境工具类似，virtualenv 可以帮助你： 可以创建任意多个虚拟环境（可以看作成一个个容器），使用时指定到（切换到）某一虚拟环境之后 Pip 安装的包、库就只会在这个环境（容器）下；并且各虚拟环境（容器）之间，以及虚拟环境和系统原生环境之间是隔离的（一个个相互独立、隔离的容器）。 假设某一个虚拟环境预计不再使用，可以直接删除掉相应虚拟环境，由于虚拟环境的独立、隔离性，不用关注文件残留、关联问题。 虚拟机制virtualenv 管理的多版本 Python 运行环境示意图如下： 图解： 每个 Python 解释器都有一个特定的指向自己的 pip 工具，两者一一对应； 一个操作系统中，可以同时安装有多个不同版本的 Python 解释器（注意保证无冲突共存），你可以将其看作是 “操作系统级别” 的 Python 解释器； virtualenv 可以将上述任一 “操作系统级别” 的 Python 解释器，虚拟成为一个 “虚拟级别” 的 Python 解释器，Python 版本取决于虚拟时所使用 “操作系统级别” 的 Python 解释器 版本； 每个 “虚拟级别” 的 Python 解释器都拥有自己独立的 pip 工具和 site-package。 Setup这一小节来看 virtualenv 在 Windows &amp;&amp; Linux 平台下的安装方法。但前提是： 你的操作系统中必须已安装有一个 Python 环境。这是重要的，因为 virtualenv 的安装需要依赖于 Python 的包管理器——pip。 1 –&gt; Begin to setup Python 多版本共存环境下，建议直接使用操作系统下环境变量中指定的 Python 版本所绑定的 pip，安装命令如下： 1pip install virtualenv 当然，你也可以选择操作系统中其它的 Python 版本所指向的 pip 进行安装，上面只是为了方便命令调用和管理。 看到如下安装信息，表示 virtualenv 成功安装： 123...Successfully installed virtualenv-20.4.4 appdirs-1.4.4 distlib-0.3.1 filelock-3.0.12 importlib-resources-3.2.1... 你可以看到，除了安装 virtualenv 外，pip 还为我们安装了一些必须的依赖包。 2 –&gt; Setup Test 安装成功之后，我们还可以进行 virtualenv 版本安装测试。成功安装的话，可以查看到版本信息： 123456789101112131415# Windows InfoXXX Guo@LAPTOP-SNOSCKOB MINGW64 ~/Desktop$ pip -Vpip 9.0.3 from f:\\python\\python36\\lib\\site-packages (python 3.6)XXX Guo@LAPTOP-SNOSCKOB MINGW64 ~/Desktop$ virtualenv --versionvirtualenv 20.4.4 from f:\\python\\python36\\lib\\site-packages\\virtualenv\\__init__.py# Linux Inforoot@iZ2zeazcdax8nlsrpzpd83Z:~# pip -Vpip 20.3.4 from /usr/local/lib/python3.5/dist-packages/pip (python 3.5)root@iZ2zeazcdax8nlsrpzpd83Z:~# virtualenv --versionvirtualenv 20.4.4 from /usr/local/lib/python3.5/dist-packages/virtualenv/__init__.py 可以看到， 不管是 Windows 平台使用的是 python3.6，还是 Linux 平台下使用的 python3.5，virtualenv 均被成功安装到 操作系统下环境变量中指定的有效 Python 版本库（site-package/dist-package）中。 =================================================== 你或许有疑惑？设想若 Windows 下还存在一个 Python2.7，那我要虚拟 Python2.7 的版本怎么办？在 2.7 下也装一个 virtualenv？ 不需要的！virtualenv 可以指定虚拟的 Python 解释器版本，只要你本地操作系统的任一 Python 版本安装了 virtualenv 即可！ 关于 virtualenv 可以指定创建虚拟环境的 Python 解释器版本，可见下文中使用，这里有这个概念即可。 Envs Management这一小节来看，如何使用 virtualenv 进行虚拟隔离环境管理。 如何创建虚拟环境这里将以 Windows 为例来看如何使用 virtualenv 来创建虚拟环境，Linux 平台下与 Windows 操作无异。 使用 virtualenv 来管理所有的虚拟隔离环境，通常会建立一个单独的目录(virtualenvs_py)，用来放置 virtualenv 中管理的所有虚拟环境： 1mkdir E:\\virtualenvs_py 然后，先来为深度学习项目创建一个名为 for_tensorflow 的 Python 运行环境，执行如下命令： 1virtualenv -p F:\\\\Python\\\\Python36\\\\python.exe E:\\\\virtualenvs_py\\\\for_tensorflow 命令参数说明如下： -p：指定你要虚拟的 “操作系统级别” 的 Python 解释器版本，这里选择了系统中的 Python3.6.5； E:\\virtualenvs_py\\for_tensorflow：表示在 virtualenvs_py 目录下，建立一个名为 for_tensorflow 的虚拟环境，专门用于进行深度学习使用。 运行情况如下： 123456$ virtualenv -p F:\\\\Python\\\\Python36\\\\python.exe E:\\\\virtualenvs_py\\\\for_tensorflow created virtual environment CPython3.6.5.final.0-64 in 2759ms creator CPython3Windows(dest=E:\\virtualenvs_py\\for_tensorflow, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\\Users\\XXX Guo\\AppData\\Local\\pypa\\virtualenv) added seed packages: pip==21.0.1, setuptools==56.0.0, wheel==0.36.2 activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator 找到 for_tensorflow 虚拟环境目录，你可以发现 virtualenv 帮助你创建了一个非常 “干净” 的 Python 运行环境！ |&gt;&gt;================== “干净”何解？ ================== virtualenv 的最新版本，以 20.0.0+ 为例，取消了 –-no-site-packages 参数，默认已经使用了 –-no-site-packages 模式，表示 “虚拟级别” 的 Python 运行环境，不可以访问源 “操作系统级别” Python 解释器的第三方库。 与之相对的，还有另外一个参数 –system-site-packages，表示 可以访问源 “操作系统级别” Python 解释器的第三方库。一般推荐直接使用默认模式。 最终命令格式如下： 1virtualenv -p python_xxx envs_destination 表示：使用 “操作系统级别” Python 解释器（python_xxx），来虚拟一个名为 “envs_destination” 的虚拟环境。并且，虚拟环境中不包含任何来源于 “python_xxx” 的第三方库（纯净）。 ==============================================&lt;&lt;| 几种常见的创建虚拟环境的命令格式以及其含义： 123456789# 1. 使用系统默认指定的 Python 解释器来创建 “env_py36”（不使用 &quot;-p&quot; 选项）$ virtualenv env_py36# 2. 多版本 Python 共存环境，创建指定 Python 版本的解释器虚拟环境$ virtualenv -p F:\\\\Python\\\\Python27\\\\python.exe env_py27 # 解释器为 python2.7（Linux）$ virtualenv -p python3.5 env_py35 # 解释器为 python3.5# 3. 创建继承系统第三方库的虚拟环境$ virtualenv --system-site-packages env_py34 如何激活虚拟环境虚拟环境创建成功之后，不能立即使用！使用某一虚拟环境之前，你需要启动（激活）特定的虚拟环境之后，才可以使用。 1 –&gt; For Windows 以 “for_tensorflow” 虚拟环境为例： 命令行下，进入你要使用的虚拟环境的目录下的 Script 文件夹，运行 activate 命令，或者使用绝对路径的方式调用该命令。 123456789101112131415161718192021E:\\virtualenvs_py\\for_tensorflow\\Scripts&gt;dirE:\\virtualenvs_py\\for_tensorflow\\Scripts 的目录2021/04/30 21:16 &lt;DIR&gt; .2021/04/30 21:16 &lt;DIR&gt; ..2021/04/30 21:16 2,152 activate # 环境激活命令2021/04/30 21:16 1,025 activate.bat2021/04/30 21:16 3,075 activate.fish2021/04/30 21:16 1,755 activate.ps12021/04/30 21:16 1,166 activate.xsh2021/04/30 21:16 1,193 activate_this.py2021/04/30 21:16 510 deactivate.bat2021/04/30 21:16 106,362 pip-3.6.exe2021/04/30 21:16 106,362 pip.exe......# 启动（激活）for_tensorflow 环境E:\\virtualenvs_py\\for_tensorflow\\Scripts&gt;activate# 或者使用绝对路径：(for_tensorflow) E:\\virtualenvs_py\\for_tensorflow\\Scripts&gt; 注意命令提示符（for_tensorflow），它表示你当前在 for_tensorflow 这个虚拟环境内，你认为你当前处于一个纯净的、可以正常使用的 Python 环境。 当前环境下，1. 运行 Python 命令；2. 使用 pip 工具安装第三方库。这些操作都会被限制、绑定到 for_tensorflow 这个虚拟环境，不会对操作系统原生的 Python 环境和其它虚拟环境产生任何影响。 2 –&gt; For Linux 对于 Linux 平台下，由于虚拟环境中的文件路径（activate）和脚本调用的方式（source）不同，激活虚拟环境和 Windows 有略微不同。 以 “env27” 虚拟环境为例： Linux 中 activate 脚本位于 &lt;env27\\bin&gt; 目录中，所以启动虚拟环境命令为： 1$ source env27/bin/activate 这个命令会修改系统路径 $PATH，把 env27/bin 的路径至于系统路径之前。 如何退出虚拟环境Windows &amp;&amp; Linux 下，退出当前虚拟环境只需要执行如下命令，即可回退到系统原生的 Python 运行环境： 1$ deactivate 如何删除虚拟环境当某一虚拟环境不再使用时，你可以将其删除释放系统资源。 Windows &amp;&amp; Linux 下，删除虚拟环境（for_test）时，你只需要将 virtualenvs_py 目录下，准备弃用的 for_test 虚拟环境目录删除掉即可！ Application这里给出一个 virtualenvs 虚拟环境管理器配合 pip 包管理工具，确保开发环境一致性的应用实例： 假设：在本地开发环境，已经准备好了 “项目 + 依赖包” 环境；现在需要将项目上传至服务器，上线发布；那么，保证本地和服务器 Python 运行环境的一致性至关重要！ 解决方案 –&gt; 1 –&gt; pip list 首先，我们需要使用 pip list 命令，来查看当前 Python 运行环境中项目依赖包的安装情况： 12345678910111213141516171819202122(for_test1) E:\\virtualenvs_py\\for_test1&gt;pip listPackage Version------------------- ---------appdirs 1.4.4certifi 2020.12.5chardet 4.0.0distlib 0.3.1filelock 3.0.12idna 2.10importlib-metadata 4.0.1importlib-resources 5.1.2numpy 1.19.5pip 21.0.1requests 2.25.1setuptools 56.0.0six 1.15.0typing-extensions 3.7.4.3urllib3 1.26.4virtualenv 20.4.4wheel 0.36.2zipp 3.4.1WARNING: The repository located at mirrors.aliyun.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS we recommend you use HTTPS instead, otherwise you may silence this warning and allow it anyway with '--trusted-host mirrors.aliyun.com'. 2 –&gt; pip freeze virtualenv 虚拟环境，配合 pip 的 freeze 功能，可以将当前虚拟环境中所有的依赖包以及其版本信息以列表的形式存放到文件中： 1$ pip freeze &gt; requirements.txt 3 –&gt; pip install xxx 对应的，我们可以将上述生成的文件上传至服务器项目发布目录，然后在服务器下创建 virtualenv，即可使用下面的命令在 venv 中重新安装项目所需的模块依赖： 1$ pip install -r requirements.txt virtualenvwrappervirtualenvwrapper 是一个基于 virtualenv 的升级版本，相较于 virtualenv，virtualenvwrapper 更容易对所有的虚拟环境进行统一管理。 Why virtualenvwrapper参考上文，你可以发现 virtualenv 存在的一个最大缺点就是： 使用 virtualenv 创建虚拟环境时，如果你没有特别的，有意识的去统一管理虚拟环境目录，很容易导致虚拟环境放的到处都是。 其次，每次开启虚拟环境之前要去虚拟环境所在目录下的 bin（Scripts） 目录下 activate，这就需要我们记住每个虚拟环境所在的目录。并且还有可能你忘记了虚拟环境放在哪…… 而使用 virtualenvwrapper 默认会将所有的虚拟环境都统一管理在一个目录下，你可以很方便、快捷的找到所有的虚拟环境。 Setup我们同样需要使用 pip 工具来进行 virtualenvwrapper 的安装，并且 Windows &amp;&amp; Liunx 平台下的安装、配置过程稍有不同： For Linux1 –&gt; Setup virtualenvwrapper 命令如下： 1$ pip install virtualenvwrapper Linux 中 virtualenvwrapper 默认将所有的虚拟环境放在 ～/.virtualenvs 目录下管理，另外可以通过修改环境变量 WORKON_HOME 来指定虚拟环境的保存目录。 12# 为了保持和后文 Windows 保持一致，可以设置为统一目录：Envsexport WORKON_HOME=~/Envs 2 –&gt; Config virtualenvwrapper Linxu 中，每次打开一个 Shell 想要使用 virtualenvwrapper 工具之前，都必须先激活 virtualenvwrapper 服务 123root@iZ2zeazcdax8nlsrpzpd83Z:~# find / -name virtualenvwrapper.sh/usr/local/bin/virtualenvwrapper.shroot@iZ2zeazcdax8nlsrpzpd83Z:~# source /usr/local/bin/virtualenvwrapper.sh 这是麻烦的，可以将上述命令添加到：.bashrc || .profie 等 shell 启动文件中。以便 shell 登陆后可直接使用 virtualenvwrapper。 例如，在 .bashrc 中添加如下内容： 12export WORKON_HOME=~/Envs # 设置 virtualenv 的统一管理目录source /usr/local/bin/virtualenvwrapper.sh # 激活 virtualenvwrapper 工具 读取文件，使得配置生效： 1source ~/.bashrc For WindowsWindows 安装命令如下： 1pip install virtualenvwrapper-win 默认创建的虚拟环境管理目录位于 C:\\Users\\username\\Envs，可以通过环境变量 WORKON_HOME 来定制： 通过计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。 Envs Management这一小节，我们来看：相较于 virtualenv 工具virtualenvwrapper 是如何进行虚拟环境的统一管理。 Windows &amp;&amp; Linux 下 virtualenvwrapper 虚拟环境管理命令是一致的！ 如何创建虚拟环境使用下列命令可以在 ~/Envs 目录创建 for_tensorflow 虚拟环境目录： 1$ mkvirtualenv for_tensorflow 创建后，自动进入到相应虚拟环境中。 如何激活&amp;退出虚拟环境使用下列命令可以激活 for_tensorflow 虚拟环境： 1$ workon for_tensorflow workon env_name：可以实现在虚拟环境中来回切换。 使用下列命令可以退出 for_tensorflow 虚拟环境： 1$ deactivate 如何删除虚拟环境使用下列命令可以删除 for_tensorflow 虚拟环境： 1$ rmvirtualenv for_tensorflow 其它常用其他命令 lsvirtualenv列举所有的环境（可以直接使用 workon + Enter 代替）。cdvirtualenv导航到当前激活的虚拟环境的目录中。cdsitepackages导航到当前激活的虚拟环境的目录中的 site-packages 目录中。lssitepackages显示 site-packages 目录中的内容。","link":"/2018/01/02/pythoner-shen-qi-zhi-virtualenv/"},{"title":"一文学会 Hexo 轻量级框架的博客搭建【持续更新】","text":"HEXO 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 写在前面–&gt; 在开始 Hexo 轻量级博客框架搭建之前，首先说明本文所作目的： 其一：本文作为基于 Hexo Frame 搭建个人博客过程记录，方便日后回顾使用； 其二：由于在搭建过程中受益于博客上分享过 Hexo 环境搭建的前辈们（致敬~），故作此以分享给更多的 Hexo 新手小白们。 如文中有表述不恰当的地方，欢迎各位在留言区进行指正，若有转载请注明出处！ 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Getting Started with HexoHexo 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 注意，在正式开始 Hexo 博客安装以及搭建之前，我们需要预先准备 Hexo 安装环境依赖（预安装环境），这是必须的！否则会影响到后续 Hexo 的安装、搭建过程。所以下面我们需要先来 部署 Hexo 预安装环境： 安装 Node.js前面提过，Hexo 博客需要 Node.js 来进行渲染，才可以完成最终博客静态页面的显示。关于 Node.js 的详细下载以及安装过程说明请参见：Hexo 预安装环境搭建之 Node.js ，这里提供了不同平台下 Node.js 的安装过程。 –&gt; 到这里，相信你已经完成了 Node.js 的安装。 安装 Git关于 Git，你可以理解为 Hexo + Git 的搭配方案才可以让互联网内的其他用户可以正常访问我们的博客站点（否者只能本地访问），甚至博客的多平台协同管理（家&amp;公司&amp;学校…多环境博客创作）也要靠 Git 来支持。 Git 的详细下载以及安装过程说明请参见：Git 使用指南之初识 ，这里不仅提供了不同平台下 Git 的安装记录，还包含了 Git 快速入门指南 来帮助你快速了解 Git。 –&gt; 到这里，相信你已经完成了 Git 的安装。 维护一个 Github 远程仓库首先通过 Github 官网 ，注册一个 Github 账号并完成登陆。 在 Github 上新建一个 Repository（远程仓库），显示如下： 注意：Repository 名称最好是 Github 账号名（保证唯一，这里我的 Github 账户名是：TheNightIsYoung），并且一定要加 .github.io，所以最终我所创建的 Github 仓库名称为：TheNightIsYoung.github.io。 接着，我们还需要为 Github 和 本地 Git 配置 SSH Key，具体配置过程可以参见 Git 使用指南之远程仓库 中 “GitHub 配置 SSH Key” 章节内容。 维护一个 Gitee 远程仓库首先通过 Gitee 官网 ，注册一个 Citee（码云）账号并完成登陆。 当然，你还可以选择其它 国内远程仓库，这里配置另外一个远程仓库的目的主要是为了解决 Github 的访问速度较慢的问题（不要深究，后续会进行说明）。 例如：如果你使用过 腾讯云开发者平台 或者 Coding（腾讯云开发者平台是由腾讯云与 CODING 共同开发的）的用户无须使用 Gitee 平台远程仓库，可以直接使用 Coding 平台。两者在使用上几乎没有差异（但这里博主推荐使用 Gitee，一些原因博主感觉 Coding 越来越不友好了….越来越开始向钱看齐了）。 以 Gitee 平台为例，新建一个项目（Repository），如下： 这里注意：和 Github 一样，Repository 名称也要和账户名称一致。同样，我们需要为 Gitee 配置 SSH Key，在账户 Settings 中点击 SSH keys，添加一个 SSH KEY，将之前公钥的内容添加进去。然后测试是否成功连接： 123456C:\\Users\\Jie Guo&gt;ssh -T git@gitee.comThe authenticity of host 'gitee.com (212.64.62.183)' can't be established.ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'gitee.com,212.64.62.183' (ECDSA) to the list of known hosts.Hi TheNightIsYoung! You've successfully authenticated, but GITEE.COM does not provide shell access. 预安装环境部署至此就完成了~ 下面我们正式开始 Hexo 博客的搭建： Hexo 安装以及初始化NPM 安装 Hexo使用 NPM 管理工具安装 Hexo 在预安装环境部署中我们已经成功安装 Node.js，这里无需单独安装 npm（Node.js 中已包含了 npm），打开 Git Bash（桌面点击鼠标右键）运行以下命令安装 Hexo： 1$ npm install -g hexo-cli 回车之后，日志信息输出中可能会出现 WARN 的警告语句，不要担心，等着即可…。过一段时间如果出现hexo 版本号信息输出的语句就代表安装成功了。如下： 123456npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+hexo-cli: 1.1.0audited 4700 packages in 5.05sfound 0 vulnerabilities –&gt; npm install 很慢很慢的问题，请参见博文 1.4 常见问题。 安装完后输入 hexo -v 验证是否安装成功： 123456789101112131415161718$ hexo -vhexo: 3.8.0hexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.0v8: 6.8.275.32-node.45uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 初始化 Hexo 博客目录首先在任意一个位置新建一个文件夹用于存放 Hexo 初始化博客文件，这里我选择 F:/HexoBlogProject ： 12$ cd F:$ mkdir HexoBlogProject 然后在 Git Bash 中依次运行以下命令来 初始化 Hexo 项目： 123$ hexo init &lt;floder&gt;$ cd &lt;floder&gt;$ npm install 实际环境测试如下： 123456789101112131415161718192021222324252627282930313233343536373839$ hexo init HexoBlogProject/INFO Cloning hexo-starter to F:\\HexoBlogProjectCloning into 'F:\\HexoBlogProject'...remote: Enumerating objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68Unpacking objects: 100% (68/68), done.Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'Cloning into 'F:/HexoBlogProject/themes/landscape'...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 867 (delta 0), reused 0 (delta 0), pack-reused 866Receiving objects: 100% (867/867), 2.55 MiB | 1.64 MiB/s, done.Resolving deltas: 100% (459/459), done.Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm WARN deprecated postinstall-build@5.0.3: postinstall-build's behavior is now built into npm! You should migrate off of postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.&gt; nunjucks@3.1.6 postinstall F:\\HexoBlogProject\\node_modules\\nunjucks&gt; node postinstall-build.js srcnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})added 422 packages from 501 contributors and audited 4700 packages in 23.449sfound 0 vulnerabilitiesINFO Start blogging with Hexo!$ cd HexoBlogProject/$ npm installnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})audited 4700 packages in 5.05sfound 0 vulnerabilities 看到 INFO Start blogging with Hexo！ 是不很激动！！！此时我们来看一下 Hexo 初始化目录 HexoBlogProject 结构，如下： 123456789HexoBlogProject.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes HexoBlogProject 站点目录说明这一小节我们简要介绍一下站点目录结构，这将有助于我们进一步了解 Hexo 博客框架的工作原理。 1）package.json：hexo 框架的参数和所依赖插件： 12345678910111213141516171819{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;3.8.0&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.1&quot; }} 2）scaffolds—脚手架、骨架 当我们想要新建一篇文章的时候，hexo 是根据这个目录下的文件进行构建的，基本不用关心。 3）source—博文目录 source 目录下包含一个 _posts 目录 ：需要新建的博文都放在 _posts 目录下。 _posts 目录下是一个个 MarkDown 文件。默认情况下有一个 hello-world.md 的文件，博文就在这个文件中编辑。 _posts 目录下的 MarkDown 文件，最终会被编译成 html 文件，放到 public`（此文件现在应该没有，因为 Blog 项目初始化之后还没有编译过）文件夹下。 4）themes—主题目录 themes 为博客网站主题目录，Hexo 有非常好的主题拓展，支持的主题也很丰富，通过更换主题会使得你的博客更加酷炫，后面的博文会教你如何更换 Hexo 主题。 \\themes 目录下每一个子目录就是一个主题，默认情况下子目录如下： 123themes.|-- landscape // 默认主题 当然我们可以下载自己满意的主题到该目录下，hexo主题传送门。 5）_config.yml—站点配置文件： 博客站点的很多信息都在这里配置：诸如网站名称、副标题、描述、作者、语言、主题等等参数。这里我们给出_config.yml 文件中的内容，以及主要参数说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Hexo # 网站标题subtitle: # 网站副标题description: # 网站描述keywords:author: John Doe # 作者language: # 语言timezone: # 网站时区：Hexo 默认使用当前电脑的时区。时区列表，比如说：America/New_York, Japan, 和 UTC 。# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com # 站点的 Urlroot: / # 站点的根目录permalink: :year/:month/:day/:title/ # 文章的“永久链接”格式 permalink_defaults: # 永久链接中各部分的默认值# Directorysource_dir: source # 资源文件夹：用来存放 hexo 内容public_dir: public # 公共文件夹：这个文件夹用于存放生成的站点文件。tag_dir: tags # 标签文件夹archive_dir: archives # 归档文件夹category_dir: categories # 分类文件夹code_dir: downloads/code # Include code 文件夹i18n_dir: :lang # 国际化（i18n）文件夹skip_render: # 跳过指定文件的渲染：可使用 glob 表达式来匹配路径# Writingnew_post_name: :title.md # File name of new posts # 新文章的文件名称default_layout: post # 预设布局titlecase: false # Transform title into titlecase # 把标题转换为 title caseexternal_link: true # Open external links in new tab # 在新标签中打开链接filename_case: 0 # 把文件名称转换为 ‘1’ 小写或 ‘2’ 大写render_drafts: false # 是否显示草稿post_asset_folder: false # 是否启动 Asset 文件夹relative_link: false # 把链接改为与根目录的相对位址 future: true # 显示未来的文章highlight: # 内容中代码块的设置 enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map: # 分类别名tag_map: # 标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD # 日期格式time_format: HH:mm:ss # 时间格式# Pagination## Set per_page to 0 to disable paginationper_page: 10 # 分页数量pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # 主题名称# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 部署部分的设置 type: # 类型：常用的是 Git 关于 HexoBlogProject 站点目录配置以及使用，后续我们进行博客配置时会具体说明，这里不再赘述。 Hexo 本地博客上面我们已经完成了 Hexo 本地博客的安装以及搭建，注意只是 本地博客（只可以在你本地运行，其他人在互联网上是看不到的）。现在我们来启动 Hexo 本地服务，进行本地博客预览测试。Git Bash 中运行以下命令： 123$ hexo server （或 hexo s）INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 此时，通过浏览器访问 http://localhost:4000/ ，就可以看到 Hexo 的原始博客内容，页面如下所示： 至此，我们已经可以在本地使用 Hexo 博客了。 但其实我们更加关注的是如何将 Hexo 博客发布到 Internet 上供其他人分享交流，下面我将会给出一个解决方案——将我们搭建好的本地 Hexo 博客项目推送到公共代码仓库以提供公共访问。 Hexo 个人博客实施方案实施方案一：Github·PageGithub·Page 方法是将本地 Hexo 博客推送至 GithubPages 以实现公共访问： 1）首先，安装 hexo-deployer-git 插件，Git bash 下运行下面命令： 12345678910$ npm install hexo-deployer-git --savenpm WARN deprecated swig@1.4.2: This package is no longer maintainednpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ hexo-deployer-git@0.3.1added 31 packages from 36 contributors and audited 5870 packages in 11.225sfound 1 low severity vulnerability run `npm audit fix` to fix them, or `npm audit` for details 2）然后，修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master 实际环境测试： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master 这里，我的 Github account name（Github 账户名称）为：TheNightIsYoung。 注意：仓库地址最好使用 SSH 访问，不要填写 Http 地址。 3）将本地 Hexo 博客推送至 GithubPages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 生成静态页面：$ hexo generate （或：hexo g）INFO Start processingINFO Files loaded in 272 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: fancybox/fancybox_loading.gifINFO Generated: archives/2019/index.htmlINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: archives/2019/01/index.htmlINFO Generated: js/script.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: css/fonts/FontAwesome.otfINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/style.cssINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2019/01/07/hello-world/index.htmlINFO Generated: fancybox/jquery.fancybox.jsINFO Generated: css/images/banner.jpgINFO 28 files generated in 650 ms# 部署至 GithubPages：$ hexo deploy （或：hexo d）INFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) 6d469d7] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master c71b7a5] Site updated: 2019-01-08 12:03:08 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.To github.com:TheNightIsYoung/TheNightIsYoung.github.io.git * [new branch] HEAD -&gt; masterINFO Deploy done: git 4）通过浏览器访问网址： https://&lt;Your github account name&gt;.github.io 就可以看到和本地 hexo 博客相同页面。 ================================================= 对比 Hexo 站点目录，观察一下被推送到远程仓库的文件，你是否发现： 远程仓库中的资源文件，其实就是我们的 .../&lt;Hexo 站点目录&gt;/public 目录下的内容（博客静态页面）。简单来说，执行 hexo d 命令会将站点目录下 ：public 目录下的内容推送到远程仓库，而 Hexo 博客项目的配置文件、主题、scaffolds 等等，仍在我们本地储存维护…. 实施方案二：Github·Page + Gitee·Page使用过 Github 都知道，Github 有时候在国内访问较慢，而 Gitee 国外访问较快。故除了添加 Github 仓库外，我们可以在第一种实施方案的基础上配置 Citee·Page。 1）hexo-deployer-git 插件已经安装过，这里可以直接跳过； 2）修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master- type: git repo: git@gitee.com:&lt;Your coding account name&gt;/&lt;Your coding account name&gt;.git branch: master 实际环境测试： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master- type: git repo: git@gitee.com:thenightisyoung/thenightisyoung.git branch: master 这里，我的 gitee account name（Gitee 账户名称）为：thenightisyoung。 3）将本地 Hexo 博客推送至 GiteePages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ hexo g$ hexo dINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) c9fcced] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master 498e47c] Site updated: 2019-01-08 13:55:57 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git + c425509...498e47c HEAD -&gt; master (forced update)INFO Deploy done: gitINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheMusicIsLoud/TheMusicIsLoud.git'.To git.dev.tencent.com:TheMusicIsLoud/TheMusicIsLoud.git * [new branch] HEAD -&gt; masterINFO Deploy done: git ４）Gitee 还需要通过 Gitee Pages 服务 ，才能开启静态 Pages 应用（Service –&gt; Gitee Pages）。如下页面显示： 开启成功后界面如下： 5）通过浏览器访问网址： https://&lt;Your coding account name&gt;.gitee.io/ 同样也可以访问到 hexo 博客页面 12# 我的访问链接如下：https://thenightisyoung.gitee.io 实施方案三：Github·Page + Gitee·Page + domain name上面我们已经将 Hexo 个人博客远程托管到 Gihub &amp; Gitee上了。 还能不能再继续优化一下方案？？？ 问题：一方面每一次进行访问时，我们都需要通过 https://&lt;Your coding account name&gt;.coding.me 或者 https://&lt;Your github account name&gt;.gitee.io 一长串的域名来进行访问，显得非常繁琐；另一方面我们有一个闲置的域名，单纯想做域名映射，以达到通过域名即可访问我们的个人博客。 前提：你有一个闲置的自定义域名。这里你可以为 Github·Page 或者 Gitee·Page 配置域名映射，二选其一。Gitee 域名绑定目前只面向企业用户（难受），所以这里我们会将自定义域名绑定到 Github Page（Github 支持 CDN 加速快速访问）。 1）配置 Github·Page 的域名映射 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your github account name&gt;.github.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.github.io# TTL：默认选项即可 注意：要确认你的域名的解析状态为正常状态！ 2 –&gt; 博客 Github 仓库设置： 首先打开博客仓库设置：https://github.com/&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io/settings 找到 Custom domain，填写好自定义域名（例如：www.xxxxxx.com），点击 save。 –&gt; 启用 Github Page HTTPS ： 自 2018 年 5 月 1 日，Github 支持自定义域名的 HTTPS 请求了，直接在 Custom domain 下勾选 Enforce HTTPS 即可开启。 配置也相当简单，只需要更新 DNS 配置里的 A 记录，将其指向以下4个 IP 地址中的至少一个。 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 HTTPS 让你的网站和网站访客更安全，并且 Github 提供的这些 IP 地址自动将你的站点加入了 CDN，提高了访问速度（真香~）。 3 –&gt; 在 Hexo 站点目录中的 public 目录下创建 CNAME 文件，内容如下： www.xxxxxx.com 部署： 1$ hexo d 4 –&gt; 等待一段时间（域名生效时间，10分钟左右）后，我们发现已经可以通过我们的域名访问到个人博客了。 2）配置 Gitee·Page 的域名映射（Gitee Page Pro） 当前 Gitee Page Pro 是支持自定义域名版本的 Gitee Page，留一个小期待吧，希望码农后续可以支持普通用户的 Gitee·Pages 绑定自定义域名，持续关注 。 未来可期，配置相同 –&gt; 在上述 配置 Github·Page 的域名映射 基础上进行如下设置，即可将域名指向 &lt;Your gitee account name&gt;.gitee.io： 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your gitee account name&gt;.gitee.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your gitee account name&gt;.gitee.io# TTL：默认选项即可 注意：要确认域名解析状态为正常状态！ 2 –&gt; 打开 Pages 服务, 进行域名绑定即可。 至此，你就可以通过你的自定义域名进行 Hexo 博客的访问了。 Problem &amp;&amp; Solution1）Github·Page 配置域名绑定问题 问题描述：Github·Page 项目成功绑定了自定义域名之后，可以正常通过域名进行站点访问了。但发现一个现象，在部署上传新的文章后，访问又双叒变成了 404 ？？？ WTF！？在我打算再次重新配置 Github·Page 的时候，我突然发现仓库 Settings 页面绑定域名的那一栏变成空了，是谁动了我的奶酪？？？ 度娘上查到，在为 Github·Page 配置域名绑定之后，会在当前仓库中自动生成一个 CNAME 文件（你可以重新 Save 域名试一下），查看 CNAME 文件内容： 12# 只有一行语句，就是你的域名your domain name 而我们在 hexo d 重新部署之后，发现 CNAME 文件不见了。 你很容易可以想到，hexo d 时，Hexo 会将 public 目录中的文件和目录推送至远端仓库指定分支中，并且完全覆盖该分支下的已有内容。 也即是说，前面我们在 “实施方案一：Github·Page” 配置过程中，由于 public 文件下没有 CNAME 文件，导致远程仓库中的域名绑定相关的 CNAME 文件 被覆盖掉了，≧ ﹏ ≦ 知道了原因，下面我们给出解决方法： 我们知道，站点目录下 public 中的文件是由 source 文件夹的内容生成的。我们尝试一下在 source 目录下添加一个 Github·Page 需要的 CNAME 文件 ，内容如下； 12# 我的域名www.orangeshare.cn 然后执行如下命令，清除以及重新生成静态页面内容： 12$ hexo clean$ hexo g 可以观察到，重新生成的 public 目录下，已经包含 CNAME 文件 了，有点小激动啊~ 再次 hexo d 推送试一下。成功了 O(∩_∩)O","link":"/2017/09/20/yi-wen-xue-hui-hexo-qing-liang-ji-kuang-jia-de-bo-ke-da-jian-chi-xu-geng-xin/"},{"title":"Git 使用指南之分布式开发","text":"版权说明： 本文思路以及内容主要来自廖雪峰老师的 Git 教程 （强烈推荐膜拜原文），并结合个人使用所作，只作为学习记录使用。如内容有侵权请联系删除，禁止转载！ 更多 Git 相关内容，请关注博主 Git 博文系列： 之一 &gt;&gt;&gt; Git 使用指南之初识 之二 &gt;&gt;&gt; Git 使用指南之时光穿梭机 之三 &gt;&gt;&gt; Git 使用指南之远程仓库 之四 &gt;&gt;&gt; Git 使用指南之分支管理 之五 &gt;&gt;&gt; Git 使用指南之分布式开发","link":"/2017/07/05/git-shi-yong-zhi-nan-zhi-fen-bu-shi-kai-fa/"}],"tags":[{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Java Modifier","slug":"Java-Modifier","link":"/tags/Java-Modifier/"},{"name":"DataType","slug":"DataType","link":"/tags/DataType/"},{"name":"Variable","slug":"Variable","link":"/tags/Variable/"},{"name":"PyVers-Management","slug":"PyVers-Management","link":"/tags/PyVers-Management/"},{"name":"virtualenv","slug":"virtualenv","link":"/tags/virtualenv/"},{"name":"conda","slug":"conda","link":"/tags/conda/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"anaconda","slug":"anaconda","link":"/tags/anaconda/"},{"name":"Picture bed","slug":"Picture-bed","link":"/tags/Picture-bed/"},{"name":"Operator","slug":"Operator","link":"/tags/Operator/"},{"name":"prefix","slug":"prefix","link":"/tags/prefix/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"Anaconda","slug":"Anaconda","link":"/categories/Anaconda/"}]}