{"pages":[],"posts":[{"title":"Eclipse 2020 Shortcut Key","text":"Eclipse 2020 版本常用快捷键。 注释快捷键1 –&gt; ctrl+shift+/ 使用 */ */**（块注释）自动注释掉选择的代码块。 问题：注释后多行语句乱码（合并为一行），取消注释无法恢复 Window –&gt; Perference –&gt; Java –&gt; Code Style –&gt; Formatter –&gt; 取名（my_add_annotation）–&gt; Edit –&gt; Comments（左侧）–&gt; 勾掉：Enable block comment formatting –&gt; Apply –&gt; OK –&gt; Apply and Close; 2 –&gt; ctrl+shift+\\ 取消 */ */**（块注释）注释。 3 –&gt; ctrl+/ 使用 //**（行注释）自动 **注释或取消注释 选择的多行代码。 4 –&gt; ctrl+shift+j 快速为文档，类，方法等添加模板注释。 注释模板修改： Window –&gt; Preferences –&gt; Java –&gt; Code Style –&gt; Code Templates –&gt; Comments –&gt; Types –&gt; Edit； ============================================= 文档注释模板格式： 12345678910/** * Project Name: ${project_name} * Class Name: ${type_name} * Created By: ${user} * Created At: ${date} ${time} * E-Mail: ${name:git_config(user.name)} * @Version * * ${tags} */ ============================================= 编辑快捷键1 –&gt; ctrl+d 删除当前光标所在行。 2 –&gt; ctrl+shift+enter 在当前行上插入一行。 3 –&gt; ctrl+shift+enter 在当前行下插入一行。 4 –&gt; alt+/ 自动补全代码或者提示代码。 问题：Eclipse 编写代码不能自动补全，而需要不停的按 ALT+/ 或者检测到 . 才会进行补全。 Window –&gt; Perference –&gt; Java –&gt; Editor –&gt; Content Assist –&gt; Auto activation triggers for Java（右侧，只有一个 . 存在） –&gt; 改为：**.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ** –&gt; Apply –&gt; OK; 这样，就可以通过代码补全，自动生成 main，getter，setter，toString 等方法了。 5 –&gt; ctrl+shift+o 自动引入包和删除无用包。 6 –&gt; ctrl+shift+f 格式化代码。 问题：使用搜狗输入法/微软输入法，会和 “繁/简体切换” 快捷键冲突。 关闭输入法 “繁/简体切换 ” 快捷键“ 。 7 –&gt; alt+↑/↓ 移动一行或多行。 8 –&gt; ctrl+alt+↑/↓ 复制选择的一行或多行代码块。 9 –&gt; F3 快速查看源码。 窗口快捷键1 –&gt; alt+← 全局 后退历史记录。 2 –&gt; alt+→ 全局 前进历史记录。 3 –&gt; ctrl+o 快速 Outline 视图：查看当前文件中的类、方法名。 4 –&gt; ctrl+PgDn/PgUp 选项卡之间快速切换。 5 –&gt; ctrl+h 全局 搜索对话框。 6 –&gt; ctrl+f 当前文件搜索、替换对话框。 Debug 模式快捷键1 –&gt; F11 Debug 模式运行程序。 2 –&gt; F5 单步调试进入函数内部。 3 –&gt; F6 单步调试不进入函数内部。 4 –&gt; F8 一直执行到下一个断点。 5 –&gt; F7 由函数内部返回到调用处。 6 –&gt; alt+shift+x 正常运行应用。","link":"/2017/10/11/Eclipse-2020-Shortcut-Key/"},{"title":"Git 使用指南之初识","text":"","link":"/2017/10/01/Git-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E4%B9%8B%E5%88%9D%E8%AF%86/"},{"title":"Hello, Hexo Matery World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Begin To Edit ArticleDoc Front-Matter PolicyFront-matter 选项中的所有内容均为 非必填 的。推荐至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。 The Simple Demo1234---title: typora-vue-theme主题介绍date: 2017-12-18 00:55:00--- The Most Complete Demo1234567891011121314151617---title: Hello, Hexo Worlddate: 2017-12-18 00:55:00author: Waldeinsamkeitimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags: - Hexo - Markdown---","link":"/2017/09/23/Hello-Hexo-Matery-World/"},{"title":"Hexo 预安装环境部署之 Node.js","text":"Hexo 是一个快速、简洁且高效的博客框架。Hexo 通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。因此安装 Hexo 前，我们必须完成 Node.js 应用程序的下载和安装。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Node.js了解一定网页基础的同学肯定听说过 JavaScript。Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。简单的说， Node.js 就是运行在服务端的 JavaScript。 当然不了解 JavaScript 的同学也不要慌张，我们只需要将 Node.js 理解为：是 Hexo 用来渲染我们博客页面的插件即可。毕竟这里我们更关注的 Node.js 下载和安装，并不关心其原理以及使用。 开始安装之前，这里先给出 Node.js 安装包及源码下载地址。截至目前， Node.js 最新可供下载安装版本为：v10.15.0 (includes npm 6.4.1)。官网下载界面如下，我们可以根据不同平台的下载要求获取相应的安装包： 当然，你也可以从 Node.js 历史版本 获取到较老的历史版本。 下面我们来看不同平台（Windows、Linux 以及 Mac）下 Node.js：v10.15.0 (includes npm 6.4.1) LST（长期支持版本） 的下载以及安装方法： Windows 平台下安装 Node.js这里我们提供了两种 Windows 平台下来安装 Node.js 的方式： 使用 MSI Windows 安装包方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js MSI 安装包：node-v10.15.0-x64.msi 注意：要使用 MSI 安装应用程序 （例如：node-XYZ.msi）, Windows 系统必须支持 Microsoft Installer 2.0。需要看看你的机器是否支持 MSI，Windows XP 和更高版本已经有 MSI，很多老机器也可以安装 MSI。安装时，只要保存安装文件（**.msi**）到本地计算机，然后运行它即可完成安装（安装时，根据提示 Next 即可）。 下面我们正式开始 node-v10.15.0-x64.msi 的安装过程： 步骤 1 : 双击下载后的安装包 node-v10.15.0-x64.msi 开启安装界面，然后点击 Next 。如下所示： 步骤 2 : 勾选接受协议许可选项，然后点击 Next: 步骤 3 : Node.js 默认安装目录为 C:\\Program Files\\nodejs 。 你可以自定义修改存储目录（这里我存储于：E:\\nodejs），然后点击 Next： 步骤 4 : 点击树形图标来选择你需要的安装模式（默认为：Node.js runtime，这里我们选择：online documentation shortcuts）, 然后点击 Next 进入 Setup 界面。 步骤 5 : 点击 Install（安装） 开始安装 Node.js。 然后点击 Next，等待安装完成点击 Finish 即可： 步骤 6：DOS 安装检测 首先检测系统 PATH 环境变量中是否配置了 Node.js，日志信息输出如下： 12345PATH=C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;E:\\TortoiseSVN\\bin;E:\\Git\\cmd;E:\\nodejs\\;C:\\Users\\xxxxxx\\AppData\\Local\\Microsoft\\WindowsApps;E:\\Anaconda3\\Scripts;E:\\Anaconda3;C:\\Users\\xxxxxx\\AppData\\Roaming\\npm 可以看到 E:\\nodejs\\ 路径已经被成功添加到系统环境变量 Path 中。 此时我们来查看安装好的 Node.js 版本号： 12C:\\Users&gt;node -vv10.15.0 至此，使用 “MSI Windows 安装包” 的方式安装 Node.js 的过程已经全部完成。 使用 EXE Windows 二进制文件方式首先打开 Node.js 官网下载地址，下载最新版本 Node.js Binary 安装包：node-v10.15.0-win-x64.zip。 使用 Windows 二进制文件安装 Node.js 比较简单。直接解压安装包，然后双击安装目录下的：node.exe 等待即可 注意，node.exe 安装过程中会出现如下安装窗口： 安装版本测试： 查看已安装 Node.js 版本号，信息如下表示安装成功： 12C:\\Users&gt;node -vv10.15.0 如果没显示正确版本号，请添加系统环境变量。 Linux 平台下安装 Node.js 注意：Linux 上安装 Node.js 需要安装 Python 2.6 / 2.7 ，不建议安装 Python 3.0 以上版本。 使用已编译好的包Node.js 官网提供了已经编译好的 linux Node.js 安装包，解压即用： 123456789# 下载相应版本安装包（下载目录为：/usr/software）：$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz＃ 解压：$ tar -zxvf node-v10.15.0-linux-x64.tar.xz# Node.js 安装版本测试：＄ cd node-v10.15.0-linux-x64$ ./bin/node -vv10.15.0 注意，解压文件的 bin 目录底下包含了 node、npm 等命令，为了方便系统调用，我们可以使用 ln 设置命令软链接： 12ln -s /usr/software/node-v10.15.0-linux-x64/bin/npm /usr/local/bin/ ln -s /usr/software/node-v10.15.0-linux-x64/bin/node /usr/local/bin/ 使用源码安装1）Ubuntu 这一小节我们来看如何在 Ubuntu OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：开放目录权限： 1$ sudo chmod -R 755 node 步骤三：依次执行如下命令编译源码： 1234$ cd node-v10.15.0$ sudo ./configure$ sudo make$ sudo make install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile |——————————————————— 补充：Ubuntu 还可以通过 apt-get 命令 直接安装： 12sudo apt-get install nodejssudo apt-get install npm ———————————————————| 步骤五：检测是否安装成功： 12$ node --versionv10.15.0 2）Centos 这一小节我们来看如何在 Centos OS 环境下使用源码安装 Node.js： 步骤一：前往 Node.js 官网下载地址 获取其源码（source code）下载链接，然后进行下载： 1$ wget -c https://nodejs.org/dist/v10.15.0/node-v10.15.0.tar.gz 步骤二：解压源码文件： 1$ tar -zxvf node-v10.15.0.tar.gz 步骤三：依次执行如下命令编译安装源码： 1234cd node-v10.15.0./configure --prefix=/usr/local/node/10.15.0makemake install 步骤四：设置 Node.js 环境变量，并且完成 source： 123456789# 打开全局配置文件增加如下配置：$ vim /etc/profile# Set for node.jsexport NODE_HOME=/usr/local/node/10.15.0export PATH=$PATH:$NODE_HOME/bin# 使配置文件生效：$ source /etc/profile 步骤五：验证是否安装配置成功： 1$ node -v Mac 平台下安装 Node.js这里我们提供两种方式来在 Mac OS 上安装 Node.js： 1）使用 pkg 安装包 前往 Node.js 官网下载地址 下载最新 Node 版本 .pkg 安装包，进行安装即可。 2）使用包管理器 1$ brew install node","link":"/2017/09/20/Hexo-%E9%A2%84%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E4%B9%8B-Node-js/"},{"title":"Java Hello World","text":"相信这里你已经对 Java 有了基本的了解，并且你已经完成了 Java 开发环境的基本搭建。你可能会很疑惑上面我们配置的开发环境是否真的可以运行 Java 应用程序？而不是通过简单的 java –version 来判断。看完本篇博文你会了解一个完整 Java 应用程序的基本开发过程。 Hello Java World在开始后续的学习之前，我们先给出一个经典的 Java 程序 Demo（HelloWorld）： 1234567891011/** * * My First Java Code * */public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); }} 先来看一下，上诉的 Java 程序有什么样的含义，具体 Java 语句的用法会在后续的学习中深入了解，这里不用深究。 上述代码的含义是，我们运行上述 Java 程序后，会在屏幕打印一行文字：Hello, Java World! 编写 Java 源程序Java 源程序可以使用任何一个文本编辑器（记事本、Sublime、Notepad++…）来编写，这里以 Windows 下的记事本为例： 1）新建一个空白记事本，然后如实地将我们上面给出的 Java 程序内容编写进去。 2）将写完代码后的文件另存为 HelloJava.java，保存类型选择“所有文件”，接着单击“保存”按钮，保存文件到任一文件夹中。 重新打开选用记事本打开编写好的 Java 源程序文件，如下： 提示：保存的 Java 源程序文件名中不能出现空格，类似 “Hello Java.java” 的文件名在编译时会出现找不到文件的错误。 编译源程序将 Java 源程序编写并保存到文件之后，还需要进行编译才能运行。编译 Java 源程序使用的是 JDK 中的 javac 编译器。你需要在 DOS 下执行： 1javac HelloJava.java 此时如果没有任何其他信息，表示该源程序通过了编译；反之便说明程序中存在错误，必须在记事本中打开 HelloJava.java 文件进行修改，再次保存此文件后回到命令提示符窗口重新编译（可能要反复几次），直到编译通过为止。 实在通过不了，你可以复制我上面给出的代码。 javac HelloJava.java 命令的作用是让 Java 编译器获取 Java 应用程序 HelloJava.java 的源代码，把它编译成符合 Java 虚拟机规范的字节码文件。 这时，你会发现在 HelloJava.java 同目录下生成一个新文件 HelloJava.class，此文件便是我们所说的字节码文件，它也是 JVM 上的可执行文件。 运行字节码文件编译完成后，我们就可以使用 Java 解释器（java）运行 Java 源程序所对应的字节码文件（.class）了，命令如下： 1java HelloJava 你会发现，DOS 下输出如下： Hello, Java World! 到这里，你已经成功运行了你写好的 Java 源程序了！ 注意，运行字节码文件时，无需使用 .class 全名。 Hello World 执行详解从上面的过程中，你肯定不难归纳出 Java 程序的运行必须经过的 3 个步骤： 编写：使用文本编辑器编写，最终形成后缀名为 .java 的 Java 源文件。 编译：是指使用 Java 编译器对源文件进行错误排査的过程，编译后将生成后缀名为 .class 的字节码文件，而不是不像 C 语言那样的可执行文件。 运行：是指使用 Java 解释器将字节码文件翻译成机器代码，执行并显示结果。 Java 程序运行流程示意图如下： 详细说明： 1.字节码文件，是一种二进制文件，是一种和任何具体机器环境及操作系统环境无关的中间代码，这就意味着任何安装了 JDK 的平台编译后生成的字节码文件是相同的。 2.编程人员和计算机都无法直接读懂字节码文件。 3.Java 解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码，以便执行。也就是说，Java解释器依托的 JVM 是平台相关的，不同平台下的 JVM 是不同的，相同的字节码文件会被翻译成不同的机器代码。 Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是 Java 虚拟机的一部分。 4.JVM 把不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。 Java 的这种运行机制如下： Java IDE事实上，我们在实际开发 Java 程序时，会使用 Java IDE（Java Integrated Development Environment，Java 集成开发环境）。 即我们会选择一款合适的 IDE 工具来完成 Java 程序的编写 &amp; 编译 &amp; 运行。 Java IDE 可以为我们提供如下功能： 提供代码编辑功能； 快捷方式调用：javac，java….. 可视化界面； 文档自动编写 … IDE 帮助我们把 Java 程序开发过程中的编写、分析、编译、调试、文档生成、字节码混淆、打包压缩、发布部署一系列任务等集成到一个可视化界面，极大的方便了开发人员的工作，提升了编程效率。 Java IDE 推荐：Eclipse / Intellij IDEA 关于反编译在 JDK 安装与配置博文中，JDK 安装目录详解时，我们提到过 javap 反编译器，不知道你是否还记得？？？ Java 程序经过编译后生成的 .class 文件中，包含有大量的源程序信息，很容易被反编译，拿到我们源程序信息。 例如，我们使用 javap 对上面我们的 Hello Java World Demo 进行反编译： 123456$ javap HelloJavaCompiled from &quot;HelloJava.java&quot;public class HelloJava { public HelloJava(); public static void main(java.lang.String[]);} 关于字节码混淆怎么办？事实上，我们可以使用 Java 代码混淆器来进行字节码混淆。 IDE 集成的字节码混淆功能，能够对字节码文件进行代码混淆，防止源程序不被解读。 代码混淆一般原理： 对 .class 文件或 .jar 文件中的字节码进行修改，使其不能被很好的反编译，或者反编译不容易阅读。","link":"/2017/10/10/Java-Hello-World/"},{"title":"JAVA 中的 JVM &amp; JRE &amp; JDK ?","text":"我们知道，任何语言或者软件的运行都依赖环境，Java 必然也不例外。Java 语言的开发运行，也离不开 Java 语言的运行环境 JRE。没有 JRE 的支持，Java 语言便无法运行。当然，如果还想编译 Java 程序，搞搞小开发的话，JRE 是明显不够了，这时候就需要 JDK。 那么， JDK，JRE 和 JVM 有什么区别以及联系呢？ JVM &amp; JRE &amp; JDK很多 Java 初学者肯定会或多或少产生过这样的疑问： JDK，JVM 和 JRE ？？？三者有什么区别？又有什么联系呢？ 所以，这里来整理一下三者的关系和区别： JDK（Java Development Kid，Java 开发工具包）：是针对 Java 开发人员的产品，是整个 Java 的核心，包括了 Java 运行环境 JRE、Java 工具和 Java 基础类库。 JRE（Java Runtime Environment，Java 运行环境）是运行 JAVA 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。 JVM（Java Virtual Machine，Java 虚拟机）是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言编写的软件程序。 还不明白？！直接上图： 可以看出： JDK = JRE + 多种 Java 开发工具 JRE = JVM + 各种类库 JDK &gt; JRE &gt; JVM –**&gt; Java IDE ** 那么，加入 Java IDE 的话，IDE 应该处于什么位置呢？？ JAVA IDE &gt; JDK &gt; JRE &gt; JVM","link":"/2017/10/09/JAVA-%E4%B8%AD%E7%9A%84-JVM-JRE-JDK/"},{"title":"Java程序设计基础","text":"要想编写规范、可读性高的 Java 程序，就必须熟练账务 Java 基本语法。基本语法是所有编程语言都必须掌握的基础知识，也是整个程序代码不可缺少的重要部分。随后的章节开始学习 Java 的基础语法部分，主要分为 4 部分内容：数据类型，变量，运算符，以及控制流程语句，这也是构成 Java 程序最基础的 4 个部分，敲黑板！ 其中，数据类型和运算符不仅定义了语言的规范，还决定了可以执行什么样的操作；变量是用来存储指定类型的数据；而控制流程根据用户的输入决定程序要进入什么流程，即要做什么？如何做？ 在开始正式的学习之前，我们需要先了解一些 Java 基本语法最最基本的定义： Java 标识符 &amp; 关键字任何一种计算机语言都离不开标识符和关键字，本小节将详细介绍 Java 的标识符、关键字（保留字）。 标识符所有编程语言中的 标识符，都是为 变量、方法、类、对象以及文件、工程 等进行命名的，可以有一个或多个字符。 标识符构成规则Java 语言规定的，标识符的构成规则如下： 标识符可以由任意多的 字母（AZ 和 az），数字（0~9），下划线（_），dollar 符（$），Unicode 字符集中符号（大于 0xC0 ）的所有符号组合构成。注意不包含空格！！！ 必须以字母，dollar 符以及下划线开头，不可以是数字。 运算符，关键字（保留字）以及标准方法名不可以作为标识符。 注意：标识符中可以包含 关键字 &amp; 标准方法名。 标识符命名规范一个良好的编程习惯要求命名标识符时，应赋予它 ”意义“（非强制）。 见名知义：代码命名神奇 –&gt; CodeIF； 包名全部小写； 类名各单词首字母大写（大驼峰命名法） 变量名，方法，类的实例：第一个单词字母小写，其它单词首字母大写（小驼峰命名法）； 常量名全部大写； 参数的名尽量使用一个单词的情况下，命名明确； 数组命名使用：”类型[] 数组名” 的形式。 驼峰命名法： 小驼峰式（little camel-case）–&gt; 第一个单词首字母小写，后面其他单词首字母大写。 大驼峰式（big camel-case）–&gt; 每个单词的第一个字母都大写; 关键字关键字（或者保留字）是语言中已经被赋予了特殊含义的专有单词，Java 编译器有特殊的意义，不能在程序中做其他目的使用。 保留字是为 Java 预留的关键字，它们虽然现在没有作为关键字，但在以后的升级版本中有可能作为关键字。 Java 语言目前定义了 51 个关键字，这些关键字不能作为标识符使用： 数据类型：boolean、int、long、short、byte、float、double、char、class、interface。 流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally。 修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native。 动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new。 保留字：true、false、null、goto、const。 Java 注释注释不是编程语句，编译时会被编译器忽略。 Java 支持以下三种注释方式： 单行注释以双斜杠 “//” 标识，只能注释一行内容： 123456public class HelloJava { public static void main(String[] args) { // 这是一个单行注释 System.out.println(&quot;Hello, Java World!&quot;); }} 多行注释包含在 “/*” 和 “*/” 之间，能注释很多行的内容，也成为 块注释。 为了可读性（美观）比较好，一般首行和尾行不写注释信息: 123456789public class HelloJava { /** * 这是一个多行注释 */ public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); }} 注意：多行注释可以嵌套单行注释，但是不能嵌套多行注释和文档注释。 文档注释包含在 “/**” 和 “*/” 之间，也能注释多行内容，只在类、接口、方法、成员变量上面，用来描述其作用。 注释后，鼠标放在类和方法上面会自动显示出我们注释的内容 1234567891011121314151617/** * Project Name: HelloJava * Class Name: HelloJava * Created By: xxxxxx * Created At: xxxx年xx月xx日 上午3:31:44 * E-Mail: * @Version * */public class HelloJava { public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(&quot;Hello, Java World!&quot;); }} 注意：文档注释能嵌套单行注释，但是不能嵌套多行注释和文档注释 Java 平台提供了 javadoc 工具，使用 Java 源代码中的文档注释，来生成 API 说明文档。 Java 编码规范： 程序最开始编写导入包和类语句，即 import 语句，import 语句可以有多行，编写完 import 语句后空一行; 定义 public 类，顶格书写。类的主体左括号 “{” 不换行书写，右括号 “}” 顶格书写； 定义 public 类中的变量，缩进书写； 定义方法用缩进书写，方法的左括号 “{” 不换行书写，右括号 “}” 和方法首行第一个字符对齐；方法体要再次缩进书写，最后一个变量定义和第一个方法定义之间、方法和方法之间最好空一行； 方法名和紧跟在其后的左括号 “(” 无空格，该左括号和其后的标识符之间无空格。多个参数之间的逗号和前一个参数紧靠，与后一个参数空一格。 关于编码规范，可以以权威公司（Google 等）编码规范为参考。 Java 包名(Package)命名规范每个 Java 开发人员都可以开发自己的 Java 项目，Coder 可以为 Java 项目中的包定义各种各样满足命名规范定义的名字。 但是，我们需要尽可能保障每个 Java Package 命名的唯一性，尤其是在你上传编写好的 Java 库到第三方平台供他人使用时，这尤为重要（第三方平台一般会进行唯一性检验，成功后才允许你上传，否则认为包名冲突了）。 这就要求我们，尽可能的在 Package 命名时： 为自己定义的包名前加上唯一的前缀 1 –&gt; 公司项目命名 一般公司项目中，包名的命名规则可定义为如下： com.公司名.项目名.模块名 2 –&gt; 团队项目 一般公司项目中，包名的命名规则可定义为如下： team.公司名.项目名.模块名 3 –&gt; 个人项目命名 那么，我们的个人项目又怎么命名呢？ indi（individual）–&gt; 个人发起，但非自己独自完成的项目（可公开或私有项目），但 Copyright 主要属于发起者。 命名规则如下: indi.发起者名.项目名.模块名 pers（personal）–&gt; 个人发起，独自完成，可分享的项目，Copyright 属于个人。 命名规则如下: pers.个人名.项目名.模块名 人发起，独自完成，非公开的私人使用的项目，Copyright 属于个人。 命名规则如下: priv.个人名.项目名.模块名","link":"/2017/10/12/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/"},{"title":"Java, Write Once, And Run Any Where","text":"Java 语言特点中提到过，Java 是平台无关的。Java 的平台无关性具体表现在于 “一次编写，到处运行（Write Once，Run any Where）”，因此采用 Java 语言编写的程序具有很好的可移植性，编译之后可以直接在不同的平台上运行。 Java平台无关性为什么需要平台无关性平台无关（跨平台），用一句话来阐述就是 ”Write once, and run anywhere“，也就是说：语言在计算机上的运行不受不同平台的约束，一次编写，到处运行。 就比如说我们在 Windows 下面写出来的一段 Java 程序，换成 Linux or Mac os 系统里面，一样可以正常运行并且输出相同的结果。 Java 的这种跨平台的特性，很大程度上依赖于 JVM（Java Virtual Machine），但注意不仅限于 JVM。 Java 如何支持平台无关性1 –&gt; Java 平台本身 Java 平台中的 Java API（Application Programming Interface，Java 应用编程接口），提供了一套独立于操作系统的标准接口，作为 Java 程序和所在平台（硬件与操作系统）之间的缓冲角色，这样开发编写 Java 程序只与 Java 平台打交道，而不需要了解平台硬件或操作系统细则。 2 –&gt; Java 字节码 不同平台下，Java 程序经过 Java 编译器会被编译成 同样的 二进制 的 Java 字节码文件（class文件）。class 文件可以在任何平台（Win or Linux or Mac）生成，也可以被任何平台的 JVM 装载运行。 Java 字节码是 Java 平台无关的基石，真正的平台无关。 3 –&gt; JVM 虚拟机机制 Java 的平台无关性很大程度上依赖于 JVM（Java Virtual Machine），JVM 是可以执行 Java 字节码的虚拟进程。JVM 能够将 相同的字节码 编译成与平台相关的 不同的机器码，从而进一步再解释执行。 JVM 机制百度百科上 JVM 的专业解释如下： Java 虚拟机（Java Virtual Machine，简称 JVM）是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。 Java 虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。JVM 在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。 ============================================== 通俗的说： JVM，也就是 Java 虚拟机，就属于 Java 平台的一部分，包含于 JRE 的下面。 解释执行当你需要执行某个 Java 程序时，由 JVM 帮你进行进一步编译（JIT，Just In Time）和解释执行，它负责将编译生成的字节码文件翻译成特定平台下的机器码然后运行。 注意： 1. 编译的结果不是生成机器码，而是生成字节码，字节码不能直接运行。必须通过 JVM 翻译成机器码才能运行。2. 不同平台下编译生成的字节码是一样的，但是由 JVM 翻译成的机器码却不一样。 因此，运行 Java 程序必须有 JVM 的支持，即使你将 Java 程序打包成可执行文件（例如 .exe），仍然需要 JVM 的支持。 平台相关性JVM 屏蔽了与具体操作系统平台相关的信息，可以得知，JVM 是平台相关的。 事实上也正是如此，JVM 分为很多个系统版本的，你编写好的 Java 程序，无论到哪个平台上，Windows 也好，Linux 也好，Mac 也罢，只需要安装对应平台 JVM，便可以成功编译和执行。 这里我们知道： 跨平台的是字节码（Java 程序），不是 JVM。JVM 是平台相关的，不同平台下需要安装不同版本的 JVM。 Java API待续…","link":"/2017/10/09/Java-Write-Once-And-Run-Any-Where/"},{"title":"Hello Hexo World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files12$ hexo clean$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Begin To Edit ArticleDoc Front-Matter PolicyFront-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON. YAML 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- JSON 123&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;;;; Front-matter 选项中的所有内容均为 非必填 的。推荐至少填写 title 和 date 的值。 Setting Description Default title Title Filename (posts only) date Published date File created date updated Updated date File updated date tags Tags (Not available for pages) categories Categories (Not available for pages) toc Article Contents false 以下为文章的 Front-matter 示例。 The Simple Demo1234---title: Hello Hexodate: 2017-12-18 00:55:00--- The Most Complete Demo1234567---title: Hello, Hexo Worlddate: 2017-12-18 00:55:00categories: [Markdown, Hexo]tags: [Markdown, Hexo]toc: true---","link":"/2017/09/20/hello-world/"},{"title":"MarkdownPad2 安装以及常见问题解决教程","text":"Markdown 是一种轻量级的，可以使用 普通文本编辑器编写 的标记语言。它允许所有的写作爱好者（Sharer）可以专注于内容而不是纠结于字体字号行间距等等排版问题（沉浸式写作），使用易读易写的纯文本格式编写文档，然后就可以转化成格式丰富优美的 HTML 页面或 PDF（所思即所得）。 MarkdownPad2 Setup And Crack In WindowsMarkdownPad2 可以在官网得到下载文件，传送门 –&gt; Markdown 官网，点击后自动下载，界面如下： 安装好后直接开始安装，一路 「Next」 即可，安装完成打开后会让升级到豪华版（Pro）。开始破解，点击 「Enter Key」 进入后输入账号密钥。此处提供一个来自网络上的账号（膜拜大佬吧）： Email address : Soar360@live.com License key： 1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== 直接粘贴后点击 「OK」 激活成功！至此 MarkdownPad2 安装以及破解已经完成。 Common Problem &amp;&amp; Solution汉化MarkdownPad2 汉化非常简单，已内置汉化包。选择左上角的 「TOOL」 下的 「option」 后在语言栏选择简体中文即可。 右侧无法预览MarkdownPad2 正常安装完成后，即可直接使用标记语言开始写作了，你可以直接在右侧实时预览效果（F5 开启预览功能）。 Win10 安装后打开后会发现右侧预览栏无法显示: 查阅相关资料后需要安装一个插件: To fix this issue, please try installing the Awesomium 1.6.6 SDK. 安装也是全程 「next」 即可，安装过程如下： 安装成功后，关闭软件再次打开即可正常使用 Markdown 了！ 表格以及代码无法显示使用 Markdown 插入表格和代码有时会发现无法正常显示，事实上，你只需要更改一下 Markdown 处理器就可以了： 中文版： 工具 –&gt; 选项 –&gt; Markdown –&gt; Markdown 处理器改为: GitHub Flavored Markdown(Offling) 英文版： Tools –&gt; Options –&gt; MarkDown –&gt; Markdown Processor –&gt; GitHub Flavored Markdown(Offling)","link":"/2017/09/20/MarkdownPad2-%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%95%99%E7%A8%8B/"},{"title":"一文了解什么是 Java","text":"Java 是一门经典的面向对象编程语言，是基于 C++ 发展起来的，你可以将其看作是 C++ 的 “纯净” 版，它不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 中难以理解的指针等部分。再加上刚好赶上互联网的“顺风车”，随着 Internet 和 WWW 的迅速发展，Java 成为了越来越受欢迎的语言。尽管经历了近 30 年的技术变革，但 Java 仍然是当前开发基于 Web 的应用程序的最佳选择。 Java 起源及发展–&gt; Java 前身 起初（90 年代初），Sun Microsystems 公司为了开发一种用于编写 “家用电器的小型交互式系统” 的编程语言，如手机、机顶盒、面包机等。由于当时设备平台（硬件和操作系统）多样化，即需要该编程语言具有良好的跨平台能力，而且这些家用设备不足以运行大型程序（小内存），故开发了基于 C++ 的 Oak（橡树）语言。 –&gt; Java 的正式诞生 Oak 语言的诞生，就像 C/C++ 语言的诞生一样，开发者都寄予了很大的期望。但事实上，基于 Oak 语言所开发的智能化家电的市场需求远没有没有预期的那么高，不得以 Sun 公司放弃了该项计划。 绝境中往往孕育着机遇！90 年代随着互联网的迅猛发展，Sun 公司发现 Oak 在互联网上的应用前景，于是再一次做出尝试，改造了 Oak。 1995 年，Sun 公司正式发布了第一个 Java 版本，Java 正式诞生！！！ 2010 年 Oracle（甲骨文）公司收购 Sun Microsystems 公司，之后由 Oracle 公司负责 Java 的维护和版本升级。 随着互联网的迅速发展，定位于网络运算的 Java 语言，特别适合于开发网络应用程序，于是 Java “热” 迅速席卷全球。 Java 开篇Java 不仅仅是一门编程语言，还是一个平台。Java 平台由 Java 虚拟机（Java Virtual Machine，JVM）和 Java 应用编程接口（Application Programming Interface，API）构成。Java 应用编程接口提供了一套独立于操作系统的标准接口，可分为基本部分和扩展部分。 在硬件或操作系统平台上安装一个 Java 平台之后，Java 应用程序就可运行。Java 平台已经嵌入了几乎所有的操作系统，这样 Java 程序只编译一次，就可以在各种系统中运行。 JDK &amp; JRE为了编程人员开发和运行 Java 程序，Sun 公司免费推出了 Java 的开发、运行工具 —— JDK（Java Development Kit，Java 开发工具包）。 有时候，你可能会遇到如下说法： 1 –&gt; Java SDK 我们先来认识一下 SDK： SDK 说法：全称 Software Development Kit，即软件开发工具包，覆盖面很广泛的一个说法。可以这么说：辅助某一类软件开发的相关文档、范例和工具的集合都可以叫做 “SDK”，它为软件的开发提供一个平台。 JDK 是 Java 开发工具包，专为开发、运行 Java 设计而生，是 SDK 的一个子集。 所以，你可以说：JDK 是 Java SDK（Java Software Development Kit），这也没问题。 2 –&gt; Java 2 Java 1.2 版本之后发布的 Java 版本都可以称为：Java 2。 Java 5（Java 7/8/9）：Java 1.5（Java 1.7/1.8/1.9）版本。 所以，现在我们说的 Java，更多的是指 Java 2 平台。 3 –&gt; J2 SDK J2 SDK，全称 Java2 Software Development Kit，包含 JDK、JRE（Java Runtime Environment）等。 JRE：Java Runtime Environment，Java 运行环境，是运行 JAVA 程序所必须的环境的集合。 但要注意的是，JDK 中也包含一套单独的 JRE。 J2 SDK 一般特指 Java 2 平台的 JDK，开发人员必装，可进行 Java 程序的开发、运行。 J2 JRE 就是 Java 2 平台的 JRE，Java 客户端运行必装。如果你只需要运行 Java 程序，只需要安装 JRE 即可。 J2SE &amp; J2EE &amp; J2ME为了推广 Java，根据应用领域的不同，Java 可以分为 3 个体系： 1 –&gt; J2SE J2SE，也称为 Java SE（Java Platform Standard Edition，Java 平台标准版），它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序，是 Java 系统的标准与核心平台。 Java SE 包含了 Java 语言基础、JDBC 操作、I/O 操作、网络通信以及多线程等技术，还支持 Java Web 服务开发的。 Java SE 平台体系示意图如下： 2 –&gt; J2EE J2EE，也称为 Java EE（Java Platform Enterprise Edition，Java 平台企业版），帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。 Java EE 是在 Java SE 基础上构建的，它提供 Web 服务、组件模型、管理和通信 API等。 3 –&gt; J2ME J2ME，也称为 （Java Platform Micro Edition，Java 平台微型版）， Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。 Java 特点Java 语言是一种分布式的面向对象语言，具有面向对象、平台无关性、简单性、解释执行、多线程、安全性等很多特点，下面针对这些特点进行逐一介绍。 面向对象Java 是一种纯面向对象的语言。使用 Java 语言开发程序，需要采用面向对象的思想设计程序和编写代码。 和 C++ 相比，Java 更加纯粹，所有内容都被封装到类中。 1 –&gt; 面向对象的核心： 以更接近人的思维去建立计算机逻辑，利用类和对象对数据和操作的分装到一起，并通过定义统一的接口去和 “外界” 交互，使反映实体的类在程序中能够独立、自治和继承 2 –&gt; 面向对象的程序设计： 从实际问题中抽象出封装了数据和操作的对象，定义其属性和操作，以及接口实现交互，形成一个接近于实际问题的动态对象模式。 简单易学Java 语言是基于 C++ 创建的，所以 Java 语言的风格很像 C/C++ 语言，但要比 C++ 更纯粹。 继承了 C++ 语言面向对象的技术核心，但是拋弃了 C++ 的一些缺点，比如说容易引起错误的指针、操作符重载以及多继承等，同时也增加了垃圾回收机制，释放掉不被使用的内存空间，解决了管理内存空间的烦恼。 基础语法同 C 语言几乎一模一样，便于学习。 平台无关性Java 提出 “Write Once，Run any Where”，即 “一次编写，到处运行”。 Java 编译后产生一种 二进制字节码文件，任何操作系统平台，只要安装有 Java 虚拟机都可以解释执行。并且 Java 中的原始数据存储都是固定的，如任何机器，int 都是 32 位。理所当然，使整数类型平台无关后性能必然下降，但这带来的跨平台特性是值得的。 Java 语言使用 Java 虚拟机机制屏蔽了具体平台的相关信息，使得 Java 语言编译的程序只需生成虚拟机上的目标代码，就可以在多种平台上不加修改地运行。 解释型语言Java 程序在 Java 平台运行时会被编译成字节码文件，在运行文件时，Java 的解释器对这些字节码进行解释执行。 看起来，逐条解释执行，导致单机运行很慢。但事实上，JVM 中采用了即时编译机制（JIT）可以很大程度上的优化，Java 的运行速度也越来越高。 多线程Java 语言是多线程的，但它必须由 Thread 类和它的子类来创建。Java 支持多个线程同时执行，并提供多线程之间的同步机制。 分布式Java 语言支持 Internet 应用的开发，在 Java 的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库，包括 URL、URLConnection、Socket 等。Java 的 RIM 机制也是开发分布式应用的重要手段。 健壮性Java 的强类型机制、异常处理、垃圾回收机制等都是 Java 健壮性的重要保证。对指针的丢弃是 Java 的一大进步。另外，Java 的异常机制也是健壮性的一大体现。 安全性Java 通常被用在网络环境中，为此，Java 提供了一个安全机制以防止恶意代码的攻击。 除了 Java 语言具有许多的安全特性以外，Java 还对通过网络下载的类增加一个安全防范机制，分配不同的名字空间以防替代本地的同名类，并包含安全管理机制。 丰富的类库支持Java 中提供了丰富的类库支持，这些类库存放于 Java 系统的各种包（Package）中，有接口、类、异常处理等等 1 –&gt; java.lang Java 语言包，提供了包括字符串处理，多线程处理，数学函数处理等各种基础类。 2 –&gt; java.io Java 输入输出包，用统一的 “流” 模型来实现所有格式的输入、输出。通过数据流，序列化，文件系统提供系统输入输出。 3 –&gt; java.awt/javax.swing Java 图形用户接口包，提供实现不同平台的计算机图形用户接口部件，包括窗口，菜单，滚动条等等组件。 4 –&gt; java.sql Java 数据库包，提供了用户进行数据库操作的驱动程序和应用程序接口。 5 –&gt; java.util Java 应用程序工具包，支持哈希表，堆栈，可变数组，时间和日期，集合框架，事件模型和各种实用工具类（随机数生成器、位数组等等）。 6 –&gt; java.net Java 网络包，提供了实现网络编程的 URL，Socket 编程，还支持 Internet 的 ICP/IP 协议，提供了与 Internet 的接口。","link":"/2017/10/08/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AF-Java/"},{"title":"基于图床的博客图片存储解决方案","text":"一个优秀的博客图片存储解决方案—图床。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Pictures use in hexo当你看到这里的时候，应该已经有一个自己的 Hexo 博客了。如果还没有的话，不妨使用 Hexo 和 Markdown 来写博客和文章。 在 Hexo 使用初期，你可能也遇到过和我相似的问题： 一篇添加了本地图片的博文在你的个人博客站点无法预览显示出来。 考虑一下：为什么博客站点中的本地图片无法正常加载显示？ 事实上，这个很好理解，图片是无法直接作为 MD 文本源码的一部分插入的，只能插入图片的地址，这个地址可以是相对 MD 文件的相对路径，也可以是网络图片地址（网络图片事实上也是不可靠的，毕竟来源是第三方的，当网络图片来源被删除时也会丢失，所以很多使用网络图片的博客一段时间后就无法显示了）。 这里我们先来考虑插入电脑本地图片的场景，Markdown 文档中指定的图片路径就是自己本地的路径，博客站点当然链接不到自己本地的图片了。 这里，我们先来分享一种基本的解决此问题的方法。使用 hexo-asset-image 插件来为博客插入图片： 插件下载在 Git Bash 中，进入 Hexo 站点目录下执行如下命令： 1$ npm install https://github.com/CodeFalling/hexo-asset-image --save Hexo 配置在 Hexo 站点配置文件中，搜索 post_asset_folder 关键字，并将其值设为：true： 1post_asset_folder: true 下载以及设置完成后，当你通过 hexo new “Blog Name” 新建博客后，会在 &lt;Hexo 站点目录&gt;\\source_posts 文件夹下产生一个和博文同名的文件夹（这个和博文同名文件夹可以作为当前博文的图集，远程推送时会被一起推送到远程库中）。 Demo设置后如何进行图像的插入呢？ 当博文需要添加图片时，将需要添加的图片放入和博文同名的文件夹中，同时通过【相对路径】索引到该图片即可。 例如，你想要在博文 post_name.md 中想要插入了一张图片（test.jpg）。首先你需要将图片资源放在同名文件夹 post_name 中，然后使用相对路径就可以引用到图片资源： 1![](test.jpg) 添加后你可以使用 hexo s 开启本地 Hexo 服务预览一下，发现已经可以正常显示图片了~ ========================================== 事实上，这样的使用是存在问题的： 当添加的图片比较多、比较大时，除了自己本地的博客源文件比较臃肿外，还会占用大量本地空间。再加上 Github 仓库的使用，会使得网站部署时非常的慢（推送图集）； 博客中所有的图片都是要部署到仓库的，而仓库容量是受限的，你懂得； 博文中存在大量图片时，会大大降低网页的加载速度，加载的难受啊； 哪里都有玄学….咳咳，之前的博客采用这种方法，不知道什么时候竟然丢失了一部分图片。 ┓( ´∀` )┏ 怎么办？幸好有度娘啊… 一个广泛使用的，优秀的博客图片存储解决方案 —— 图床。 Image HostImage Host（Picture Host），也称为图床。图床？！！ 何为图床？图床是指 用于储存图片，并且可以对外提供图片访问链接 的服务器。 服务器？！！难道博主又要骗我花钱买服务器拉？┓( ´∀` )┏ 事实上，有很多免费的图床可供你选择。国内和国外都有，国外的图床可能由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内很多大中小型公司都提供免费的图床服务，注册后就可以使用（真香）。 事实上，图床的本质就是： 将图片保存在网络上，并且可以获得图片的直链地址。 爱思考的看客老爷可能已经反应过来了： 这不就是博主前面说的网络图片链接么？你不是说不可靠么？！不要担心，前面我们使用的网络图片其实是其他人提供的图床。这当然是不可靠的，毕竟你不知道什么时候这些图床就不再提供了！之后我们使用的是自己的图床，这是可控的。 了解了图床的基本概念之后，我们再来看一下图床都有哪些优点： 图床的优点1 –&gt; 图床访问速度快 图床，一般会把图片存储到第三方的 CDN，除了加快图片访问速速，还可以降低你服务器的存储压力，后续网站迁移扩容就不受影响了。 2 –&gt; 博客前瞻性 目前，你可能只是在部署一个个人博客小网站，但是以后无论是自己的博客还是实际的项目，都可以用图片来提供外链，方便管理。 并且如果你的网站访问量很高啊，一天几十万几百万啊，这时候你考虑的就不是服务器空间够不够大，而是惊人的并发数啊，光是请求 HTML 文件（或其他）的链接就处理不过来了，哪还有多余的资源去读取图片啊，索性就把图片存另一个服务器，为主服务器缓解压力。 大致了解了图床的基本概念以及其优点，这里我们来看当前个人博客有哪些具体的图床实施方案？ 图床实施方案说到这里，图床原来就是图片网络链接啊。可能一些爱动手的看客老爷可能已经开始思绪乱飞~ 下面我们来看如何将图片保存在网络上且获得图片的链接地址方案，看客老爷可以根据个人实际情况进行选择： 网盘很多看客老爷可能想到，如果直接把图片放到各类网盘（百度、腾讯、坚果、OneDrive…）是否可行？ 事实上，虽然网盘上传图片方便快捷，免费存储空间又足够，但是网盘中的图片无法获取到链接，或者获取到链接后很快就无法使用了。 直接 Pass…. 自建图床服务器关于自建图床服务器，如果你有一台可供使用的个人服务器，可以尝试使用FTP、Nginx、PHP、MySQL、Chevereto等工具搭建个人图床服务器。 缺点就是，你需要支出必要的服务器等费用，还需要去进行相对繁琐的安装过程才可以使用。 关于自建图床服务器方法，网络上的教程很多。当然你也可关注博主相关系列博客 –&gt; 传送门（待续…）。 云存储对象腾讯云、阿里云、等云平台都提供有云储存对象支持，可以用作图床使用，配置过程也非常简单快捷。 但是缺点是，虽有免费额度，但使用量较大时，可能产生相关存储流量费用。但贵在对于访问量较少的个人博客使用很便宜甚至免费，具体收费情况可见各云平台。 特别说明，云存储对象的使用可能涉及到实名认证，域名备案等。 关于使用云存储对象配置图床，请参见博主相关系列博客 –&gt; 传送门（待续…）。 第三方免费图床(推荐)上面我们说过，国内外有很多免费的图床可供使用。 在选择一款免费图床平台时，你需要关注的是，图床平台服务商是否可靠，图床的流量限制、储存限制以及访问速度等。 例如：免费存储容量为10G，每月访问流量10G，每小时限制上传 20 张，每张大小小于 10M 之类的，但这对于写MD 远远够了。当然这些第三方服务商也是提供相关的收费服务的，你可以消费提升使用权限。 特别说明，一定要选择相对大平台的服务商，主要是怕图床服务商经营惨淡，挂掉以后图片就丢失了。并且有些第三方免费图床会要求进行实名认证，域名备案等。 ===================================================== 网络上各路主流图床推荐： 1 –&gt; 微博图床 你在查找时，很有可能查到使用微博做为博客图床的教程。 这里特别说明一下，微博图床之前使用人较多，但从2019年开始开启了防盗链，直接凉凉了…. 2 –&gt;七牛云 官网地址：https://portal.qiniu.com 简介：注册认证后有 10G 永久免费空间，每月 10G 国内和 10G 国外流量，速度相当快，七牛云是国内专业 CDN 服务商，插件支持比较多，有免费 SSL 证书，但 HTTPS 流量收费。 图片上传限制：暂无 七牛云 30 天后会回收测试域名，因此你必须要实名认证以及绑定自己的已经备案的域名。 3 –&gt;又拍云 官网地址：https://www.upyun.com 简介：注册认证后有10G永久免费空间，每月 15G 的 HTTP 和 HTTPS 流量，提供两款可以免费续期的 SSL 证书，不过用户需要加入又拍云联盟（即在网站底部添加又拍云 LOGO 及官网链接）。 图片上传限制：暂无 需要实名认证以及绑定自己的已备案域名，又拍云认证比较麻烦，建议使用七牛云。 4 –&gt;路过图床 官网地址：https://imgchr.com 简介：支持免注册上传图片，永久存储，支持 HTTPS 加密访问和调用图片，提供多种图片链接格式。 图片上传限制：最大10M 5 –&gt;SM.MS 官网地址：https://sm.ms 简介：永久存储免注册，图片链接支持 HTTPS，可以删除上传的图片，提供多种图片链接格式，有时速度可能较慢。 图片上传限制：每个图片最大 5M，每次最多上传 10 张 ================================================== 墙裂推荐： 如果想要长期稳定使用，请优先选择七牛云或者又拍云（需要实名认证以及已备案域名），再下来就是路过图床和SM.MS 图床。 图床工具选择好图床之后，你可以选择搭配以下图床工具一起使用以便更高效地使用图床： 图片压缩工具上传图片之前建议压缩一下，一方面可以降低存储，又可以有效加快图片载入速度： TinyPNG –&gt; 传送门 Tiomg –&gt; 传送门 图床工具使用图床工具可以方便我们快速将本地图片转换成图床链接，以方便各位博主使用： PicGo（Molunerfinn/PicGo），是一款比较优秀的图床工具，可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，imgur 等八种常用图床。且功能强大，简单易用。 关于 PicGo 的安装以及配置方法，请参见博主相关系列博客 –&gt; 传送门（待续…）。 自此，我们就成功搭建起了基于 “Hexo + Github·Pages + Gitee·Pages + Domain + VSCode + TinyPNG + PicGo + Image Host ” 的博客","link":"/2017/09/21/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E5%BA%8A%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"Hexo 博客多设备协同管理问题【持续更新】","text":"优秀的 Hexo 博客多环境、多设备协同管理方案。 前面我们已经成功搭建了基于 Hexo + Github·Page + Coding·Page + Domain + VSCode + TinyPNG + PicGo + Image Host 的个人博客环境。系列博文中给出了 Hexo 新手小白如何快速搭建基于 Hexo 的个人博客进行产出。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 前面我们提到过，hexo d 仅仅是将 Hexo 博文静态页面推送到了远程仓库（Github·Page 或 Coding·Page）上以实现公共访问，而 Hexo 个人博客框架相关配置信息都存放在本地终端。如果未进行其它备份或同步处理，一旦存放 Hexo 配置信息的本地终端出现问题（如系统崩溃），那么我们便无法再维护我们的的博客了，Game Over… 所有当我们更换工作环境（公司、个人）或者原来用于搭建 Hexo 博客环境的设备需要重新更换系统，出于安全性以及灵活性考虑，我们不得不面对的一个问题就是： 如何将本地终端中的 Hexo 博客相关配置信息完美移植到新环境是至关重要的。 使用 Git 解决 Hexo 个人博客多平台同步管理关于 Hexo 博客多平台（多设备）协同管理以及更新教程网络上有很多，但对于刚刚接触 Hexo 、Git 的小白们不太友好，配置过程中容易出现各种问题，本文提到的所有配置方案均通过实际测试给出。 本文所作的主要目的：一方面作为学习记录回顾使用；另一方面适用于类似我这样的 Git 新手以供参考分享，可以快速对应以及解决问题。所以文中有些地方可能表达有误，欢迎各位大佬指正。 模拟场景公司和家里两台 PC： 公司 PC_A：最初用于搭建 Hexo 个人博客的终端； 个人 PC_B：移植 Hexo 个人博客项目的终端。 为了可以随时随地创作更新个人 Blog，两台 PC 中都必须搭建有相同的 Hexo 博客环境，并这必然要求我们的 Hexo 博客本地配置项目要保持同步（即实现版本控制）。 对于 同步 问题： 由于除了静态页面 以外，其它全部文件都在本地生成，所以如果在公司终端上推送了 articleA 文章后回家又写了篇 articleB 文章，在家里推送后我们会发现只有 articleB 文章而 articleA 文章没了（因为家里的 PC 上没有 articleA 文章的 md 文件），故及时同步两台 PC 终端中的 Hexo 博客项目相当重要。 也就是说，对我们的 Hexo 个人博客本地项目实现版本控制是必要的。 — important split line — 这里，我们首先给出解决 Hexo 个人博客多平台同步管理的通用步骤： 搭建 Hexo 个人博客环境，包括： Node.js、Git 以及 hexo 的安装，具体安装方式可见前面提到的搭建教程。 对 Hexo 个人博客本地配置信息项目实现同步，也就是版本控制。 实施方案分析介于模拟场景提到的解决方法，搭建 Hexo 个人博客环境本文不在做细致说明，参考前面教程即可。针对同步（备份），这里我们给出三种具体的版本控制（同步、备份）的实施方案分析： 存储设备备份使用存储设备备份，是指我们使用存储设备对 Hexo 个人博客项目本地文档进行备份。例如，我们可以直接对 PC_A 中最新的本地 Hexo 博客目录进行打包存储到硬盘、U盘或者云盘（大多数使用）中，然后将其移植 PC_B 中进行直接使用。 下面我们来分析其优略： 1）优点： 免费且操作简单快捷。 在某些场景下可以很快完成移植，而不需要进行额外的同步设置。例如，当我们的电脑需要重装系统时，我们可以直接将最新的 Hexo 博客项目进行打包，新系统中搭建好 Hexo 个人博客环境后，直接解压几乎就可以使用了。 2）缺点： 对于硬盘、U盘等设备，备份后的同步十分麻烦，每次其它终端都需要手动下载备份最新的 Hexo 博客文件夹，进行手动覆盖。 目前大多数云盘，可以开启云端自动备份功能，写完 Blog 后可以自动备份（同步）到云端。但是很容易产生一些云盘内部文件，影响 Hexo 解析产生一些不可预期的错误。 因此，使用存储设备备份使用的很少。 第三方代码仓库备份鉴于之前我们将 Hexo 个人博客产生的静态页面托管到了一些第三方 Git 服务平台，以实现远程访问。同样，类似于代码托管，我们可以将我们的 Hexo 个人博客项目本地配置信息文档托管到远程仓库进行版本控制，以实现多设备的同步管理。这是 目前最合理，并且使用最多 的解决方案。 使用第三方代码仓库进行备份是目前普遍使用的对 Hexo 个人博客进行备份同步的方法。 国内外现在知名的 Git 服务提供商主要有： Github、Coding 以及 Gitee（码云）等等，使用上没有比较大的差异，但国内站点访问较快。 下面我们来分析其优略： 1）优点： 部署完成后同步非常方便，Hexo 更新完后只需要再更新（push）全站到 Git 远程仓库即可。 2）缺点： 部署过程相对比较麻烦，对 Git 新手不友好，但这仅仅是 Git 使用上的问题，不是难点。 对于使用第三方代码仓库（以 Github 为例）进行备份的方法，目前主流的有两种方法： 分支备份法：我们知道，Hexo生成的静态博客文件都是上传到 GitHub 上的, 且默认放在 master 分支上。分支备份法是将本地的 Hexo 相关环境配置文件都推送到对应仓库新创建的分支上（如 hexo 分支），以实现备份。 将本地整个 Hexo Blog 项目进行备份：创建一个新的仓库用来对本地环境配置文件进行版本管理以及备份。 实施方案细则下面我们将以前面提到的实施方案给出其具体的操作指南，你可以根据需要选择不同的实施方案： 方案一：Hexo Envs + Cloud–&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo –&gt; 步骤二：yunpan1）将 PC_A 终端中 Hexo 个人博客项目目录进行打包（打包格式任选，在 PC_B 中可以实现快速解压即可），备份到云盘。 2）然后在 PC_B 中从云盘下载已经上传好的 Hexo 个人博客项目压缩文件，然后进行解压。 3）PC_B 中开启 Hexo 服务，然后打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 4）Hexo 个人博客本地测试通过后，由于更换设备，我们需要为Hexo Github·Page（Coding·Page）仓库配置新设备的 SSH Key。此时只需要将新设备（PC_B ）的 SSH Key 添加到 Github（Coding）中即可。如果不进行设置，当使用 hexo d 进行推送时无法成功，原因在于 Hexo 无法连接到 Github·Page（Coding·Page）。 关于新设备创建 SSH Key 方法以及为 Github 配置 SSH Key 可参加：Git 使用指南之远程仓库（待续…）。 除了上述添加方式外，还有一种更简单的方式，我们可以将 PC_A 生成的 .ssh 文件直接放到 PC_B 设备当前用户目录下即可。 自此，设置完成。这种方法缺点很明显，对于同步很不友好！！！ 方案二：Hexo envs + hexo 备份这一小节，我们来看如何将本地整个 Hexo Blog 项目进行备份。即创建一个新的仓库用来对本地环境配置文件进行版本管理以及备份。 关于 Git 远程仓库的选择，Github or Coding or Gitee 三选其一即可，这里以 Github 为例，推荐使用 Coding or Gitee。这也就意味着： Hexo 博客静态页面托管到一个仓库，Hexo 博客配置托管到另一个远程仓库。 –&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo 步骤一和方案一种中完全一样，实现 PC_B 上 Hexo 环境的部署。 –&gt; 步骤二：hexo 项目备份注意，这一部分操作全部在 PC_A（保存了 Hexo Blog 最新进度）上进行，用于将本地整个 Hexo Blog 项目托管到 Github 上的一个全新仓库（以创建 HexoBackups 为例）。 首先，添加设备 SSH Key 到 Github 以提供访问权限（在搭建 Hexo 环境时已经添加过），并且在 Github 中创建 HexoBackups 仓库（操作方法可见：Git 使用指南之远程仓库（待续…））。 1）删除 Hexo 站点目录主题路径（Hexo站点目录\\themes）下原有的 .git* 缓存文件夹，并编辑站点目录中的 .gitignore 文件。 有些插件或者主题是从 Github 上 clone 过来安装的，每个文件夹下都会有对应的 .git 文件夹，记得先删掉，否则会和 Blog 仓库冲突。（.git 默认是隐藏文件夹，需要先开启显示隐藏文件夹。.git 文件夹被删除后整个文件对应的 Git 仓库状态也会被清空，避免冲突） 编辑 .gitignore 文件的作用是声明不被 Git 记录的非必要文件（我们希望将必要的 Hexo 配置文件进行版本控制，而不是所有文件）。Blog 站点目录下的 .gitignore 是 Hexo 初始化时生成的，可以先删除或者直接编辑，对 Hexo 不会有影响。我的 Hexo 默认 .gitignore 文件内容如下： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ .deploy_git 是 Hexo 默认的 .git 配置文件夹，不需要同步； public 内文件是根据 source 文件夹内容自动生成，不需要备份，不然版本仓库每次修改内容太多； node_modules 目录中存放了 Hexo 个人博客所需的所有插件，太大，使用时通过 npm install 安装即可。 .DS_Store、Thumbs.db、*.log 、db.json 等均属于非必要文件。 2）初始化本地仓库 Hexo Blog 站点目录下执行以下代码： 123# &lt;server&gt; 是指远程备份仓库的地址（HexoBackups）；origin 是本地分支；remote add 操作会将本地仓库映射到云端 git initgit remote add origin &quot;Repository Addr&quot; “Repository Addr” 即上面创建的用于备份的仓库：HexoBackups 的仓库地址。 3）添加本地文件到本地仓库并同步到远程 Github 上 123456# 添加 Hexo Blog 站点目录下所有文件（.gitignore 声明过的文件不包含在内)git add .# 添加更新操作说明git commit -m &quot;Hexo Blog Backups&quot;# 推送更新到云端服务器git push -u origin master 在执行这步之前一定要注意检查下 .gitignore 文件的内容，看看是否正确的把一些文件夹忽略掉了。如果加错了的话可以用： 1git rm -r --cached . 自此，我们已经成功将本地 Hexo 博客配置文件推送到了 Github 远程仓库 HexoBackups 中实现版本控制。 –&gt; 步骤三：其它设备终端克隆测试1）添加 SSH Key 到 GitHub 首先，我们需要将设备 PC_B 的 SSH Key 添加到 GitHub 以提供访问权限。 2）将 Hexo Github 仓库内容同步到本地 之前我们已经成功将 PC_A 电脑里的 Hexo 配置信息备份到 Github HexoBackups 仓库了。 现在在 PC_B 电脑准备通过为本地仓库配远程 Hexo Github 版本仓库以实现 Hexo 配置信息同步。 123456789# 创建本地博客目录mkdir HexoBlogProjectcd HexoBlogProjectgit init# 将本地文件和云端仓库映射起来。这步不可以跳过git remote add origin &quot;Repository Addr&quot;git fetch --allgit reset --hard origin/master 当然我们还可以直接 git clone 将 HexoBackups 仓库中的 Hexo 博客配置文件拉取下来： 1git clone &quot;Repository Addr&quot; 3）安装依赖插件 同步后需要安装相应的 Hexo 插件（这是由于我们之前备份时未备份 node_modules 插件目录），否则无法正常使用 Hexo： 1npm install 4）localhost 测试 PC_B 中打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 方案三：Hexo envs + hexo 分支备份和方案二中备份整个 Hexo 本地配置信息文件到一个新仓库不同的是，分支备份是在原 Hexo 静态页面托管仓库（username.github.io）重新创建一个分支（以 hexo 分支为例）来备份 Hexo 本地配置信息文件。 最终，username.github.io 仓库的 master 分支和 hexo 分支各自保存着一个版本： master 分支用于保存 Hexo 博客静态资源，提供博客页面以供人访问；hexo 分支用于备份博客部署文件，供自己维护更新，两者在一个 username.github.io 仓库内也不会有任何冲突。 -&gt; 步骤一：Hexo envsPC_A 中我们已经成功搭建和使用 Hexo 博客了，所以不需要重复安装。而关于 PC_B 中 Hexo 个人博客环境的搭建，参考：基于 Hexo 轻量级框架的博客搭建 。步骤如下： 安装 Node.js 安装 Git 安装 Hexo 步骤一和方案一种中完全一样，实现 PC_B 上 Hexo 环境的部署。 –&gt; 步骤二：hexo 分支备份注意，这一部分操作全部在 PC_A（保存了 Hexo Blog 最新进度）上进行。 和 方案二 中备份过程类似，这一部分给出 Hexo 分支备份通用流程，关于操作解读可对应 方案二 中的步骤二。 12345678910111213141516171819# 消除 Git 仓库冲突rm -rf Hexo站点目录\\themes\\主题目录、.git*# 即 Hexo 博客根目录cd Hexo站点目录# 初始化本地仓库git init# 将本地与 Github 远程仓库进行对接git remote add origin git@github.com:user/user.github.io.git# 添加 Hexo Blog 站点目录下所有文件（.gitignore 声明过的文件不包含在内)git add .# 添加更新操作说明git commit -m &quot;Hexo Blog Backups&quot;# 创建名为 hexo 的分支git checkout -b hexo# 推送分支到 GitHubgit push origin hexo –&gt; 步骤三：其它终端克隆测试1）添加 SSH Key 到 GitHub 首先，我们需要将设备 PC_B 的 SSH Key 添加到 GitHub 以提供访问权限。 2）克隆 Hexo 博客环境 123# 将 Github 中 hexo 分支 clone 到本地git clone -b hexo git@github.com:username/username.github.io.gitcd user.github.io 3）安装依赖插件 12# 安装 Hexo 博客中使用到的插件npm install 4）localhost 测试 PC_B 中打开浏览器，通过访问 localhost:4000 进行 Hexo 博客本地测试，发现已经可以成功访问到我们的 Hexo 本地博客页面。 Git + Hexo 管理博文这一部分我们来看加入版本控制后，如何进行 Hexo Blog 的多平台协同创作 （Git + Hexo）？ –&gt; 步骤一：发布静态页面 假设在 PC_B 电脑上写完了文章，然后进行发布： 1$ hexo d -g –&gt; 步骤一：同步 Hexo 最新配置 接下来，我们还需要将新文章的 .md 文件推送到备份仓库。（其实就是提交更新给 Hexo Github 备份仓库）： 1$ git add . 这时候可以用 git status 查看状态，一般会显示刚刚更改过的文件状态。如： 123456On branch masterChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) modified: db.json new file: source/_posts/test.md 上面的输出状态即说明 db.json 文件做了更改，source/_posts 目录下新增了 test.md 文件。 然后对更改添加说明并推送到远程仓库： 123456git commit -m '更新信息'# 推送git push# 或者（取决于整体备份还是分支备份）git push origin hexo 当显示类似如下提示的时候，即表示备份成功： 12To git@git.oschina.net:xxxx/HexoBackups.git + 2c77e1e...5616bc6 master -&gt; master (forced update) 再回到到 PC_A 电脑上的时候，我们需要拉取最新的 Hexo 配置信息到本地以实现本地仓库和远程仓库一致： 1234# 拉取最新版本git pull# 或者（取决于整体备份还是分支备份）git pull origin hexo 即可实现 Hexo 博客同步更新以及协同管理。 自此，基于 Hexo + Github·Page + Coding·Page + Domain + VSCode + MarkDown + TinyPNG + PicGo + Image Host + Git 框架的 Hexo 个人博客创作生态已经建立。 常见问题hexo init 卡死Hexo 搭建个人博客时，调用 hexo init 命令一直卡住不动： 12$ hexo initINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.git 这就很困惑了，npm 已经使用了淘宝源，node.js &amp;&amp; npm 版本也比较新，就是 hexo init 不成功…. 此时查看 Hexo 站点路径，发现目录已经出现clone的文件目录结构： 12345678.gitscaffoldssourcethemes.gitignore_config.ymldb.jsonpackage.json 网上查找原因，应该是 Hexo 主题未能成功下载（子模块未能成功下载），可以在 .gitmodules 查看相关信息： 123submodule &quot;themes/landscape&quot; path = themes/landscape url = https://github.com/hexojs/hexo-starter.git 通过查看站点目录下的 themes 目录，发现确实没有相应主题。 –&gt; 解决方法： 为 Git 配置代理： git config –global http.proxy http://proxyuser:proxypwd@proxy.server.com:port 当然，你也可以等待网络流畅时重新进行 hexo init，说不定下一次执行就成功了。 npm install 很慢很慢安装 Hexo 博客相关依赖插件时，我们需要使用 npm install 下载进行安装。但是执行指令后一直没反应，这是由于 npm 官方资源被墙，我们可以为其更换一个国内源： 1npm config set registry https://registry.npm.taobao.org 当然，当我们的 Hexo 个人博客使用较多的插件时，npm install 可能看起来很慢（好像卡在某一个安装语句不再执行），此时我们可以通过 Hexo 站点目录下的 node_modules 目录更新时间来判断。 如果 node_modules 目录下各种插件文件更新时间长时间不发生变化，就意外着安装已停止，Ctrl + c 即可。 Git 监测不到空文件夹Git 无法监测到空文件夹，也就意外着无法将空文件夹 git add、git commit -m &quot;&quot;、git push 推送到远程仓库，这会导致 Hexo 博客项目中丢失一些空的功能文件夹。这应该算是 Git 的设计失误。 解决方法： 需要在空文件夹中添加一个占位文件。主流做法是在空文件夹里放置一个 .gitkeep 文件。加个 .gitconfig 文件在里面比较实用，也不会觉得突兀，虽然绝大多数时候这个文件作用。","link":"/2017/09/22/Hexo-%E5%8D%9A%E5%AE%A2%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%8D%8F%E5%90%8C%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91/"},{"title":"打造沉浸式写作体验，你需要试试 Markdown + Editor","text":"Markdown，一款轻量级的，可以使用普通文本编辑器编写的标记语言，打造沉浸式写作新体验。 Markdown + Editor「Action」 夜深人静，房间的门紧闭着，灯也关着。 屏幕发出的亮光隐约勾勒出坐在电脑前码字的你的轮廓。 你脑海中的思绪畅游，无数想法在飞舞，但输出过程却不像脑中的思考那么流畅。 为了打磨用词和造句，你的手不断的从键盘移到鼠标上，只为把光标移到合适的位置。为了快速的调整样式，你虽然记住一些快捷键，但发现依然要先用鼠标选中。 不要小瞧了这看似短暂频繁的切换，稍纵即逝的想法可不会因为你的输出的节奏的中断而停留。 沉浸式写作 的前提，可不是只要有个安静不受打扰的环境就够了，你还需要让输出的速度跟上你思考的速度。 如果你刻意练习过盲打，那么你会知道提高打字速度的首要条件就是保证打字姿势的稳定，手要保持在键盘上，尽量减少手的移动范围。 可问题是，在写作过程中，如何才能在保持手在键盘上，却依旧能准确的移动光标、调整样式呢？ 答：忘记鼠标，只用键盘就好。 …… 哎哎哎，千万别走，不是在逗你。 相信我，你只需要一个简单的文本编辑器（YOU WANT），再熟练掌握一把“利刃”——Markdown Syntax，就可以开启新世界的大门。 Markdown 初识Markdown 是一种轻量级的，可以使用 普通文本编辑器编写 的标记语言。它允许所有的写作爱好者（Sharer）可以专注于内容而不是纠结于字体字号行间距等等排版问题（沉浸式写作），使用易读易写的纯文本格式编写文档，然后就可以转化成格式丰富优美的 HTML 页面或 PDF（所思即所得）。你唯一要付出的代价就是掌握极其 简单的标记语法。 眼尖尖的同学已经发现：普通文本编辑器编写！？对，你看的没错，只要你手头有任意一款文本编辑器，参照后文中「Markdown Function Demo」标记语法，就可以开始使用 Markdown “随心所欲”了。 敲黑板！！！是不有“急躁”的看官已经默默打开 Windows 自带的记事本准备开始尝试了…？ 初学者警告！！！ 初学 MarkDown 的人，最开始可能会用 Windows 自带的记事本进行编辑，然后baidu，balabala….在线转成 HTML 或 PDF，用自带的浏览器打开查看效果。这种方式是最绿色的不依靠任何其他软件，就可以完成一份高质量的排版，但…实在是太累了。 Windows 自带的记事本没有语法提醒功能，也没有语法高亮功能，还无法 实时预览，对初学者很不友好。往往边写作的同时还要百度语法，这就失去了用 MarkDown 快速办公的意义了（相信看客老爷们愤怒了，你不是说任何普通编辑器就可以编写了！！！前提是你得使用灰常熟练啊~人艰不拆…）。 事实上，使用更多的是： –&gt; 1 Markdown 在线编辑器，推荐一种：MdEditor； –&gt; 2 专门支持用来写 Markdown 的编辑器：MarkdownPad、Typora 等等。 对于新手，选择一款顺手的 Markdown 编辑器是刚需啊… MarkDown 编辑器推荐MarkdownPad2很多初学者的第一选择，支持多操作系统平台，UI 简洁，使用流畅，功能全面，但需要升级到 Pro 版本后（付费升级，可破解）才可解锁所有功能。主要特点：左右分屏实时预览（F5），可自定义添加各种 CSS 样式渲染。 缺点也很明显，软件 UI 一般般，更重要的是，安装后可能存在一些 Bug，如公式不能正常显示…，需要自行 baidu 解决。 关于 MarkdownPad2 安装以及常见问题解决见: 传送门 –&gt; MarkdownPad2 安装以及常见问题解决教程 。 Typora推荐，同样支持多平台（OS X， Windows 和 Linux），UI 界面美观，官网的首页如下： Typora 抛弃了传统的交互模式，它只使用一个窗口，却能优雅地实现同时将代码编辑与预览结合起来！从而为用户带来更加流畅直观的，所见即所得的 Markdown 写作体验。毕竟，对于刚接触 MarkDown 的新手来说，实时预览的功能真的太重要了。 Typora 安装过程很简单，一路 「Next」 即可。 Atom开源世界的巨人，全世界最大的，开源平台，GitHub 出品的编辑器 Atom，也是很多人选择使用的。 和 Typora 不同的是，Atom 并不只是用来写 MarkDown，通过丰富的插件机制支持 CSS，HTML，JavaScript 等各种网页编程语言，常用于 WEB 开发, 也可用于 PHP 等后端开发。 个人建议，可以和 Typora 二选其一（博主没有使用过 Atom，捂脸~）。 事实上，光日常学习和使用有上面几款编辑器已经可以满足你的需要了。 VS Code真正的编辑器神器，强烈安利！ 本人最常用的一款开源的文本编辑器编辑器（Atom 表示很悲伤），不仅用它写 MarkDown 文档，还可以通过丰富的插件机制用它写 Python、C/C++、Java 等等，几乎支持所有的语言。 你只需要下载它，安上 Markdown Preview Enhanced 插件就可以薅微软爸爸的羊毛了。界面效果图如下： 对于使用，篇幅原因，这里不进行详细的赘述。如果你想要详细了解 VS Code 的更多使用方法，可以关注我的相关博文。 Markdown 编辑器选择好之后，你就可以开始学习 Markdown 标记语法了： Markdown Function Demo标题演示一级标题：H1 语法规则： # 标题H1 MarkdownPad 中快捷键：Ctrl + 1 二级标题：H2 语法规则： ## 标题H2 MarkdownPad 中快捷键：Ctrl + 2 三级标题：H3 语法规则： ### 标题H3 MarkdownPad 中快捷键：Ctrl + 3 四级标题：H4 语法规则： #### 标题H4 MarkdownPad 中快捷键：Ctrl + 4 五级标题：H5 语法规则： ##### 标题H5 六级标题：H6 语法规则： ##### 标题H6 字符效果和横线演示删除线语法规则： &lt;s&gt;删除内容&lt;/s&gt; 显示效果： 删除内容 斜体字语法规则：*斜体字* &amp;&amp; _斜体字_ 显示效果： 斜体字 &amp;&amp; 斜体字 粗体法规则： **粗体** &amp;&amp; __粗体__ 显示效果： 粗体 &amp;&amp; 粗体 斜粗体语法规则： ***粗斜体*** &amp;&amp; ___粗斜体___ 显示效果： 粗斜体 &amp;&amp; 粗斜体 上下标语法规则：X&lt;sub&gt;2&lt;/sub&gt;, O&lt;sup&gt;2&lt;/sup&gt; 下标：X2，上标：O2 缩写缩写功能，同 HTML 的 &lt;abbr&gt; 标签 即更长的单词或短语的缩写形式，前提是开启识别 HTML 标签，默认已开启。 语法规则： The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;. 显示效果如下： The HTML specification is maintained by the W3C. 分割线 语法规则： — 字体颜色 语法规则: 1&lt;font color=blue/red/yellow...&gt; Text &lt;/font&gt; 显示效果： 此处文本为蓝色 此处文本为红色 引用 Blockquotes 文本引用 Blockquotes 引用的行内混合 Blockquotes 规则: &gt; 引用内换行使用&lt;br /&gt;标签，此处换行–&gt;这里为下一行引用文本。 锚点与链接 Links这是一个普通链接 语法规则： [这是一个普通链接](https://www.baidu.com/) 语法规则： [这是一个带标题的普通链接（光标移到此处显示标题）](https://www.baidu.com/ &quot;百度一下&quot;) 这是一个直接链接：https://www.baidu.com 语法规则： 这是一个直接链接：&lt;https://www.baidu.com&gt; 多语言代码高亮 Codes行内代码1Ctrl + k 或者 Tab 或者 ``` ``` 预格式化文本缩进后可用于格式化文本，正常以下内容会显示一个表格（可见下文绘制表格部分：3.8）： 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | JS 代码12345​```javascriptfunction test() { console.log(&quot;Hello world!&quot;);}​``` 显示效果如下： 123function test() { console.log(&quot;Hello world!&quot;);} HTML 代码12345678910111213141516171819​```html&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt; &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;​``` 显示效果如下： 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;} ul{list-style: none;} img{border:none;vertical-align: middle;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt; &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 图片链接 语法规则： [![](https://www.mdeditor.com/images/logos/markdown.png)](https://markdownpad.com &quot;markdown&quot;)] 可以发现，我们只是把链接中的文本替换为图片，就创建了一个图片链接。 如何插入图片： 语法规则： ![](https://www.mdeditor.com/images/logos/markdown.png) 插入图片效果如下： Follow your heart. 列表 Lists无序列表（减号）Unordered Lists (-)- 列表一 - 列表二 - 列表三 显示效果如下： 列表一 列表二 列表三 无序列表（星号）Unordered Lists (*)* 列表一 * 列表二 * 列表三 显示效果如下： 列表一 列表二 列表三 无序列表（加号和嵌套）Unordered Lists (+)多级列表注意缩进（2 空格），显示效果如下： 列表一 列表二 列表二-1 列表二-2 列表三 列表三-1 列表三-2 有序列表 Ordered Lists 第一行 第二行 第三行 绘制表格 Tables语法规则： 默认标题栏居中对齐，内容居左对齐。 -: 表示内容和标题栏居右对齐，:- 表示内容和标题栏居左对齐，:-: 表示内容和标题栏居中对齐。 内容和 | 之间的多余空格会被忽略，每行第一个 | 和最后一个 | 可以省略，- 的数量至少有一个。 | First Header | Second Header | | ------------ | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | 显示效果如下： First Header Second Header Content Cell Content Cell Content Cell Content Cell 去练习如下样式： Function name Description help() Display the help window. destroy() Destroy your computer! Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 Item Value Computer $1600 Phone $12 Pipe $1 特殊符号 HTML Entities Codes &amp;copy; &amp; &amp;trade; &amp;iexcl; &amp;pound; &amp; &trade; &iexcl; &pound; &amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; &amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14; &amp;times; &amp;divide; &amp;raquo; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 18&amp;ordm;C &amp;quot; &amp;apos; 18&ordm;C &quot; &apos; 科学公式 MathJaxMarkdown 文档中引入 MathJax 标签就可以正常显示了，标签内容如下： &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt; 然后你会发现，博文中插入的公式已可以正常显示了： $$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$","link":"/2017/09/20/%E6%89%93%E9%80%A0%E6%B2%89%E6%B5%B8%E5%BC%8F%E5%86%99%E4%BD%9C%E4%BD%93%E9%AA%8C%EF%BC%8C%E4%BD%A0%E9%9C%80%E8%A6%81%E8%AF%95%E8%AF%95-Markdown-Editor/"},{"title":"Java JDK 下载与安装教程","text":"开始正式的 JAVA 语言学习之前，首要的就是完成 Java 程序所需的开发、运行环境搭建——JDK（Java Development Kit：Java 开发工具包）的安装，以及配置。 本篇博文所作目的主要是记录一下 Java 开发环境的搭建过程，即 JDK 的安装以及配置过程 安装以及配置 JDK这里，首先给出 JDK 各版本下载地址供安装选择： Download –&gt; JDK 官方最新版 Download –&gt; JDK 1.8 官方最新版 [Download –&gt; JDK 官方各历史版本 本文将以 JDK1.8 的安装配置为 Demo，其它 JDK 版本安装过程一样。 JDK Package Download根据个人的使用需要，从上面选择要访问的 JDK 下载页，选择就可以下载相应的安装包了： 注意：目前从官网下载相应版本 JDK 之前，你需要注册一个 Oracle 账号，并完成登录，才会被授权下载使用。 可以发现，JDK 官网提供了不同平台下（Linux、Mac 以及 Windows）JDK 的安装包。后文我们会给出 Linux &amp; Windows 平台下 JDK 的安装配置方法： 根据需要下载相应平台安装包 1.1 –&gt; For Windows: 对于 Windows 下的安装包，提供了 i586（32 bit） 和 x64（64 bit） 供我们下载使用。 这里我们选择安装包：jdk-8u261-windows-x64.exe 用于后续的安装。 1.2 –&gt; For Linux: 对于 Linux下的安装包，提供了 i586（32 bit） 和 x64（64 bit） 的 RPM 包以及 .tar.gz 包供下载使用。 这里我们选择安装包：jdk-8u261-linux-x64.tar.gz 用于后续的安装。 JDK Setup上面我们已经下载好了 JDK 的安装包，接下来我们来看如何在不同的平台下安装下载好的 JDK 安装包： For Windows1）检查当前系统中是否安装有 JDK Windows 命令行（Terminal ）下执行如下指令： 1$ java -version 如果原始系统中已安装有 JDK ，则会输出如下 JDK 版本等信息： 123java version &quot;1.8.0_131&quot;Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode) 否则的话，开始安装 JDK（当然，如果系统中已存在某个版本的 JDK 了，我们还可以再同时安装一个其它目标版本的 JDK），接下文。 2）安装 JDK 双击 jdk-8u261-windows-x64.exe 安装包开始进行安装…… 安装过程中没有什么难的，Next 即可。需要注意的是，我们可以自定义 JDK 安装路径，不要什么东西都往系统盘安装，这里假设我们安装在：E:\\JAVA 目录下。 等待安装完成关闭安装界面即可。 可以发现，JDK 以及被安装到了 E:\\JAVA 目录下，包含两个文件： 12jdk1.8.0_261jre1.8.0_261 自此 Windows 下 JDK 的安装就完成了，但此时仍不能使用，我们还需要为 JDK 配置环境变量，接 【1.3.1 Windows 下 JDK 环境变量配置】。 For Linux1）检查当前系统中是否安装有 JDK 1[root@localhost test]# java -version 有些 Linux 系统默认会安装有 openjdk（一种 Linux 开源 JDK），例如会输出如下信息： 123openjdk version &quot;1.8.0_102&quot;OpenJDK Runtime Environment (build 1.8.0_102-b14)OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode) 我们可以选择先将其卸载掉（当然，不用管也可以）： 1234# Centos 下可以使用 yum 进行卸载：[root@localhost test]# yum remove *openjdk*# Ubuntu 下[root@localhost test]# apt-get remove openjdk* 当然系统中还有可能装有其它版本（区别于 openjdk，例如：oracle）的 JDK，例如： 123java version &quot;1.8.0_131&quot;Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode) 否则的话，开始安装 JDK（当然，如果系统中已存在某个版本的 JDK 了，我们还可以再安装一个其它目标版本的 JDK），接下文。 2）安装 JDK 进入到 jdk-8u261-linux-x64.tar.gz` 安装包存放目录（例如：~/Downloads），并且对安装包进行解压： 12345678910# 查找安装包：[root@localhost test]$ cd Downloads[root@localhost Downloads]$ ls |grep jdk*jdk-8u131-linux-x64.tar.gz# 解压至 /usr/java 目录下：[root@localhost Downloads]$ tar -zxvf jdk-8u131-linux-x64.tar.gz -C /usr/java# 等待解压完成即可。# 解压后，我们可以在 /usr/java 目录下可以查看到解压好的 JDK 目录：jdk1.8.0_131 自此 Linux下 JDK 的安装就完成了，但此时仍不能使用，我们还需要为 JDK 配置环境变量，接 【3. 环境变量配置】。 Config EvnsFor WindowsWindows 下为 JDK 配置环境变量: 首先打开环境变量配置界面：右键我的电脑 ---&gt; 属性 ---&gt; 高级系统设置 ---&gt; 环境变量。界面如下： –&gt; 开始设置环境变量: 这里注意，我们既可以设置普通用户变量，也可以设置系统变量。区别在于设置普通用户变量的话，只有该用户下可用，其他用户想要使用的话需要重新配置环境变量。而设置系统变量后，我们可以在所有用户下都可以使用。 –&gt; 故，这里我们选择设置系统变量： 1）点击系统变量下面的新建按钮，变量名设置为：JAVA_HOME（代表 JDK 安装路径），变量值：E:\\JAVA\\jdk1.8.0_261（具体的 JDK 的安装路径）。如下： 2）继续在系统变量里面新建一个 CLASSPATH 变量， 其变量值为：.;%JAVA_HOME%\\lib\\tools.jar;%JAVA_HOME%\\lib\\dt.jar;。如下： 这里注意变量前面还有一个 .;，表示当前路径，不要漏加！！！ 3）在系统变量里面找一个变量名是 Path 的变量，找到后进行编辑，在它的变量值最后面追加一段如下的代码： 1%JAVA_HOME%\\bin; 最后点击确定，此时 Windows 下 JDK 的环境变量配置就完成了，还不圆满，需要测试一下。 4）测试 WIndows Terminal 下分别执行如下指令： –&gt; java -version 1234$ C:\\Users\\guoji&gt;java -versionjava version &quot;1.8.0_211&quot;Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode) –&gt; java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051C:\\Users\\guoji&gt;java用法: java [-options] class [args...] (执行类) 或 java [-options] -jar jarfile [args...] (执行 jar 文件)其中选项包括: -d32 使用 32 位数据模型 (如果可用) -d64 使用 64 位数据模型 (如果可用) -server 选择 &quot;server&quot; VM 默认 VM 是 server. -cp &lt;目录和 zip/jar 文件的类搜索路径&gt; -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt; 用 ; 分隔的目录, JAR 档案 和 ZIP 档案列表, 用于搜索类文件。 -D&lt;名称&gt;=&lt;值&gt; 设置系统属性 -verbose:[class|gc|jni] 启用详细输出 -version 输出产品版本并退出 -version:&lt;值&gt; 警告: 此功能已过时, 将在 未来发行版中删除。 需要指定的版本才能运行 -showversion 输出产品版本并继续 -jre-restrict-search | -no-jre-restrict-search 警告: 此功能已过时, 将在 未来发行版中删除。 在版本搜索中包括/排除用户专用 JRE -? -help 输出此帮助消息 -X 输出非标准选项的帮助 -ea[:&lt;packagename&gt;...|:&lt;classname&gt;] -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;] 按指定的粒度启用断言 -da[:&lt;packagename&gt;...|:&lt;classname&gt;] -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;] 禁用具有指定粒度的断言 -esa | -enablesystemassertions 启用系统断言 -dsa | -disablesystemassertions 禁用系统断言 -agentlib:&lt;libname&gt;[=&lt;选项&gt;] 加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof 另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help -agentpath:&lt;pathname&gt;[=&lt;选项&gt;] 按完整路径名加载本机代理库 -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;] 加载 Java 编程语言代理, 请参阅 java.lang.instrument -splash:&lt;imagepath&gt; 使用指定的图像显示启动屏幕有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。 —&gt; javac 12345678910111213141516171819202122232425262728293031323334C:\\Users\\guoji&gt;javac用法: javac &lt;options&gt; &lt;source files&gt;其中, 可能的选项包括: -g 生成所有调试信息 -g:none 不生成任何调试信息 -g:{lines,vars,source} 只生成某些调试信息 -nowarn 不生成任何警告 -verbose 输出有关编译器正在执行的操作的消息 -deprecation 输出使用已过时的 API 的源位置 -classpath &lt;路径&gt; 指定查找用户类文件和注释处理程序的位置 -cp &lt;路径&gt; 指定查找用户类文件和注释处理程序的位置 -sourcepath &lt;路径&gt; 指定查找输入源文件的位置 -bootclasspath &lt;路径&gt; 覆盖引导类文件的位置 -extdirs &lt;目录&gt; 覆盖所安装扩展的位置 -endorseddirs &lt;目录&gt; 覆盖签名的标准路径的位置 -proc:{none,only} 控制是否执行注释处理和/或编译。 -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程 -processorpath &lt;路径&gt; 指定查找注释处理程序的位置 -parameters 生成元数据以用于方法参数的反射 -d &lt;目录&gt; 指定放置生成的类文件的位置 -s &lt;目录&gt; 指定放置生成的源文件的位置 -h &lt;目录&gt; 指定放置生成的本机标头文件的位置 -implicit:{none,class} 指定是否为隐式引用文件生成类文件 -encoding &lt;编码&gt; 指定源文件使用的字符编码 -source &lt;发行版&gt; 提供与指定发行版的源兼容性 -target &lt;发行版&gt; 生成特定 VM 版本的类文件 -profile &lt;配置文件&gt; 请确保使用的 API 在指定的配置文件中可用 -version 版本信息 -help 输出标准选项的提要 -A关键字[=值] 传递给注释处理程序的选项 -X 输出非标准选项的提要 -J&lt;标记&gt; 直接将 &lt;标记&gt; 传递给运行时系统 -Werror 出现警告时终止编译 @&lt;文件名&gt; 从文件读取选项和文件名 For Linux开始设置环境变量: 这里注意，我们既可以设置普通用户变量（局部变量），也可以设置系统变量（全局变量）。区别在于设置普通用户变量的话，只有该用户下可用，其他用户想要使用的话需要重新配置环境变量。而设置系统变量后，我们可以在所有用户下都可以使用。 –&gt; 故，这里我们选择设置系统变量： 1234567# 打开系统变量配置文件：[root@localhost test]# vim /etc/profile# 追加如下内容：export JAVA_HOME=/usr/java/jdk1.8.0_131export CLASSPATH=.;%JAVA_HOME%/lib/tools.jar:%JAVA_HOME%/lib/dt.jarexport PATH=$PATH:${JAVA_HOME}/bin –&gt; 生效 /etc/profile 配置文件： 1[root@localhost test]# source /etc/profile ============================================= 再来看一下普通用户变量如何设置： 12345# 在 ~/.bashrc 用户配置文件中添加上述内容即可。[root@localhost test]$ vim ~/.bashrc# 追加完配置内容后，需要使配置生效：[root@localhost test]$ source ~/.bashrc 此时 Linux下 JDK 的环境变量配置就完成了，还不圆满，需要测试一下。 –&gt; 测试 12345$ java -version$ java$ javac 篇幅原因，输出信息释义见 Windows 中测试部分。 You Need Know MorePath 和 CLASSPATH 详解1 –&gt; Path Path，是系统用来搜索可执行文件路径的环境变量。如果所执行的文件不在当前目录下，就会依次搜索 Path 中设置的路径。 而 Java 中的可执行文件路径是存放于 bin 目录下的，所以在 Path 中设置了 JDK 的 bin 路径后，DOS/Shell 中即使不把 jdk 可执行文件的完整路径给出，系统会自动去 Path 中设置的路径查找，然后执行。 这也是很多应用配置系统环境变量（Path）后，就可以直接在 DOS/Shell 中快速调用或启动的原因！ 2 –&gt; CLASSPATH CLASSPATH，是 Java 专用的查找类的路径，用来指定 Java 程序中所用类文件所在的位置。 如 Java 程序中，“import javax.swing.JTable” 就是告诉编译器引入 “javax.swing” 这个包下面的 “JTable”，而 CLASSPATH 就是告诉编译器要去哪里找到这个包。 两套 JRE？？？Windows 下 Java 安装完成之后，你会发现有两套 JRE：一套位于 &lt;JDK安装目录&gt;\\jre 下，一套位于 C:\\Program Files\\Java\\jre1.8.0_xxx 或和 &lt;JDK安装目录&gt; 同目录下。 并且安装 JDK 可以选择是否只安装 JRE，而不是 JDK，那么只会在安装目录下安装唯一的一套 JRE。 1 –&gt; 两套 JRE 的作用？ 两套 JRE 主要体现在工作的职责上，也就是不同的JRE负责不同的工作范围： JDK 里的工具有些是用 Java 所编写，因此要使用 JDK 所附的工具来开发 Java 程序，也必须要附一套 JRE 才行（如javac.exe、jar.exe…） 例如： javac.exe 与输入 java -cp c:/jdk/lib/tools.jar com.sun.tools.javac.Main 是一样的，可以认为 javac.exe 只是一个包装器（Wrapper），目的是简写指令。 而，另外一套 JRE 就是专门用来运行开发好的 Java 程序用的。 2 –&gt; 执行谁？ 例如 Java.exe 依照顺序来查找 JRE： 自己的目录下有没有 JRE ? 父目录有没有 JRE ? 查询注册表（环境变量）：[HKEY_LOCAL_MACHINE/SOFTWARE/JavaSoft/Java Runtime Environment] ? JDK 安装目录详解JDK安装目录如下（JDK 8）： 下面来详细介绍： 1 –&gt; bin bin(binary) 目录下存放了 JDK 的各种工具的可执行文件： 12345678# 主要工具可执行文件：Javac：Java编译器，将 Java 源代码编译为字节码文件；Java：Java解释器，解释执行 Java 字节码文件；appletviewer：Java Applet小程序查看器，可以执行 HTML 文件上 Java Applet 程序；Javadoc：java文档生成器，提取 Java 源码中的注释生成 HTML 说明文档；Jdb：Java调试器，可以逐行执行程序，设置断点和检查变量；Javap：Java反编译器，显示编译成的类文件中的可访问功能和数据，同时显示字节代码含义。jar：java打包器，可将 Java 包结构压缩成以 .jar 为后缀的 JAR 文件 2 –&gt; db db 目录是从 Java 6 开始新增的一个目录，这是一个纯 Java 实现、开源的数据库管理系统（DBMS），源于 Apache 软件基金会（ASF）名下的项目 Derby。 3 –&gt; include 由于 JDK 是通过 C 和 C++ 实现的，因此在启动时需要引入一些 C 语言的头文件，所以 include目录里面是一些供 C语言使用的标题文件。 支持 Java 本地接口和 Java 虚拟机调试程序接口的本地编程技术。 4 –&gt; jre jre 目录路径下安装的就是 Java 运行时环境。 5 –&gt; lib lib(libarary)，见名知义，存放类库，存放的是开发工具使用的归档包文件。 6 –&gt; src.zip 该压缩文件里面存放的就是 Java 所有核心类库的源代码。通过该文件可以查看 Java 基础类的源代码。 7 –&gt; javafx-src.zip 存放 JavaFX 脚本，JavaFX 它是一种声明式、静态类型编程语言。(是 JDK 1.8 以上新加的)。","link":"/2017/10/09/Java-JDK-%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"},{"title":"稳定快速、高效免费的图床解决方案-Github-jsDelivr-PicGo","text":"一种稳定快速、高效免费的图床解决方案 —— Github + jsDelivr + PicGo。 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Introduction先来对比一下之前博文我们给出的图床解决方案: 自建图床服务器：需要支出必要的服务器等费用，还需要去进行相对繁琐的安装过程才可以使用； 云存储对象：有免费额度，但使用量较大时，可能产生相关存储流量费用，并且需要进行实名认证，域名备案等； 第三方免费图床：流量、储存、图片上传受限，国内大平台图床服务商需要进行实名认证，域名备案等； 其它小众图床：不可靠，随时有挂掉的风险。 使用过 Github 的看官肯定知道，Github 的 Repo 也可以储存东西，最直接的就是程序的版本控制，当然也可以用来当作备份储存。关于存储，Github 官方回复是：该行为不构成 Abuse。 因此，GitHub 作为图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效。 并且 GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，速度和容量问题都得以解决，而且完全免费，可以说是目前免费图床的较佳的一种解决方案！ 下面我们来看解决方案的具体实施： New Github Repo登录/注册 GitHub，新建一个仓库。填写好仓库名（HexoImageBed0），仓库描述(Hexo Image Host Repo)，根据需求选择是否为仓库初始化一个 README.md 描述文件: 填好仓库信息后，点击【Create Repository】即可完成 Repo 的创建。 生成一个 Token在主页选择【Settings】： Next –&gt; 点击【Developer settings】: Next –&gt; 依此点击【Personal access tokens】–&gt;【Generate new token】: 进入如下界面： 填写好描述，勾选【repo】，然后点击【Generate token】生成一个如图所示的 Token： 注意：请勿关闭当前页面，这个 Token 只会显示一次，自己先保存下来。或者等后面配置好 PicGo 后再关闭此网页。 PicGoPicGo，一款比较优秀的图床工具。 所谓图床工具，就是自动把本地图片转换成链接，以精简用户繁杂的图床上传、下载过程的一款工具，网络上有很多免费图床工具可供使用。 PicGo 可以支持微博，七牛云，腾讯云 COS，又拍云，GitHub，阿里云 OSS，SM.MS，Imgur 等八种常用图床，功能强大，简单易用。 PicGo Setup首先，你可以从这里提供的 PicGo 下载链接地址 下载 PicGo下载到最新的 PicGo。下载好后界面如下所示： PicGo 配置安装好后就可以开始配置 Github 图床了: 具体步骤为：【图床设置】–&gt; 【GitHub图床】，配置界面如下： ============================================== 配置内容详解： 设定仓库名：按照【用户名 / 图床仓库名】的格式填写； 设定分支名：【master】； 设定 Token：粘贴之前生成的【Token】； 指定存储路径：填写想要储存的路径，如【Img/】，这样就会在仓库下创建一个名为 Img 的文件夹，图片将会储存在此文件夹中； 设定自定义域名：在图片上传后，PicGo会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接。这里由于我们要使用 jsDelivr 加速访问，所以可以设置为【https://cdn.jsdelivr.net/gh/用户名/图床仓库名 】。使用时，我们就可以通过【https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径】加速访问我们的图片了。 About CDN百度百科：CDN 的全称是 Content Delivery Network，即内容分发网络。 CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。 我们知道，放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开以及资源访问速度，“jsDelivr + Github” 是免费，好用的 CDN 加速方案，非常适合博客网站使用。 jsDelivr 引用资源方法： https://cdn.jsdelivr.net/gh//@/ 例如： 12# https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0@1.0/images/test.png# https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0@2.0/css/style.css 注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下： 123456789101112131415161718# 加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file# 加载 jQuery v3.2.1https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js# 使用版本范围而不是特定版本https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.jshttps://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js# 完全省略该版本以获取最新版本https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js# 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js# 在末尾添加 / 以获取资源目录列表https://cdn.jsdelivr.net/gh/jquery/jquery/ Quick Start安装配置好 Github + jsDelivr+PicGo 之后，我们就可以进行高效创作了 点击 PicGo【上传区】，将图片拖拽到上传区域，即可自动上传到 Github 仓库（支持多图片上传），注意上传区域下方可设置图床链接格式，默认为 Markdown 格式（可以直接复制到 MD 文档中使用）。 PicGo 还有相册功能，可以快速查看以及复制上传的图片链接。并且可以对已上传的图片进行删除，修改链接等快捷操作。 例如，我们选择默认的链接格式（Markdown），上传完毕后，点击相册，然后复制相应图片链接，示例： 1![](https://cdn.jsdelivr.net/gh/TheNightIsYoung/HexoImageBed0/Img/hexo-picgo-setting.png) 这样的 Markdown 链接格式，可以直接插入到 MD 中使用了。 ================================================ PicGo 用了一段时间，可能突然发现偶尔上传图片时报如下错误： 12# 上传失败：服务端出错，请重试# 上传失败：请检查配置和上传文件是否符合要求 解决方法（迷之方法~）： 更改文件名（任何形式的改动）即可成功上传。向服务器上传已存在图片也会上报上诉错误。 You need to know more当然了，人无完人。Gihub+jsDelivr+PicGo 图床解决方案也是有缺陷的，你应该了解当前方案的局限： Github Page 容量受限正如 Github 官方给出的说明： Github 没有设置磁盘配额。我们试图为所有 Git 仓库提供充足的存储空间。保持存储库的大小可以确保我们的服务器快速且下载速度快。 如果您经常向 GitHub 推送大型文件，可以考虑将 Git 大型文件存储（Git LFS）作为你的工作流的一部分。Git LFS 可以很好地使用 GitHub 流，并且可以与任何大文件一起使用，不管它的类型是什么。 如果您的存储库超过 1 GB，则可能会收到来自 GitHub 支持的礼貌电子邮件，要求您减少存储库的大小以使其恢复。 也就是说，对于 Github Repo 是没有磁盘配额限制的，但单个仓库存储要低于 1G。 这也就意味着，一旦仓库满额，就得需要重新配置一个新的图床仓库了… Public RepoGithub 中创建的图床仓库必须是 Public，如果是 Pravite，那么图片地址会带有一个随时刷新 Token，这样虽然 Repo 他人不可见，但是也没法作为图床用。 Github Contribution Activity图床每添加一张，就会进行一次 commit，这样会导致你的 Github 动向表部分一片绿……虽然这样显得你很活跃，但是真正点进去会发现你的代码更新并没有你真正提交 commit 的频率高。 小结: Gihub 是一个稳定快速，高效免费的图床解决方案，但绝对不适用于大流量场景，只限于个人小流量博客站点适用。 并且，我们要注意：禁止滥用！！！把 Github 当图床算滥用，那么和把微博当图床使用最终导致被锁理所应当。","link":"/2017/09/21/%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Github-jsDelivr-PicGo/"},{"title":"一文学会 Hexo 轻量级框架的博客搭建【持续更新】","text":"HEXO 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 写在前面–&gt; 在开始 Hexo 轻量级博客框架搭建之前，首先说明本文所作目的： 其一：本文作为基于 Hexo Frame 搭建个人博客过程记录，方便日后回顾使用 其二：由于在搭建过程中受益于博客上分享过 Hexo 环境搭建的前辈们（致敬~），故作此以分享给更多的 Hexo 新手小白们。 如文中有表述不恰当的地方，欢迎各位在留言区进行指正，若有转载请注明出处！ 更多 Hexo 博客框架内容，请关注博主 Hexo 博文系列： 一文学会 Hexo 轻量级框架的博客搭建【持续更新】 Hexo 预安装环境部署之 Node.js Git 使用指南之初识 打造沉浸式写作体验，你需要试试-Markdown-Editor 基于图床的博客图片存储解决方案 稳定快速、高效免费的图床方案-Github-jsDelivr-PicGo Hexo 博客多设备协同管理问题【持续更新】 Getting Started with IcarusHexo 是一个快速、简洁且高效的博客框架。支持 GitHub Flavored Markdown 解析文章。并且通过 Node.js 所带来的超快生成速度，可利用靓丽的主题在几秒内瞬间完成静态网页渲染。 注意，在正式开始 Hexo 博客安装以及搭建之前，我们需要预先准备 Hexo 安装环境依赖（预安装环境），这是必须的，否则会影响到后续的安装、搭建过程。所以下面我们需要先来 部署 Hexo 预安装环境： 安装 Node.js前面提过，Hexo 博客需要 Node.js 来进行渲染，才可以完成最终博客静态页面的显示。关于 Node.js 的详细下载以及安装过程说明请参见：Hexo 预安装环境搭建之 Node.js ，这里提供了不同平台下 Node.js 的安装过程。 –&gt; 到这里，相信你已经完成了 Node.js 的安装 安装 Git关于 Git，你可以理解为 Hexo + Git 的搭配方案才可以让互联网内的其他用户可以正常访问我们的博客站点，甚至博客的多平台（家&amp;公司&amp;学校…多环境博客创作）协同管理也要靠 Git 来支持。 Git 的详细下载以及安装过程说明请参见：Git 使用指南之初识 ，这里不仅提供了不同平台下 Git 的安装记录，还包含了 Git 快速入门指南 来帮助你快速了解 Git。 –&gt; 到这里，相信你已经完成了 Git 的安装 维护一个 Github 远程仓库首先通过 Github 官网 ，注册一个 Github 账号并完成登陆。 在 Github 上新建一个 Repository（远程仓库），显示如下： 注意：Repository 名称最好是 Github 账号名（保证唯一，这里我的 Github 账户名是：TheNightIsYoung），并且一定要加 .github.io，所以最终我所创建的 Github 仓库名称为：TheNightIsYoung.github.io。 接着，我们还需要为 Github 和 本地 Git 配置 SSH Key，具体配置过程可以参见 Git 使用指南之远程仓库 中 “4.1.1 GitHub 配置 SSH Key” 章节内容。 维护一个 Gitee 远程仓库首先通过 Gitee 官网 ，注册一个 Citee（码云）账号并完成登陆。 当然，你还可以选择其它 国内远程仓库，这里配置另外一个远程仓库的目的主要是为了解决 Github 的访问速度较慢的问题（不要深究，后续会进行说明）。 例如：如果你使用过 腾讯云开发者平台 或者 Coding（腾讯云开发者平台是由腾讯云与 CODING 共同开发的）的用户无须使用 Gitee 平台远程仓库，可以直接使用 Coding 平台。两者在使用上几乎没有差异（但这里博主推荐使用 Gitee，一些原因博主感觉 Coding 越来越不友好了….）。 以 Gitee 平台为例，新建一个项目（Repository），如下： 这里注意：和 Github 一样，Repository 名称也要和账户名称一致。同样，我们需要为 Gitee 配置 SSH Key，在账户 Settings 中点击 SSH keys，添加一个 SSH KEY，将之前公钥的内容添加进去。然后测试是否成功连接： 123456C:\\Users\\Jie Guo&gt;ssh -T git@gitee.comThe authenticity of host 'gitee.com (212.64.62.183)' can't be established.ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'gitee.com,212.64.62.183' (ECDSA) to the list of known hosts.Hi TheNightIsYoung! You've successfully authenticated, but GITEE.COM does not provide shell access. 预安装环境部署至此就完成了~ 下面我们正式开始 Hexo 博客的搭建： Hexo 安装以及初始化NPM 安装 Hexo使用 NPM 管理工具安装 Hexo 在预安装环境部署中我们已经成功安装 Node.js，这里无需单独安装 npm（Node.js 中已包含了 npm），打开 Git Bash（桌面点击鼠标右键）运行以下命令安装 Hexo： 1$ npm install -g hexo-cli 回车之后，日志信息输出中可能会出现 WARN 的警告语句，不要担心，等着即可…。过一段时间如果出现hexo 版本号信息输出的语句就代表安装成功了。如下： 123456npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+hexo-cli: 1.1.0audited 4700 packages in 5.05sfound 0 vulnerabilities –&gt; npm install 很慢很慢的问题，请参见博文 1.4 常见问题。 安装完后输入 hexo -v 验证是否安装成功： 123456789101112131415161718$ hexo -vhexo: 3.8.0hexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.0v8: 6.8.275.32-node.45uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e 初始化 Hexo 博客目录首先在任意一个位置新建一个文件夹用于存放 Hexo 初始化博客文件，这里我选择 F:/HexoBlogProject ： 12$ cd F:$ mkdir HexoBlogProject 然后在 Git Bash 中依次运行以下命令来 初始化 Hexo 项目： 123$ hexo init &lt;floder&gt;$ cd &lt;floder&gt;$ npm install 实际环境测试如下： 123456789101112131415161718192021222324252627282930313233343536373839$ hexo init HexoBlogProject/INFO Cloning hexo-starter to F:\\HexoBlogProjectCloning into 'F:\\HexoBlogProject'...remote: Enumerating objects: 68, done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 68Unpacking objects: 100% (68/68), done.Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'Cloning into 'F:/HexoBlogProject/themes/landscape'...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 867 (delta 0), reused 0 (delta 0), pack-reused 866Receiving objects: 100% (867/867), 2.55 MiB | 1.64 MiB/s, done.Resolving deltas: 100% (459/459), done.Submodule path 'themes/landscape': checked out '73a23c51f8487cfcd7c6deec96ccc7543960d350'INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm WARN deprecated postinstall-build@5.0.3: postinstall-build's behavior is now built into npm! You should migrate off of postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.&gt; nunjucks@3.1.6 postinstall F:\\HexoBlogProject\\node_modules\\nunjucks&gt; node postinstall-build.js srcnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})added 422 packages from 501 contributors and audited 4700 packages in 23.449sfound 0 vulnerabilitiesINFO Start blogging with Hexo!$ cd HexoBlogProject/$ npm installnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})audited 4700 packages in 5.05sfound 0 vulnerabilities 看到 INFO Start blogging with Hexo！ 是不很激动！！！此时我们来看一下 Hexo 初始化目录 HexoBlogProject 结构，如下： 123456789HexoBlogProject.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes HexoBlogProject 站点目录说明这一小节我们简要介绍一下站点目录结构，这将有助于我们进一步了解 Hexo 博客框架的工作原理。 1）package.json：hexo 框架的参数和所依赖插件： 12345678910111213141516171819{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;3.8.0&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.7.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.1&quot; }} 2）scaffolds—脚手架、骨架 当我们想要新建一篇文章的时候，hexo 是根据这个目录下的文件进行构建的，基本不用关心。 3）source—博文目录 source 目录下包含一个 _posts 目录 ：需要新建的博文都放在 _posts 目录下。 _posts 目录下是一个个 MarkDown 文件。默认情况下有一个 hello-world.md 的文件，博文就在这个文件中编辑。 _posts 目录下的 MarkDown 文件，最终会被编译成 html 文件，放到 public`（此文件现在应该没有，因为 Blog 项目初始化之后还没有编译过）文件夹下。 4）themes—主题目录 themes 为博客网站主题目录，Hexo 有非常好的主题拓展，支持的主题也很丰富，通过更换主题会使得你的博客更加酷炫，后面的博文会教你如何更换 Hexo 主题。 \\themes 目录下每一个子目录就是一个主题，默认情况下子目录如下： 123themes.|-- landscape // 默认主题 当然我们可以下载自己满意的主题到该目录下，hexo主题传送门。 5）_config.yml—站点配置文件： 博客站点的很多信息都在这里配置：诸如网站名称、副标题、描述、作者、语言、主题等等参数。这里我们给出_config.yml 文件中的内容，以及主要参数说明 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Hexo # 网站标题subtitle: # 网站副标题description: # 网站描述keywords:author: John Doe # 作者language: # 语言timezone: # 网站时区：Hexo 默认使用当前电脑的时区。时区列表，比如说：America/New_York, Japan, 和 UTC 。# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.com # 站点的 Urlroot: / # 站点的根目录permalink: :year/:month/:day/:title/ # 文章的“永久链接”格式 permalink_defaults: # 永久链接中各部分的默认值# Directorysource_dir: source # 资源文件夹：用来存放 hexo 内容public_dir: public # 公共文件夹：这个文件夹用于存放生成的站点文件。tag_dir: tags # 标签文件夹archive_dir: archives # 归档文件夹category_dir: categories # 分类文件夹code_dir: downloads/code # Include code 文件夹i18n_dir: :lang # 国际化（i18n）文件夹skip_render: # 跳过指定文件的渲染：可使用 glob 表达式来匹配路径# Writingnew_post_name: :title.md # File name of new posts # 新文章的文件名称default_layout: post # 预设布局titlecase: false # Transform title into titlecase # 把标题转换为 title caseexternal_link: true # Open external links in new tab # 在新标签中打开链接filename_case: 0 # 把文件名称转换为 ‘1’ 小写或 ‘2’ 大写render_drafts: false # 是否显示草稿post_asset_folder: false # 是否启动 Asset 文件夹relative_link: false # 把链接改为与根目录的相对位址 future: true # 显示未来的文章highlight: # 内容中代码块的设置 enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map: # 分类别名tag_map: # 标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD # 日期格式time_format: HH:mm:ss # 时间格式# Pagination## Set per_page to 0 to disable paginationper_page: 10 # 分页数量pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape # 主题名称# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: # 部署部分的设置 type: # 类型：常用的是 Git 关于 HexoBlogProject 站点目录配置以及使用，后续我们进行博客配置时会具体说明，这里不再赘述。 Hexo 本地博客上面我们已经完成了 Hexo 本地博客的安装以及搭建，注意只是 本地博客（只可以在你本地运行，其他人在互联网上是看不到的）。现在我们来启动 Hexo 本地服务，进行本地博客预览测试。Git Bash 中运行以下命令： 123$ hexo server （或 hexo s）INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 此时，通过浏览器访问 http://localhost:4000/ ，就可以看到 Hexo 的原始博客内容，页面如下所示： 至此，我们已经可以在本地使用 Hexo 博客了。 但其实我们更加关注的是如何将 Hexo 博客发布到 Internet 上供其他人分享交流，下面我将会给出一个解决方案——将我们搭建好的本地 Hexo 博客项目推送到公共代码仓库以提供公共访问。 Hexo 个人博客实施方案实施方案一：Github·PageGithub·Page 方法是将本地 Hexo 博客推送至 GithubPages 以实现公共访问： 1）首先，安装 hexo-deployer-git 插件，Git bash 下运行下面命令： 12345678910$ npm install hexo-deployer-git --savenpm WARN deprecated swig@1.4.2: This package is no longer maintainednpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;})+ hexo-deployer-git@0.3.1added 31 packages from 36 contributors and audited 5870 packages in 11.225sfound 1 low severity vulnerability run `npm audit fix` to fix them, or `npm audit` for details 2）然后，修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master 实际环境测试： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master 这里，我的 Github account name（Github 账户名称）为：TheNightIsYoung。 注意：仓库地址最好使用 SSH 访问，不要填写 Http 地址。 3）将本地 Hexo 博客推送至 GithubPages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 生成静态页面：$ hexo generate （或：hexo g）INFO Start processingINFO Files loaded in 272 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: fancybox/fancybox_loading.gifINFO Generated: archives/2019/index.htmlINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: archives/2019/01/index.htmlINFO Generated: js/script.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: css/fonts/FontAwesome.otfINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/style.cssINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2019/01/07/hello-world/index.htmlINFO Generated: fancybox/jquery.fancybox.jsINFO Generated: css/images/banner.jpgINFO 28 files generated in 650 ms# 部署至 GithubPages：$ hexo deploy （或：hexo d）INFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) 6d469d7] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master c71b7a5] Site updated: 2019-01-08 12:03:08 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.To github.com:TheNightIsYoung/TheNightIsYoung.github.io.git * [new branch] HEAD -&gt; masterINFO Deploy done: git 4）通过浏览器访问网址： https://&lt;Your github account name&gt;.github.io 就可以看到和本地 hexo 博客相同页面。 ================================================= 对比 Hexo 站点目录，观察一下被推送到远程仓库的文件，你是否发现： 远程仓库中的资源文件，其实就是我们的 .../&lt;Hexo 站点目录&gt;/public 目录下的内容。简单来说，执行 hexo d 命令会将站点目录下 ：public 目录下的内容推送到远程仓库，而 Hexo 博客项目的配置文件、主题、scaffolds 等等，仍在我们本地储存维护…. 实施方案二：Github·Page + Gitee·Page使用过 Github 都知道，Github 有时候在国内访问较慢，而 Gitee 国外访问较快。故除了添加 Github 仓库外，我们可以在第一种实施方案的基础上配置 Citee·Page。 1）hexo-deployer-git 插件已经安装过，这里可以直接跳过； 2）修改站点目录下 _config.yml（站点配置文件）。修改文件末尾为： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io.git branch: master- type: git repo: git@gitee.com:&lt;Your coding account name&gt;/&lt;Your coding account name&gt;.git branch: master 实际环境测试： 123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:TheNightIsYoung/TheNightIsYoung.github.io.git branch: master- type: git repo: git@gitee.com:thenightisyoung/thenightisyoung.git branch: master 这里，我的 gitee account name（Gitee 账户名称）为：thenightisyoung。 3）将本地 Hexo 博客推送至 GiteePages，Git Bash 输入以下命令， 返回 INFO Deploy done: git 即表示成功推送： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ hexo g$ hexo dINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in F:/HexoBlogProject/.deploy_git/.git/[master (root-commit) c9fcced] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...[master 498e47c] Site updated: 2019-01-08 13:55:57 29 files changed, 5777 insertions(+) create mode 100644 2019/01/07/hello-world/index.html create mode 100644 archives/2019/01/index.html create mode 100644 archives/2019/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git'.git@gitee.com:TheNightIsYoung/TheNightIsYoung.github.io.git + c425509...498e47c HEAD -&gt; master (forced update)INFO Deploy done: gitINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanBranch 'master' set up to track remote branch 'master' from 'git@gitee.com:TheMusicIsLoud/TheMusicIsLoud.git'.To git.dev.tencent.com:TheMusicIsLoud/TheMusicIsLoud.git * [new branch] HEAD -&gt; masterINFO Deploy done: git ４）Gitee 还需要通过 Gitee Pages 服务 ，才能开启静态 Pages 应用（Service –&gt; Gitee Pages）。如下页面显示： 开启成功后界面如下： 5）通过浏览器访问网址： https://&lt;Your coding account name&gt;.gitee.io/ 同样也可以访问到 hexo 博客页面 12# 我的访问链接如下：https://thenightisyoung.gitee.io 实施方案三：Github·Page + Gitee·Page + domain name上面我们已经将 Hexo 个人博客远程托管到 Gihub &amp; Gitee上了。 还能不能再继续优化一下方案？？？ 一方面每一次进行访问时，我们都需要通过 https://&lt;Your coding account name&gt;.coding.me 或者 https://&lt;Your github account name&gt;.gitee.io 一长串的域名来进行访问，显得非常繁琐；另一方面我们有一个闲置的域名，单纯想做域名映射，以达到通过域名即可访问我们的个人博客。 前提：你有一个闲置的自定义域名。这里你可以为 Github·Page 或者 Gitee·Page 配置域名映射，二选其一，Gitee 域名绑定是面向企业用户（难受）。 1）配置 Github·Page 的域名映射 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your github account name&gt;.github.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.github.io# TTL：默认选项即可 注意：要确认你的域名的解析状态为正常状态！ 2 –&gt; 博客 Github 仓库设置： 首先打开博客仓库设置：https://github.com/&lt;Your github account name&gt;/&lt;Your github account name&gt;.github.io/settings 找到 Custom domain，填写好自定义域名（例如：www.xxxxxx.com），点击 save。 –&gt; 启用 Github Page HTTPS ： 自 2018 年 5 月 1 日，Github 支持自定义域名的 HTTPS 请求了，直接在 Custom domain 下勾选 Enforce HTTPS 即可开启。 配置也相当简单，只需要更新 DNS 配置里的 A 记录，将其指向以下4个 IP 地址中的至少一个。 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 HTTPS 让你的网站和网站访客更安全，并且 Github 提供的这些 IP 地址自动将你的站点加入了 CDN，提高了访问速度（真香~）。 3 –&gt; 在 Hexo 站点目录中的 public 目录下创建 CNAME 文件，内容如下： www.xxxxxx.com 部署： 1$ hexo d 4 –&gt; 等待一段时间（域名生效时间，10分钟左右）后，我们发现已经可以通过我们的域名访问到个人博客了。 2）配置 Gitee·Page 的域名映射 在上述 配置 Github·Page 的域名映射 基础上进行如下设置即可将域名指向 &lt;Your coding account name&gt;.coding.me： 1 –&gt; 域名解析（使用域名的前提）参数： 添加一条 CNAME 记录指向 &lt;Your coding account name&gt;.gitee.io： 12345# 记录类型：选择为 CNAME# 主机记录（即域名前缀）：选择为 www# 解析线路：默认选项即可# 记录值：&lt;Your github account name&gt;.gitee.io# TTL：默认选项即可 注意：要确认域名解析状态为正常状态！ 2 –&gt; 打开 Pages 服务 设置页:https://dev.tencent.com/u/&lt;Your coding account name&gt;/p/&lt;Your coding account name&gt;/git/pages/settings, 进行域名绑定即可。 留一个小期待吧，希望码农后续可以支持普通用户的 Gitee·Pages 绑定自定义域名，持续关注 。 至此，你就可以通过你的自定义域名进行 Hexo 博客的访问了。 Problem &amp;&amp; Solution1）Github·Page 配置域名绑定问题 问题描述：Github·Page 项目成功绑定了自定义域名之后，可以正常通过域名进行站点访问了。但发现一个现象，在部署上传新的文章后，访问又双叒变成了 404 ？？？ WTF！？在我打算再次重新配置 Github·Page 的时候，我突然发现仓库 Settings 页面绑定域名的那一栏变成空了，是谁动了我的奶酪？？？ 度娘上查到，在为 Github·Page 配置域名绑定之后，会在当前仓库中自动生成一个 CNAME 文件（你可以重新 Save 域名试一下），查看 CNAME 文件内容： 12# 只有一行语句，就是你的域名your domain name 而我们在 hexo d 重新部署之后，发现 CNAME 文件不见了。 你很容易可以想到，hexo d 时，Hexo 会将 public 目录中的文件和目录推送至远端仓库指定分支中，并且完全覆盖该分支下的已有内容。 也即是说，前面我们在 “实施方案一：Github·Page” 配置过程中，由于 public 文件下没有 CNAME 文件，导致远程仓库中的域名绑定相关的 CNAME 文件 被覆盖掉了，≧ ﹏ ≦ 知道了原因，下面我们给出解决方法： 我们知道，站点目录下 public 中的文件是由 source 文件夹的内容生成的。我们尝试一下在 source 目录下添加一个 Github·Page 需要的 CNAME 文件 ，内容如下； 12# 我的域名www.orangeshare.cn 然后执行如下命令，清除以及重新生成静态页面内容： 12$ hexo clean$ hexo g 可以观察到，重新生成的 public 目录下，已经包含 CNAME 文件 了，有点小激动啊~ 再次 hexo d 推送试一下。成功了 O(∩_∩)O","link":"/2017/09/20/%E4%B8%80%E6%96%87%E5%AD%A6%E4%BC%9A-Hexo-%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%90%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%91/"}],"tags":[{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Picture bed","slug":"Picture-bed","link":"/tags/Picture-bed/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"}]}